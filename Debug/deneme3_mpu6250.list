
deneme3_mpu6250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800bbb0  0800bbb0  0001bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c110  0800c110  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c118  0800c118  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e4  0800c304  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800c304  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d594  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5a  00000000  00000000  0002d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d07  00000000  00000000  00030c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5b1  00000000  00000000  0005396f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd27e  00000000  00000000  00062f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013019e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  001301f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb94 	.word	0x0800bb94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800bb94 	.word	0x0800bb94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f5 	b.w	80010d4 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9aa 	b.w	80010d4 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2319      	movs	r3, #25
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	463b      	mov	r3, r7
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	2288      	movs	r2, #136	; 0x88
 80010f0:	21ec      	movs	r1, #236	; 0xec
 80010f2:	4857      	ldr	r0, [pc, #348]	; (8001250 <TrimRead+0x178>)
 80010f4:	f002 fb48 	bl	8003788 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010f8:	463b      	mov	r3, r7
 80010fa:	3319      	adds	r3, #25
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	9202      	str	r2, [sp, #8]
 8001102:	2207      	movs	r2, #7
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	22e1      	movs	r2, #225	; 0xe1
 800110c:	21ec      	movs	r1, #236	; 0xec
 800110e:	4850      	ldr	r0, [pc, #320]	; (8001250 <TrimRead+0x178>)
 8001110:	f002 fb3a 	bl	8003788 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	783b      	ldrb	r3, [r7, #0]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <TrimRead+0x17c>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	78bb      	ldrb	r3, [r7, #2]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <TrimRead+0x180>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <TrimRead+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	797b      	ldrb	r3, [r7, #5]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <TrimRead+0x188>)
 800115e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001160:	7a7b      	ldrb	r3, [r7, #9]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <TrimRead+0x18c>)
 8001170:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <TrimRead+0x190>)
 8001182:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7b3b      	ldrb	r3, [r7, #12]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <TrimRead+0x194>)
 8001194:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <TrimRead+0x198>)
 80011a6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011a8:	7c7b      	ldrb	r3, [r7, #17]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7c3b      	ldrb	r3, [r7, #16]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <TrimRead+0x19c>)
 80011b8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011ba:	7cfb      	ldrb	r3, [r7, #19]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7cbb      	ldrb	r3, [r7, #18]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <TrimRead+0x1a0>)
 80011ca:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011cc:	7d7b      	ldrb	r3, [r7, #21]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7d3b      	ldrb	r3, [r7, #20]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <TrimRead+0x1a4>)
 80011dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7dbb      	ldrb	r3, [r7, #22]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <TrimRead+0x1a8>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011f0:	7e3b      	ldrb	r3, [r7, #24]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <TrimRead+0x1ac>)
 80011f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011f8:	7ebb      	ldrb	r3, [r7, #26]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7e7b      	ldrb	r3, [r7, #25]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <TrimRead+0x1b0>)
 8001208:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800120a:	7efb      	ldrb	r3, [r7, #27]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <TrimRead+0x1b4>)
 8001210:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001212:	7f3b      	ldrb	r3, [r7, #28]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	b21a      	sxth	r2, r3
 8001218:	7f7b      	ldrb	r3, [r7, #29]
 800121a:	b21b      	sxth	r3, r3
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <TrimRead+0x1b8>)
 8001228:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800122a:	7fbb      	ldrb	r3, [r7, #30]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	b21a      	sxth	r2, r3
 8001230:	7f7b      	ldrb	r3, [r7, #29]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <TrimRead+0x1bc>)
 800123e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <TrimRead+0x1c0>)
 8001246:	801a      	strh	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000028c 	.word	0x2000028c
 8001254:	2000020c 	.word	0x2000020c
 8001258:	20000214 	.word	0x20000214
 800125c:	20000216 	.word	0x20000216
 8001260:	2000020e 	.word	0x2000020e
 8001264:	20000218 	.word	0x20000218
 8001268:	2000021a 	.word	0x2000021a
 800126c:	2000021c 	.word	0x2000021c
 8001270:	2000021e 	.word	0x2000021e
 8001274:	20000220 	.word	0x20000220
 8001278:	20000222 	.word	0x20000222
 800127c:	20000224 	.word	0x20000224
 8001280:	20000226 	.word	0x20000226
 8001284:	20000210 	.word	0x20000210
 8001288:	20000228 	.word	0x20000228
 800128c:	20000212 	.word	0x20000212
 8001290:	2000022a 	.word	0x2000022a
 8001294:	2000022c 	.word	0x2000022c
 8001298:	2000022e 	.word	0x2000022e

0800129c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4603      	mov	r3, r0
 80012b0:	71bb      	strb	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	717b      	strb	r3, [r7, #5]
 80012b6:	4613      	mov	r3, r2
 80012b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ba:	f7ff ff0d 	bl	80010d8 <TrimRead>


	uint8_t datatowrite = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012c6:	23b6      	movs	r3, #182	; 0xb6
 80012c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f107 030f 	add.w	r3, r7, #15
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	22e0      	movs	r2, #224	; 0xe0
 80012de:	21ec      	movs	r1, #236	; 0xec
 80012e0:	4858      	ldr	r0, [pc, #352]	; (8001444 <BME280_Config+0x1a8>)
 80012e2:	f002 f957 	bl	8003594 <HAL_I2C_Mem_Write>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <BME280_Config+0x56>
	{
		return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	e0a3      	b.n	800143a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f001 fa2e 	bl	8002754 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	22f2      	movs	r2, #242	; 0xf2
 8001310:	21ec      	movs	r1, #236	; 0xec
 8001312:	484c      	ldr	r0, [pc, #304]	; (8001444 <BME280_Config+0x1a8>)
 8001314:	f002 f93e 	bl	8003594 <HAL_I2C_Mem_Write>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <BME280_Config+0x88>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e08a      	b.n	800143a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f001 fa15 	bl	8002754 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 030e 	add.w	r3, r7, #14
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	22f2      	movs	r2, #242	; 0xf2
 800133e:	21ec      	movs	r1, #236	; 0xec
 8001340:	4840      	ldr	r0, [pc, #256]	; (8001444 <BME280_Config+0x1a8>)
 8001342:	f002 fa21 	bl	8003788 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001346:	7bba      	ldrb	r2, [r7, #14]
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	429a      	cmp	r2, r3
 800134c:	d002      	beq.n	8001354 <BME280_Config+0xb8>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e072      	b.n	800143a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001354:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b25a      	sxtb	r2, r3
 800135c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	b25b      	sxtb	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b25b      	sxtb	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	22f5      	movs	r2, #245	; 0xf5
 8001380:	21ec      	movs	r1, #236	; 0xec
 8001382:	4830      	ldr	r0, [pc, #192]	; (8001444 <BME280_Config+0x1a8>)
 8001384:	f002 f906 	bl	8003594 <HAL_I2C_Mem_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <BME280_Config+0xf8>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e052      	b.n	800143a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f001 f9dd 	bl	8002754 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f107 030e 	add.w	r3, r7, #14
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	22f5      	movs	r2, #245	; 0xf5
 80013ae:	21ec      	movs	r1, #236	; 0xec
 80013b0:	4824      	ldr	r0, [pc, #144]	; (8001444 <BME280_Config+0x1a8>)
 80013b2:	f002 f9e9 	bl	8003788 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013b6:	7bba      	ldrb	r2, [r7, #14]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0x128>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e03a      	b.n	800143a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	015b      	lsls	r3, r3, #5
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 030f 	add.w	r3, r7, #15
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	22f4      	movs	r2, #244	; 0xf4
 80013f4:	21ec      	movs	r1, #236	; 0xec
 80013f6:	4813      	ldr	r0, [pc, #76]	; (8001444 <BME280_Config+0x1a8>)
 80013f8:	f002 f8cc 	bl	8003594 <HAL_I2C_Mem_Write>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x16c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e018      	b.n	800143a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f001 f9a3 	bl	8002754 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	f107 030e 	add.w	r3, r7, #14
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	22f4      	movs	r2, #244	; 0xf4
 8001422:	21ec      	movs	r1, #236	; 0xec
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <BME280_Config+0x1a8>)
 8001426:	f002 f9af 	bl	8003788 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	429a      	cmp	r2, r3
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x19c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e000      	b.n	800143a <BME280_Config+0x19e>
	}

	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	2000028c 	.word	0x2000028c

08001448 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];
	int8_t ChipID[1];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, (0x76<<1), 0xD0, 1, ChipID, 1, 1000);
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2301      	movs	r3, #1
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	22d0      	movs	r2, #208	; 0xd0
 8001460:	21ec      	movs	r1, #236	; 0xec
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <BMEReadRaw+0x88>)
 8001464:	f002 f990 	bl	8003788 <HAL_I2C_Mem_Read>

	if (ChipID[0] == 0x60)
 8001468:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800146c:	2b60      	cmp	r3, #96	; 0x60
 800146e:	d12b      	bne.n	80014c8 <BMEReadRaw+0x80>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2308      	movs	r3, #8
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	22f7      	movs	r2, #247	; 0xf7
 8001484:	21ec      	movs	r1, #236	; 0xec
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <BMEReadRaw+0x88>)
 8001488:	f002 f97e 	bl	8003788 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800148c:	7a3b      	ldrb	r3, [r7, #8]
 800148e:	031a      	lsls	r2, r3, #12
 8001490:	7a7b      	ldrb	r3, [r7, #9]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4313      	orrs	r3, r2
 8001496:	7aba      	ldrb	r2, [r7, #10]
 8001498:	0912      	lsrs	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	4313      	orrs	r3, r2
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <BMEReadRaw+0x8c>)
 80014a0:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	031a      	lsls	r2, r3, #12
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4313      	orrs	r3, r2
 80014ac:	7b7a      	ldrb	r2, [r7, #13]
 80014ae:	0912      	lsrs	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <BMEReadRaw+0x90>)
 80014b6:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	4313      	orrs	r3, r2
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <BMEReadRaw+0x94>)
 80014c2:	6013      	str	r3, [r2, #0]

		return 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e7ff      	b.n	80014c8 <BMEReadRaw+0x80>
	}

	//else return -1;
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000028c 	.word	0x2000028c
 80014d4:	20000204 	.word	0x20000204
 80014d8:	20000200 	.word	0x20000200
 80014dc:	20000208 	.word	0x20000208

080014e0 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	10da      	asrs	r2, r3, #3
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <BME280_compensate_T_int32+0x74>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <BME280_compensate_T_int32+0x78>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	12db      	asrs	r3, r3, #11
 8001500:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <BME280_compensate_T_int32+0x74>)
 8001508:	8812      	ldrh	r2, [r2, #0]
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	1112      	asrs	r2, r2, #4
 8001510:	4910      	ldr	r1, [pc, #64]	; (8001554 <BME280_compensate_T_int32+0x74>)
 8001512:	8809      	ldrh	r1, [r1, #0]
 8001514:	1a52      	subs	r2, r2, r1
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	131b      	asrs	r3, r3, #12
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <BME280_compensate_T_int32+0x7c>)
 800151e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	139b      	asrs	r3, r3, #14
 8001528:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4413      	add	r3, r2
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <BME280_compensate_T_int32+0x80>)
 8001532:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <BME280_compensate_T_int32+0x80>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3380      	adds	r3, #128	; 0x80
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	60fb      	str	r3, [r7, #12]
	return T;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000020c 	.word	0x2000020c
 8001558:	20000214 	.word	0x20000214
 800155c:	20000216 	.word	0x20000216
 8001560:	20000230 	.word	0x20000230

08001564 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001568:	b0ca      	sub	sp, #296	; 0x128
 800156a:	af00      	add	r7, sp, #0
 800156c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001570:	4baf      	ldr	r3, [pc, #700]	; (8001830 <BME280_compensate_P_int64+0x2cc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	17da      	asrs	r2, r3, #31
 8001576:	461c      	mov	r4, r3
 8001578:	4615      	mov	r5, r2
 800157a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800157e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001582:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001586:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800158e:	fb03 f102 	mul.w	r1, r3, r2
 8001592:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001596:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	18ca      	adds	r2, r1, r3
 80015a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a4:	fba3 8903 	umull	r8, r9, r3, r3
 80015a8:	eb02 0309 	add.w	r3, r2, r9
 80015ac:	4699      	mov	r9, r3
 80015ae:	4ba1      	ldr	r3, [pc, #644]	; (8001834 <BME280_compensate_P_int64+0x2d0>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	17da      	asrs	r2, r3, #31
 80015b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015c4:	4603      	mov	r3, r0
 80015c6:	fb03 f209 	mul.w	r2, r3, r9
 80015ca:	460b      	mov	r3, r1
 80015cc:	fb08 f303 	mul.w	r3, r8, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	4602      	mov	r2, r0
 80015d4:	fba8 1202 	umull	r1, r2, r8, r2
 80015d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015dc:	460a      	mov	r2, r1
 80015de:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015e6:	4413      	add	r3, r2
 80015e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015ec:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015f0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <BME280_compensate_P_int64+0x2d4>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	17da      	asrs	r2, r3, #31
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001606:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800160a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001612:	462a      	mov	r2, r5
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161c:	4621      	mov	r1, r4
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	441a      	add	r2, r3
 8001624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001628:	4621      	mov	r1, r4
 800162a:	fba3 1301 	umull	r1, r3, r3, r1
 800162e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001632:	460b      	mov	r3, r1
 8001634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800164e:	462b      	mov	r3, r5
 8001650:	0459      	lsls	r1, r3, #17
 8001652:	4623      	mov	r3, r4
 8001654:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001658:	4623      	mov	r3, r4
 800165a:	0458      	lsls	r0, r3, #17
 800165c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001660:	1814      	adds	r4, r2, r0
 8001662:	643c      	str	r4, [r7, #64]	; 0x40
 8001664:	414b      	adcs	r3, r1
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
 8001668:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800166c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001670:	4b72      	ldr	r3, [pc, #456]	; (800183c <BME280_compensate_P_int64+0x2d8>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	b21b      	sxth	r3, r3
 8001678:	17da      	asrs	r2, r3, #31
 800167a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800167e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800168e:	00d9      	lsls	r1, r3, #3
 8001690:	2000      	movs	r0, #0
 8001692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001696:	1814      	adds	r4, r2, r0
 8001698:	63bc      	str	r4, [r7, #56]	; 0x38
 800169a:	414b      	adcs	r3, r1
 800169c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800169e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ae:	fb03 f102 	mul.w	r1, r3, r2
 80016b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	18ca      	adds	r2, r1, r3
 80016c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c4:	fba3 1303 	umull	r1, r3, r3, r3
 80016c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016cc:	460b      	mov	r3, r1
 80016ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016d6:	18d3      	adds	r3, r2, r3
 80016d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <BME280_compensate_P_int64+0x2dc>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ee:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016f2:	462b      	mov	r3, r5
 80016f4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016f8:	4642      	mov	r2, r8
 80016fa:	fb02 f203 	mul.w	r2, r2, r3
 80016fe:	464b      	mov	r3, r9
 8001700:	4621      	mov	r1, r4
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	4622      	mov	r2, r4
 800170a:	4641      	mov	r1, r8
 800170c:	fba2 1201 	umull	r1, r2, r2, r1
 8001710:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001714:	460a      	mov	r2, r1
 8001716:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800171a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800171e:	4413      	add	r3, r2
 8001720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001730:	4623      	mov	r3, r4
 8001732:	0a18      	lsrs	r0, r3, #8
 8001734:	462b      	mov	r3, r5
 8001736:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800173a:	462b      	mov	r3, r5
 800173c:	1219      	asrs	r1, r3, #8
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <BME280_compensate_P_int64+0x2e0>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	b21b      	sxth	r3, r3
 8001746:	17da      	asrs	r2, r3, #31
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800174c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001754:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001758:	464a      	mov	r2, r9
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001762:	4644      	mov	r4, r8
 8001764:	fb04 f303 	mul.w	r3, r4, r3
 8001768:	441a      	add	r2, r3
 800176a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800176e:	4644      	mov	r4, r8
 8001770:	fba3 4304 	umull	r4, r3, r3, r4
 8001774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001778:	4623      	mov	r3, r4
 800177a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800177e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001794:	464c      	mov	r4, r9
 8001796:	0323      	lsls	r3, r4, #12
 8001798:	4644      	mov	r4, r8
 800179a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800179e:	4644      	mov	r4, r8
 80017a0:	0322      	lsls	r2, r4, #12
 80017a2:	1884      	adds	r4, r0, r2
 80017a4:	633c      	str	r4, [r7, #48]	; 0x30
 80017a6:	eb41 0303 	adc.w	r3, r1, r3
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
 80017ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017b0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017bc:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <BME280_compensate_P_int64+0x2e4>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017d4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017d8:	462b      	mov	r3, r5
 80017da:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017de:	4642      	mov	r2, r8
 80017e0:	fb02 f203 	mul.w	r2, r2, r3
 80017e4:	464b      	mov	r3, r9
 80017e6:	4621      	mov	r1, r4
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	4622      	mov	r2, r4
 80017f0:	4641      	mov	r1, r8
 80017f2:	fba2 1201 	umull	r1, r2, r2, r1
 80017f6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017fa:	460a      	mov	r2, r1
 80017fc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001800:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001804:	4413      	add	r3, r2
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001816:	4629      	mov	r1, r5
 8001818:	104a      	asrs	r2, r1, #1
 800181a:	4629      	mov	r1, r5
 800181c:	17cb      	asrs	r3, r1, #31
 800181e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001822:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001826:	4313      	orrs	r3, r2
 8001828:	d110      	bne.n	800184c <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800182a:	2300      	movs	r3, #0
 800182c:	e154      	b.n	8001ad8 <BME280_compensate_P_int64+0x574>
 800182e:	bf00      	nop
 8001830:	20000230 	.word	0x20000230
 8001834:	20000220 	.word	0x20000220
 8001838:	2000021e 	.word	0x2000021e
 800183c:	2000021c 	.word	0x2000021c
 8001840:	2000021a 	.word	0x2000021a
 8001844:	20000218 	.word	0x20000218
 8001848:	2000020e 	.word	0x2000020e
	}
	p = 1048576-adc_P;
 800184c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001850:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001854:	17da      	asrs	r2, r3, #31
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
 8001858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800185a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800185e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001862:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001866:	105b      	asrs	r3, r3, #1
 8001868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800186c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001870:	07db      	lsls	r3, r3, #31
 8001872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001876:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800187a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800187e:	4621      	mov	r1, r4
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	67b9      	str	r1, [r7, #120]	; 0x78
 8001884:	4629      	mov	r1, r5
 8001886:	eb61 0303 	sbc.w	r3, r1, r3
 800188a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800188c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	673b      	str	r3, [r7, #112]	; 0x70
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	677b      	str	r3, [r7, #116]	; 0x74
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001938:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <BME280_compensate_P_int64+0x580>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	66bb      	str	r3, [r7, #104]	; 0x68
 8001954:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800198c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <BME280_compensate_P_int64+0x584>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001a00:	667a      	str	r2, [r7, #100]	; 0x64
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a30:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a6e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	6539      	str	r1, [r7, #80]	; 0x50
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <BME280_compensate_P_int64+0x588>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae4:	20000226 	.word	0x20000226
 8001ae8:	20000224 	.word	0x20000224
 8001aec:	20000222 	.word	0x20000222

08001af0 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <bme280_compensate_H_int32+0xbc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b00:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	039a      	lsls	r2, r3, #14
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <bme280_compensate_H_int32+0xc0>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <bme280_compensate_H_int32+0xc4>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4619      	mov	r1, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b24:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <bme280_compensate_H_int32+0xc8>)
 8001b28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b2c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b34:	1292      	asrs	r2, r2, #10
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <bme280_compensate_H_int32+0xcc>)
 8001b38:	8809      	ldrh	r1, [r1, #0]
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	fb00 f101 	mul.w	r1, r0, r1
 8001b42:	12c9      	asrs	r1, r1, #11
 8001b44:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b4c:	1292      	asrs	r2, r2, #10
 8001b4e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <bme280_compensate_H_int32+0xd0>)
 8001b54:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b58:	fb01 f202 	mul.w	r2, r1, r2
 8001b5c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b60:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	13db      	asrs	r3, r3, #15
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	13d2      	asrs	r2, r2, #15
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <bme280_compensate_H_int32+0xd4>)
 8001b78:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b7e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b94:	bfa8      	it	ge
 8001b96:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b9a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	131b      	asrs	r3, r3, #12
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000230 	.word	0x20000230
 8001bb0:	2000022a 	.word	0x2000022a
 8001bb4:	2000022c 	.word	0x2000022c
 8001bb8:	2000022e 	.word	0x2000022e
 8001bbc:	20000212 	.word	0x20000212
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	20000210 	.word	0x20000210

08001bc8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001bcc:	f7ff fc3c 	bl	8001448 <BMEReadRaw>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 809c 	bne.w	8001d10 <BME280_Measure+0x148>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <BME280_Measure+0x188>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001be0:	d104      	bne.n	8001bec <BME280_Measure+0x24>
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <BME280_Measure+0x18c>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e016      	b.n	8001c1a <BME280_Measure+0x52>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <BME280_Measure+0x188>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc75 	bl	80014e0 <BME280_compensate_T_int32>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcb3 	bl	8000564 <__aeabi_i2d>
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <BME280_Measure+0x190>)
 8001c04:	f7fe fe42 	bl	800088c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff f80a 	bl	8000c28 <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <BME280_Measure+0x18c>)
 8001c18:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <BME280_Measure+0x194>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c22:	d104      	bne.n	8001c2e <BME280_Measure+0x66>
 8001c24:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <BME280_Measure+0x198>)
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e01f      	b.n	8001c6e <BME280_Measure+0xa6>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0 *0.01;  // as per datasheet, the pressure is x256
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <BME280_Measure+0x194>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fc96 	bl	8001564 <BME280_compensate_P_int64>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc82 	bl	8000544 <__aeabi_ui2d>
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <BME280_Measure+0x19c>)
 8001c46:	f7fe fe21 	bl	800088c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	a337      	add	r3, pc, #220	; (adr r3, 8001d30 <BME280_Measure+0x168>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fcee 	bl	8000638 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ffe0 	bl	8000c28 <__aeabi_d2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a3d      	ldr	r2, [pc, #244]	; (8001d60 <BME280_Measure+0x198>)
 8001c6c:	6013      	str	r3, [r2, #0]


#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <BME280_Measure+0x1a0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c76:	d104      	bne.n	8001c82 <BME280_Measure+0xba>
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <BME280_Measure+0x1a4>)
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e016      	b.n	8001cb0 <BME280_Measure+0xe8>
		  else
		  {
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c82:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <BME280_Measure+0x1a0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff32 	bl	8001af0 <bme280_compensate_H_int32>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc58 	bl	8000544 <__aeabi_ui2d>
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <BME280_Measure+0x1a8>)
 8001c9a:	f7fe fdf7 	bl	800088c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe ffbf 	bl	8000c28 <__aeabi_d2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <BME280_Measure+0x1a4>)
 8001cae:	6013      	str	r3, [r2, #0]
		  }
		  Altitude = 44330 * (1 - pow(Pressure/1013.25, (1/5.255)));
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <BME280_Measure+0x198>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc67 	bl	8000588 <__aeabi_f2d>
 8001cba:	a31f      	add	r3, pc, #124	; (adr r3, 8001d38 <BME280_Measure+0x170>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fde4 	bl	800088c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	ec43 2b17 	vmov	d7, r2, r3
 8001ccc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001d40 <BME280_Measure+0x178>
 8001cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd4:	eef0 0a67 	vmov.f32	s1, s15
 8001cd8:	f008 ff52 	bl	800ab80 <pow>
 8001cdc:	ec53 2b10 	vmov	r2, r3, d0
 8001ce0:	f04f 0000 	mov.w	r0, #0
 8001ce4:	4923      	ldr	r1, [pc, #140]	; (8001d74 <BME280_Measure+0x1ac>)
 8001ce6:	f7fe faef 	bl	80002c8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a315      	add	r3, pc, #84	; (adr r3, 8001d48 <BME280_Measure+0x180>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc9e 	bl	8000638 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff90 	bl	8000c28 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <BME280_Measure+0x1b0>)
 8001d0c:	6013      	str	r3, [r2, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001d0e:	e00b      	b.n	8001d28 <BME280_Measure+0x160>
		Temperature = Pressure = Humidity = 0;
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <BME280_Measure+0x1a4>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <BME280_Measure+0x1a4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <BME280_Measure+0x198>)
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <BME280_Measure+0x198>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <BME280_Measure+0x18c>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f3af 8000 	nop.w
 8001d30:	47ae147b 	.word	0x47ae147b
 8001d34:	3f847ae1 	.word	0x3f847ae1
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	408faa00 	.word	0x408faa00
 8001d40:	ccd9456c 	.word	0xccd9456c
 8001d44:	3fc85b95 	.word	0x3fc85b95
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40e5a540 	.word	0x40e5a540
 8001d50:	20000200 	.word	0x20000200
 8001d54:	20000368 	.word	0x20000368
 8001d58:	40590000 	.word	0x40590000
 8001d5c:	20000204 	.word	0x20000204
 8001d60:	2000036c 	.word	0x2000036c
 8001d64:	40700000 	.word	0x40700000
 8001d68:	20000208 	.word	0x20000208
 8001d6c:	20000370 	.word	0x20000370
 8001d70:	40900000 	.word	0x40900000
 8001d74:	3ff00000 	.word	0x3ff00000
 8001d78:	20000374 	.word	0x20000374

08001d7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	MPU_ConfigTypeDef myMPUConfig;

	HAL_Init();
 8001d82:	f000 fc75 	bl	8002670 <HAL_Init>

	SystemClock_Config();
 8001d86:	f000 f871 	bl	8001e6c <SystemClock_Config>

	MX_GPIO_Init();
 8001d8a:	f000 f98d 	bl	80020a8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d8e:	f000 f8db 	bl	8001f48 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001d92:	f000 f935 	bl	8002000 <MX_USART2_UART_Init>

	MPU9250_Init(&hi2c1);
 8001d96:	482c      	ldr	r0, [pc, #176]	; (8001e48 <main+0xcc>)
 8001d98:	f003 fd72 	bl	8005880 <MPU9250_Init>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d9c:	f000 fc68 	bl	8002670 <HAL_Init>

	/* USER CODE BEGIN Init */
	myMPUConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001da0:	2301      	movs	r3, #1
 8001da2:	70bb      	strb	r3, [r7, #2]
	myMPUConfig.ClockSource = Internal_8MHz;
 8001da4:	2300      	movs	r3, #0
 8001da6:	703b      	strb	r3, [r7, #0]
	myMPUConfig.CONFIG_DLPF = DLPF_260A_256G_Hz;
 8001da8:	2300      	movs	r3, #0
 8001daa:	70fb      	strb	r3, [r7, #3]
	myMPUConfig.Gyro_Full_Scale = FS_SEL_500;
 8001dac:	2301      	movs	r3, #1
 8001dae:	707b      	strb	r3, [r7, #1]
	myMPUConfig.Sleep_Mode_Bit = 0; //zero is for ON mode and 1 is for sleep mode // We can set it alternatively 1 if issuing wake up interrupts
 8001db0:	2300      	movs	r3, #0
 8001db2:	713b      	strb	r3, [r7, #4]

	MPU9250_Init(&hi2c1);
 8001db4:	4824      	ldr	r0, [pc, #144]	; (8001e48 <main+0xcc>)
 8001db6:	f003 fd63 	bl	8005880 <MPU9250_Init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dba:	f000 f857 	bl	8001e6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dbe:	f000 f973 	bl	80020a8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001dc2:	f000 f91d 	bl	8002000 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001dc6:	f000 f8bf 	bl	8001f48 <MX_I2C1_Init>
	MX_I2C2_Init();
 8001dca:	f000 f8eb 	bl	8001fa4 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8001dce:	f000 f941 	bl	8002054 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2303      	movs	r3, #3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2105      	movs	r1, #5
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff fa5b 	bl	800129c <BME280_Config>
	MPU9250_Config(&myMPUConfig);
 8001de6:	463b      	mov	r3, r7
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fd9d 	bl	8005928 <MPU9250_Config>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		BME280_Measure();
 8001dee:	f7ff feeb 	bl	8001bc8 <BME280_Measure>
		MPU9250_Get_Accel_Scale(&AccelScaled);
 8001df2:	4816      	ldr	r0, [pc, #88]	; (8001e4c <main+0xd0>)
 8001df4:	f003 feb4 	bl	8005b60 <MPU9250_Get_Accel_Scale>
		MPU9250_Get_Gyro_Scale(&GyroScaled);
 8001df8:	4815      	ldr	r0, [pc, #84]	; (8001e50 <main+0xd4>)
 8001dfa:	f003 fffb 	bl	8005df4 <MPU9250_Get_Gyro_Scale>
		Get_Packaged_Data(&Packaged_Data);
 8001dfe:	4815      	ldr	r0, [pc, #84]	; (8001e54 <main+0xd8>)
 8001e00:	f004 f844 	bl	8005e8c <Get_Packaged_Data>
		HAL_Delay(100);
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f000 fca5 	bl	8002754 <HAL_Delay>
		//if (sayac == 10) {
		//	sayac = 0;
		//}
		//sprintf(giden_data,"A %f \r\n B %f \r\n C %f \r\n D %f \r\n E %f \r\n ",Temperature, Pressure, Humidity, Altitude, Temperature);
		//	printf("Data : %d[x]" ,Packaged_Data);
		HAL_UART_Transmit(&huart3, (uint8_t*) &adres0, sizeof(adres0), 10);
 8001e0a:	230a      	movs	r3, #10
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4912      	ldr	r1, [pc, #72]	; (8001e58 <main+0xdc>)
 8001e10:	4812      	ldr	r0, [pc, #72]	; (8001e5c <main+0xe0>)
 8001e12:	f003 f9c0 	bl	8005196 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &adres, sizeof(adres), 10);
 8001e16:	230a      	movs	r3, #10
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4911      	ldr	r1, [pc, #68]	; (8001e60 <main+0xe4>)
 8001e1c:	480f      	ldr	r0, [pc, #60]	; (8001e5c <main+0xe0>)
 8001e1e:	f003 f9ba 	bl	8005196 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &kanal, sizeof(kanal), 10);
 8001e22:	230a      	movs	r3, #10
 8001e24:	2201      	movs	r2, #1
 8001e26:	490f      	ldr	r1, [pc, #60]	; (8001e64 <main+0xe8>)
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <main+0xe0>)
 8001e2a:	f003 f9b4 	bl	8005196 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart3, (uint8_t*) &mal, sizeof(mal), 10);

		HAL_UART_Transmit(&huart2,&Packaged_Data, sizeof(Packaged_Data),HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	2218      	movs	r2, #24
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <main+0xd8>)
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <main+0xec>)
 8001e38:	f003 f9ad 	bl	8005196 <HAL_UART_Transmit>
		//HAL_UART_Receive(&huart2, &gelendata, 8,100);
		HAL_Delay(1000);
 8001e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e40:	f000 fc88 	bl	8002754 <HAL_Delay>
		BME280_Measure();
 8001e44:	e7d3      	b.n	8001dee <main+0x72>
 8001e46:	bf00      	nop
 8001e48:	20000238 	.word	0x20000238
 8001e4c:	20000378 	.word	0x20000378
 8001e50:	20000384 	.word	0x20000384
 8001e54:	20000390 	.word	0x20000390
 8001e58:	20000234 	.word	0x20000234
 8001e5c:	20000324 	.word	0x20000324
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000001 	.word	0x20000001
 8001e68:	200002e0 	.word	0x200002e0

08001e6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	2234      	movs	r2, #52	; 0x34
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f86c 	bl	8005f58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <SystemClock_Config+0xd4>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <SystemClock_Config+0xd4>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <SystemClock_Config+0xd4>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001eac:	2300      	movs	r3, #0
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <SystemClock_Config+0xd8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <SystemClock_Config+0xd8>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <SystemClock_Config+0xd8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ee4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ee8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eea:	2304      	movs	r3, #4
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fe60 	bl	8004bc0 <HAL_RCC_OscConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0x9e>
		Error_Handler();
 8001f06:	f000 f93d 	bl	8002184 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fb00 	bl	800452c <HAL_RCC_ClockConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0xca>
		Error_Handler();
 8001f32:	f000 f927 	bl	8002184 <Error_Handler>
	}
}
 8001f36:	bf00      	nop
 8001f38:	3750      	adds	r7, #80	; 0x50
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000

08001f48 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <MX_I2C1_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f86:	f000 fe9d 	bl	8002cc4 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001f90:	f000 f8f8 	bl	8002184 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000238 	.word	0x20000238
 8001f9c:	40005400 	.word	0x40005400
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <MX_I2C2_Init+0x54>)
 8001fac:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_I2C2_Init+0x58>)
 8001fb2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fe2:	f000 fe6f 	bl	8002cc4 <HAL_I2C_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001fec:	f000 f8ca 	bl	8002184 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000028c 	.word	0x2000028c
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	000186a0 	.word	0x000186a0

08002000 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_USART2_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002038:	f003 f860 	bl	80050fc <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002042:	f000 f89f 	bl	8002184 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002e0 	.word	0x200002e0
 8002050:	40004400 	.word	0x40004400

08002054 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_USART3_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002060:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002064:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800208c:	f003 f836 	bl	80050fc <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002096:	f000 f875 	bl	8002184 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000324 	.word	0x20000324
 80020a4:	40004800 	.word	0x40004800

080020a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <MX_GPIO_Init+0xd0>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2120      	movs	r1, #32
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <MX_GPIO_Init+0xd4>)
 8002134:	f000 fdac 	bl	8002c90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800213e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002142:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_GPIO_Init+0xd8>)
 8002150:	f000 fc0a 	bl	8002968 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002154:	2320      	movs	r3, #32
 8002156:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_GPIO_Init+0xd4>)
 800216c:	f000 fbfc 	bl	8002968 <HAL_GPIO_Init>

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020800 	.word	0x40020800

08002184 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800218c:	e7fe      	b.n	800218c <Error_Handler+0x8>
	...

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <HAL_MspInit+0x4c>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x4c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ce:	2007      	movs	r0, #7
 80021d0:	f000 fb96 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a42      	ldr	r2, [pc, #264]	; (8002308 <HAL_I2C_MspInit+0x128>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12c      	bne.n	800225c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a40      	ldr	r2, [pc, #256]	; (800230c <HAL_I2C_MspInit+0x12c>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002222:	2312      	movs	r3, #18
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222e:	2304      	movs	r3, #4
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	4835      	ldr	r0, [pc, #212]	; (8002310 <HAL_I2C_MspInit+0x130>)
 800223a:	f000 fb95 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800225a:	e050      	b.n	80022fe <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <HAL_I2C_MspInit+0x134>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d14b      	bne.n	80022fe <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_I2C_MspInit+0x12c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_I2C_MspInit+0x12c>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_I2C_MspInit+0x12c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800229e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a4:	2312      	movs	r3, #18
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b0:	2304      	movs	r3, #4
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <HAL_I2C_MspInit+0x130>)
 80022bc:	f000 fb54 	bl	8002968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c6:	2312      	movs	r3, #18
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d2:	2304      	movs	r3, #4
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <HAL_I2C_MspInit+0x138>)
 80022de:	f000 fb43 	bl	8002968 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_I2C_MspInit+0x12c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_I2C_MspInit+0x12c>)
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_I2C_MspInit+0x12c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
}
 80022fe:	bf00      	nop
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40005400 	.word	0x40005400
 800230c:	40023800 	.word	0x40023800
 8002310:	40020400 	.word	0x40020400
 8002314:	40005800 	.word	0x40005800
 8002318:	40020800 	.word	0x40020800

0800231c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a32      	ldr	r2, [pc, #200]	; (8002404 <HAL_UART_MspInit+0xe8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_UART_MspInit+0xec>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_UART_MspInit+0xec>)
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_UART_MspInit+0xec>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_UART_MspInit+0xec>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_UART_MspInit+0xec>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_UART_MspInit+0xec>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002376:	230c      	movs	r3, #12
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002386:	2307      	movs	r3, #7
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	481e      	ldr	r0, [pc, #120]	; (800240c <HAL_UART_MspInit+0xf0>)
 8002392:	f000 fae9 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002396:	e031      	b.n	80023fc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_UART_MspInit+0xf4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12c      	bne.n	80023fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_UART_MspInit+0xec>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80023da:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <HAL_UART_MspInit+0xf8>)
 80023f8:	f000 fab6 	bl	8002968 <HAL_GPIO_Init>
}
 80023fc:	bf00      	nop
 80023fe:	3730      	adds	r7, #48	; 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40004400 	.word	0x40004400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000
 8002410:	40004800 	.word	0x40004800
 8002414:	40020800 	.word	0x40020800

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f000 f956 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_kill>:

int _kill(int pid, int sig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002486:	f003 fd2f 	bl	8005ee8 <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2216      	movs	r2, #22
 800248e:	601a      	str	r2, [r3, #0]
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_exit>:

void _exit (int status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ae:	e7fe      	b.n	80024ae <_exit+0x12>

080024b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00a      	b.n	80024d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024c2:	f3af 8000 	nop.w
 80024c6:	4601      	mov	r1, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf0      	blt.n	80024c2 <_read+0x12>
  }

  return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf1      	blt.n	80024fc <_write+0x12>
  }
  return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_close>:

int _close(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	605a      	str	r2, [r3, #4]
  return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_isatty>:

int _isatty(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f003 fc94 	bl	8005ee8 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20020000 	.word	0x20020000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	200003a8 	.word	0x200003a8
 80025f4:	20000448 	.word	0x20000448

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002638:	4c0b      	ldr	r4, [pc, #44]	; (8002668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002646:	f7ff ffd7 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f003 fc53 	bl	8005ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7ff fb95 	bl	8001d7c <main>
  bx  lr    
 8002652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002660:	0800c120 	.word	0x0800c120
  ldr r2, =_sbss
 8002664:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002668:	20000448 	.word	0x20000448

0800266c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f931 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fd74 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f93b 	bl	800294e <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 f911 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000004 	.word	0x20000004
 800270c:	2000000c 	.word	0x2000000c
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c
 8002738:	200003ac 	.word	0x200003ac

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200003ac 	.word	0x200003ac

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000000c 	.word	0x2000000c

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff47 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff5c 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffb0 	bl	80028bc <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e165      	b.n	8002c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8154 	bne.w	8002c4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80ae 	beq.w	8002c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a5c      	ldr	r2, [pc, #368]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4f      	ldr	r2, [pc, #316]	; (8002c70 <HAL_GPIO_Init+0x308>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d025      	beq.n	8002b82 <HAL_GPIO_Init+0x21a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4e      	ldr	r2, [pc, #312]	; (8002c74 <HAL_GPIO_Init+0x30c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <HAL_GPIO_Init+0x216>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <HAL_GPIO_Init+0x310>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d019      	beq.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <HAL_GPIO_Init+0x314>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0x20e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	; (8002c80 <HAL_GPIO_Init+0x318>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00d      	beq.n	8002b72 <HAL_GPIO_Init+0x20a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <HAL_GPIO_Init+0x31c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x206>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a49      	ldr	r2, [pc, #292]	; (8002c88 <HAL_GPIO_Init+0x320>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_GPIO_Init+0x202>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x21c>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae96 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40013c00 	.word	0x40013c00

08002c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca0:	787b      	ldrb	r3, [r7, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cac:	e003      	b.n	8002cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	041a      	lsls	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e12b      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fa78 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d28:	f001 fcf2 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a81      	ldr	r2, [pc, #516]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d807      	bhi.n	8002d48 <HAL_I2C_Init+0x84>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_I2C_Init+0x278>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bf94      	ite	ls
 8002d40:	2301      	movls	r3, #1
 8002d42:	2300      	movhi	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e006      	b.n	8002d56 <HAL_I2C_Init+0x92>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a7d      	ldr	r2, [pc, #500]	; (8002f40 <HAL_I2C_Init+0x27c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0e7      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a78      	ldr	r2, [pc, #480]	; (8002f44 <HAL_I2C_Init+0x280>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d802      	bhi.n	8002d98 <HAL_I2C_Init+0xd4>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e009      	b.n	8002dac <HAL_I2C_Init+0xe8>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_I2C_Init+0x284>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	3301      	adds	r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	495c      	ldr	r1, [pc, #368]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d819      	bhi.n	8002e00 <HAL_I2C_Init+0x13c>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de0:	400b      	ands	r3, r1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_I2C_Init+0x138>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1e59      	subs	r1, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	e051      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e04f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_I2C_Init+0x168>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_I2C_Init+0x18e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x196>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_I2C_Init+0x1bc>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e58      	subs	r0, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	e00f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6809      	ldr	r1, [r1, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6911      	ldr	r1, [r2, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	001e847f 	.word	0x001e847f
 8002f40:	003d08ff 	.word	0x003d08ff
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fbec 	bl	800273c <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 80e0 	bne.w	8003134 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4970      	ldr	r1, [pc, #448]	; (8003140 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f001 f8f6 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0d3      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_Master_Transmit+0x50>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0cc      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d007      	beq.n	8002fc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_I2C_Master_Transmit+0x1f8>)
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003004:	8979      	ldrh	r1, [r7, #10]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fde2 	bl	8003bd4 <I2C_MasterRequestWrite>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e08d      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003030:	e066      	b.n	8003100 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6a39      	ldr	r1, [r7, #32]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f001 f970 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b04      	cmp	r3, #4
 8003048:	d107      	bne.n	800305a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06b      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d11b      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x188>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	6a39      	ldr	r1, [r7, #32]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f001 f960 	bl	800439e <I2C_WaitOnBTFFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d107      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01a      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d194      	bne.n	8003032 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00100002 	.word	0x00100002
 8003144:	ffff0000 	.word	0xffff0000

08003148 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	460b      	mov	r3, r1
 8003156:	817b      	strh	r3, [r7, #10]
 8003158:	4613      	mov	r3, r2
 800315a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff faee 	bl	800273c <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	f040 820b 	bne.w	8003586 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2319      	movs	r3, #25
 8003176:	2201      	movs	r2, #1
 8003178:	497c      	ldr	r1, [pc, #496]	; (800336c <HAL_I2C_Master_Receive+0x224>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fff8 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	e1fe      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2C_Master_Receive+0x50>
 8003194:	2302      	movs	r3, #2
 8003196:	e1f7      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d007      	beq.n	80031be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2222      	movs	r2, #34	; 0x22
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2210      	movs	r2, #16
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	893a      	ldrh	r2, [r7, #8]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_I2C_Master_Receive+0x228>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fd66 	bl	8003cd8 <I2C_MasterRequestRead>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1b8      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e18c      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11b      	bne.n	8003286 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e16c      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	2b02      	cmp	r3, #2
 800328c:	d11b      	bne.n	80032c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	e14c      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032ec:	e138      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	f200 80f1 	bhi.w	80034da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d123      	bne.n	8003348 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f001 f88b 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e139      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003346:	e10b      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	2b02      	cmp	r3, #2
 800334e:	d14e      	bne.n	80033ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2200      	movs	r2, #0
 8003358:	4906      	ldr	r1, [pc, #24]	; (8003374 <HAL_I2C_Master_Receive+0x22c>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 ff08 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e10e      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
 800336a:	bf00      	nop
 800336c:	00100002 	.word	0x00100002
 8003370:	ffff0000 	.word	0xffff0000
 8003374:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ec:	e0b8      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	2200      	movs	r2, #0
 80033f6:	4966      	ldr	r1, [pc, #408]	; (8003590 <HAL_I2C_Master_Receive+0x448>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 feb9 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0bf      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	494f      	ldr	r1, [pc, #316]	; (8003590 <HAL_I2C_Master_Receive+0x448>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fe8b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e091      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d8:	e042      	b.n	8003560 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 ff9e 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e04c      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d118      	bne.n	8003560 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f aec2 	bne.w	80032ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	00010004 	.word	0x00010004

08003594 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ae:	f7ff f8c5 	bl	800273c <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 80d9 	bne.w	8003774 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2319      	movs	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	496d      	ldr	r1, [pc, #436]	; (8003780 <HAL_I2C_Mem_Write+0x1ec>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fdcf 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	e0cc      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Write+0x56>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0c5      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d007      	beq.n	8003610 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2221      	movs	r2, #33	; 0x21
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a4d      	ldr	r2, [pc, #308]	; (8003784 <HAL_I2C_Mem_Write+0x1f0>)
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003652:	88f8      	ldrh	r0, [r7, #6]
 8003654:	893a      	ldrh	r2, [r7, #8]
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fc06 	bl	8003e74 <I2C_RequestMemoryWrite>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d052      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e081      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fe50 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06b      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_I2C_Mem_Write+0x180>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1aa      	bne.n	8003672 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fe3c 	bl	800439e <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e016      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00100002 	.word	0x00100002
 8003784:	ffff0000 	.word	0xffff0000

08003788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a2:	f7fe ffcb 	bl	800273c <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	f040 8208 	bne.w	8003bc6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2319      	movs	r3, #25
 80037bc:	2201      	movs	r2, #1
 80037be:	497b      	ldr	r1, [pc, #492]	; (80039ac <HAL_I2C_Mem_Read+0x224>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fcd5 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
 80037ce:	e1fb      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Mem_Read+0x56>
 80037da:	2302      	movs	r3, #2
 80037dc:	e1f4      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d007      	beq.n	8003804 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	; 0x22
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a5b      	ldr	r2, [pc, #364]	; (80039b0 <HAL_I2C_Mem_Read+0x228>)
 8003844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003846:	88f8      	ldrh	r0, [r7, #6]
 8003848:	893a      	ldrh	r2, [r7, #8]
 800384a:	8979      	ldrh	r1, [r7, #10]
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4603      	mov	r3, r0
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fba2 	bl	8003fa0 <I2C_RequestMemoryRead>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1b0      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386e:	2300      	movs	r3, #0
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e184      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	2b01      	cmp	r3, #1
 800389c:	d11b      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e164      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	e144      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800392c:	e138      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b03      	cmp	r3, #3
 8003934:	f200 80f1 	bhi.w	8003b1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fd6b 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e139      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003986:	e10b      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	d14e      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	2200      	movs	r2, #0
 8003998:	4906      	ldr	r1, [pc, #24]	; (80039b4 <HAL_I2C_Mem_Read+0x22c>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fbe8 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e10e      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
 80039aa:	bf00      	nop
 80039ac:	00100002 	.word	0x00100002
 80039b0:	ffff0000 	.word	0xffff0000
 80039b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a2c:	e0b8      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	4966      	ldr	r1, [pc, #408]	; (8003bd0 <HAL_I2C_Mem_Read+0x448>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fb99 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0bf      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2200      	movs	r2, #0
 8003a92:	494f      	ldr	r1, [pc, #316]	; (8003bd0 <HAL_I2C_Mem_Read+0x448>)
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fb6b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e091      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b18:	e042      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc7e 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e04c      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d118      	bne.n	8003ba0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f aec2 	bne.w	800392e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00010004 	.word	0x00010004

08003bd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d006      	beq.n	8003bfe <I2C_MasterRequestWrite+0x2a>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d003      	beq.n	8003bfe <I2C_MasterRequestWrite+0x2a>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bfc:	d108      	bne.n	8003c10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e00b      	b.n	8003c28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	2b12      	cmp	r3, #18
 8003c16:	d107      	bne.n	8003c28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fa9b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4e:	d103      	bne.n	8003c58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e035      	b.n	8003cc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c64:	d108      	bne.n	8003c78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c74:	611a      	str	r2, [r3, #16]
 8003c76:	e01b      	b.n	8003cb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c78:	897b      	ldrh	r3, [r7, #10]
 8003c7a:	11db      	asrs	r3, r3, #7
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0306 	and.w	r3, r3, #6
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f063 030f 	orn	r3, r3, #15
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <I2C_MasterRequestWrite+0xfc>)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fac1 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e010      	b.n	8003cc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <I2C_MasterRequestWrite+0x100>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fab1 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	00010008 	.word	0x00010008
 8003cd4:	00010002 	.word	0x00010002

08003cd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d006      	beq.n	8003d12 <I2C_MasterRequestRead+0x3a>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d003      	beq.n	8003d12 <I2C_MasterRequestRead+0x3a>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d10:	d108      	bne.n	8003d24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e00b      	b.n	8003d3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b11      	cmp	r3, #17
 8003d2a:	d107      	bne.n	8003d3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fa11 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d103      	bne.n	8003d6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e079      	b.n	8003e64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e05f      	b.n	8003e4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	11db      	asrs	r3, r3, #7
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f063 030f 	orn	r3, r3, #15
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4930      	ldr	r1, [pc, #192]	; (8003e6c <I2C_MasterRequestRead+0x194>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa37 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e054      	b.n	8003e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4929      	ldr	r1, [pc, #164]	; (8003e70 <I2C_MasterRequestRead+0x198>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa27 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e044      	b.n	8003e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9af 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d103      	bne.n	8003e30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e017      	b.n	8003e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	11db      	asrs	r3, r3, #7
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f063 030e 	orn	r3, r3, #14
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4907      	ldr	r1, [pc, #28]	; (8003e70 <I2C_MasterRequestRead+0x198>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f9e3 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	00010008 	.word	0x00010008
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f960 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	d103      	bne.n	8003ece <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e05f      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	492d      	ldr	r1, [pc, #180]	; (8003f9c <I2C_RequestMemoryWrite+0x128>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f998 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04c      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa02 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e02b      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	e021      	b.n	8003f90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9dc 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e005      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00010002 	.word	0x00010002

08003fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	817b      	strh	r3, [r7, #10]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	813b      	strh	r3, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8c2 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d103      	bne.n	800400a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0aa      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800401c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	4952      	ldr	r1, [pc, #328]	; (800416c <I2C_RequestMemoryRead+0x1cc>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f8fa 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e097      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f964 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e076      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e021      	b.n	80040cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	b29b      	uxth	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f93e 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e050      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040c2:	893b      	ldrh	r3, [r7, #8]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	6a39      	ldr	r1, [r7, #32]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f923 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d107      	bne.n	80040f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e035      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2200      	movs	r2, #0
 8004110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f82b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d103      	bne.n	8004138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e013      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800413c:	897b      	ldrh	r3, [r7, #10]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	6a3a      	ldr	r2, [r7, #32]
 8004150:	4906      	ldr	r1, [pc, #24]	; (800416c <I2C_RequestMemoryRead+0x1cc>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f863 	bl	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	00010002 	.word	0x00010002

08004170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004180:	e025      	b.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d021      	beq.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fad7 	bl	800273c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e023      	b.n	8004216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10d      	bne.n	80041f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	43da      	mvns	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4013      	ands	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	e00c      	b.n	800420e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	429a      	cmp	r2, r3
 8004212:	d0b6      	beq.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422c:	e051      	b.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423c:	d123      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e046      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d021      	beq.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe fa55 	bl	800273c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d116      	bne.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e020      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10c      	bne.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e00b      	b.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d18d      	bne.n	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004328:	e02d      	b.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f8ce 	bl	80044cc <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e02d      	b.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d021      	beq.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe f9fb 	bl	800273c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e007      	b.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d1ca      	bne.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043aa:	e02d      	b.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f88d 	bl	80044cc <I2C_IsAcknowledgeFailed>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02d      	b.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d021      	beq.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fe f9ba 	bl	800273c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d116      	bne.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e007      	b.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d1ca      	bne.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800442c:	e042      	b.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d119      	bne.n	8004470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0210 	mvn.w	r2, #16
 8004444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e029      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fe f964 	bl	800273c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d1b5      	bne.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e2:	d11b      	bne.n	800451c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cc      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90c      	bls.n	8004568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b8      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800458a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004598:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	494d      	ldr	r1, [pc, #308]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d044      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d119      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e067      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4934      	ldr	r1, [pc, #208]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fe f88e 	bl	800273c <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fe f88a 	bl	800273c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e04f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d20c      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e032      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4916      	ldr	r1, [pc, #88]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	490e      	ldr	r1, [pc, #56]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046b2:	f000 f855 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 80046b6:	4602      	mov	r2, r0
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	5ccb      	ldrb	r3, [r1, r3]
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd ffee 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023c00 	.word	0x40023c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800bbb0 	.word	0x0800bbb0
 80046f0:	20000004 	.word	0x20000004
 80046f4:	20000008 	.word	0x20000008

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000004 	.word	0x20000004

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800bbc0 	.word	0x0800bbc0

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffdc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0b5b      	lsrs	r3, r3, #13
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800bbc0 	.word	0x0800bbc0

08004760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004764:	b0ae      	sub	sp, #184	; 0xb8
 8004766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004786:	4bcb      	ldr	r3, [pc, #812]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b0c      	cmp	r3, #12
 8004790:	f200 8206 	bhi.w	8004ba0 <HAL_RCC_GetSysClockFreq+0x440>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	08004ba1 	.word	0x08004ba1
 80047a4:	08004ba1 	.word	0x08004ba1
 80047a8:	08004ba1 	.word	0x08004ba1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	08004ba1 	.word	0x08004ba1
 80047b4:	08004ba1 	.word	0x08004ba1
 80047b8:	08004ba1 	.word	0x08004ba1
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	08004ba1 	.word	0x08004ba1
 80047c4:	08004ba1 	.word	0x08004ba1
 80047c8:	08004ba1 	.word	0x08004ba1
 80047cc:	080049d1 	.word	0x080049d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047d0:	4bb9      	ldr	r3, [pc, #740]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x358>)
 80047d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80047d6:	e1e7      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d8:	4bb8      	ldr	r3, [pc, #736]	; (8004abc <HAL_RCC_GetSysClockFreq+0x35c>)
 80047da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047de:	e1e3      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e0:	4bb4      	ldr	r3, [pc, #720]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ec:	4bb1      	ldr	r3, [pc, #708]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d071      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f8:	4bae      	ldr	r3, [pc, #696]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004804:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800481a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	0159      	lsls	r1, r3, #5
 800482c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004830:	0150      	lsls	r0, r2, #5
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4621      	mov	r1, r4
 8004838:	1a51      	subs	r1, r2, r1
 800483a:	6439      	str	r1, [r7, #64]	; 0x40
 800483c:	4629      	mov	r1, r5
 800483e:	eb63 0301 	sbc.w	r3, r3, r1
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004850:	4649      	mov	r1, r9
 8004852:	018b      	lsls	r3, r1, #6
 8004854:	4641      	mov	r1, r8
 8004856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485a:	4641      	mov	r1, r8
 800485c:	018a      	lsls	r2, r1, #6
 800485e:	4641      	mov	r1, r8
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	63b9      	str	r1, [r7, #56]	; 0x38
 8004864:	4649      	mov	r1, r9
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004878:	4649      	mov	r1, r9
 800487a:	00cb      	lsls	r3, r1, #3
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004882:	4641      	mov	r1, r8
 8004884:	00ca      	lsls	r2, r1, #3
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	4603      	mov	r3, r0
 800488c:	4622      	mov	r2, r4
 800488e:	189b      	adds	r3, r3, r2
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
 8004892:	462b      	mov	r3, r5
 8004894:	460a      	mov	r2, r1
 8004896:	eb42 0303 	adc.w	r3, r2, r3
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048a8:	4629      	mov	r1, r5
 80048aa:	024b      	lsls	r3, r1, #9
 80048ac:	4621      	mov	r1, r4
 80048ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b2:	4621      	mov	r1, r4
 80048b4:	024a      	lsls	r2, r1, #9
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048cc:	f7fc fa4c 	bl	8000d68 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048da:	e067      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048dc:	4b75      	ldr	r3, [pc, #468]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80048ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048f6:	2300      	movs	r3, #0
 80048f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	0159      	lsls	r1, r3, #5
 800490c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004910:	0150      	lsls	r0, r2, #5
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4621      	mov	r1, r4
 8004918:	1a51      	subs	r1, r2, r1
 800491a:	62b9      	str	r1, [r7, #40]	; 0x28
 800491c:	4629      	mov	r1, r5
 800491e:	eb63 0301 	sbc.w	r3, r3, r1
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004930:	4649      	mov	r1, r9
 8004932:	018b      	lsls	r3, r1, #6
 8004934:	4641      	mov	r1, r8
 8004936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800493a:	4641      	mov	r1, r8
 800493c:	018a      	lsls	r2, r1, #6
 800493e:	4641      	mov	r1, r8
 8004940:	ebb2 0a01 	subs.w	sl, r2, r1
 8004944:	4649      	mov	r1, r9
 8004946:	eb63 0b01 	sbc.w	fp, r3, r1
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004956:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800495a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495e:	4692      	mov	sl, r2
 8004960:	469b      	mov	fp, r3
 8004962:	4623      	mov	r3, r4
 8004964:	eb1a 0303 	adds.w	r3, sl, r3
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	462b      	mov	r3, r5
 800496c:	eb4b 0303 	adc.w	r3, fp, r3
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800497e:	4629      	mov	r1, r5
 8004980:	028b      	lsls	r3, r1, #10
 8004982:	4621      	mov	r1, r4
 8004984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004988:	4621      	mov	r1, r4
 800498a:	028a      	lsls	r2, r1, #10
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004994:	2200      	movs	r2, #0
 8004996:	673b      	str	r3, [r7, #112]	; 0x70
 8004998:	677a      	str	r2, [r7, #116]	; 0x74
 800499a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800499e:	f7fc f9e3 	bl	8000d68 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4613      	mov	r3, r2
 80049a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049ce:	e0eb      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d0:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d06b      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e8:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	2200      	movs	r2, #0
 80049f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	663b      	str	r3, [r7, #96]	; 0x60
 80049fc:	2300      	movs	r3, #0
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004a00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a04:	4622      	mov	r2, r4
 8004a06:	462b      	mov	r3, r5
 8004a08:	f04f 0000 	mov.w	r0, #0
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	0159      	lsls	r1, r3, #5
 8004a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a16:	0150      	lsls	r0, r2, #5
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	1a51      	subs	r1, r2, r1
 8004a20:	61b9      	str	r1, [r7, #24]
 8004a22:	4629      	mov	r1, r5
 8004a24:	eb63 0301 	sbc.w	r3, r3, r1
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a36:	4659      	mov	r1, fp
 8004a38:	018b      	lsls	r3, r1, #6
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a40:	4651      	mov	r1, sl
 8004a42:	018a      	lsls	r2, r1, #6
 8004a44:	4651      	mov	r1, sl
 8004a46:	ebb2 0801 	subs.w	r8, r2, r1
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a64:	4690      	mov	r8, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	4623      	mov	r3, r4
 8004a6a:	eb18 0303 	adds.w	r3, r8, r3
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	462b      	mov	r3, r5
 8004a72:	eb49 0303 	adc.w	r3, r9, r3
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a84:	4629      	mov	r1, r5
 8004a86:	024b      	lsls	r3, r1, #9
 8004a88:	4621      	mov	r1, r4
 8004a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a8e:	4621      	mov	r1, r4
 8004a90:	024a      	lsls	r2, r1, #9
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004aa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa4:	f7fc f960 	bl	8000d68 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4613      	mov	r3, r2
 8004aae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab2:	e065      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x420>
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	4611      	mov	r1, r2
 8004acc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ada:	4642      	mov	r2, r8
 8004adc:	464b      	mov	r3, r9
 8004ade:	f04f 0000 	mov.w	r0, #0
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	0159      	lsls	r1, r3, #5
 8004ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aec:	0150      	lsls	r0, r2, #5
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4641      	mov	r1, r8
 8004af4:	1a51      	subs	r1, r2, r1
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	4649      	mov	r1, r9
 8004afa:	eb63 0301 	sbc.w	r3, r3, r1
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	018b      	lsls	r3, r1, #6
 8004b10:	4651      	mov	r1, sl
 8004b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b16:	4651      	mov	r1, sl
 8004b18:	018a      	lsls	r2, r1, #6
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	1a54      	subs	r4, r2, r1
 8004b1e:	4659      	mov	r1, fp
 8004b20:	eb63 0501 	sbc.w	r5, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	00eb      	lsls	r3, r5, #3
 8004b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b32:	00e2      	lsls	r2, r4, #3
 8004b34:	4614      	mov	r4, r2
 8004b36:	461d      	mov	r5, r3
 8004b38:	4643      	mov	r3, r8
 8004b3a:	18e3      	adds	r3, r4, r3
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	464b      	mov	r3, r9
 8004b40:	eb45 0303 	adc.w	r3, r5, r3
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b52:	4629      	mov	r1, r5
 8004b54:	028b      	lsls	r3, r1, #10
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	028a      	lsls	r2, r1, #10
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b68:	2200      	movs	r2, #0
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b72:	f7fc f8f9 	bl	8000d68 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0f1b      	lsrs	r3, r3, #28
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b9e:	e003      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	37b8      	adds	r7, #184	; 0xb8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e28d      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8083 	beq.w	8004ce6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004be0:	4b94      	ldr	r3, [pc, #592]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d019      	beq.n	8004c20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bec:	4b91      	ldr	r3, [pc, #580]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bf8:	4b8e      	ldr	r3, [pc, #568]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c04:	d00c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c06:	4b8b      	ldr	r3, [pc, #556]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d112      	bne.n	8004c38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4b88      	ldr	r3, [pc, #544]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	4b84      	ldr	r3, [pc, #528]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05b      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x124>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d157      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e25a      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0x90>
 8004c42:	4b7c      	ldr	r3, [pc, #496]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7b      	ldr	r2, [pc, #492]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e01d      	b.n	8004c8c <HAL_RCC_OscConfig+0xcc>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0xb4>
 8004c5a:	4b76      	ldr	r3, [pc, #472]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a75      	ldr	r2, [pc, #468]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b73      	ldr	r3, [pc, #460]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a72      	ldr	r2, [pc, #456]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0xcc>
 8004c74:	4b6f      	ldr	r3, [pc, #444]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a6e      	ldr	r2, [pc, #440]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b6c      	ldr	r3, [pc, #432]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6b      	ldr	r2, [pc, #428]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fd52 	bl	800273c <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fd4e 	bl	800273c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	; 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e21f      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0xdc>
 8004cba:	e014      	b.n	8004ce6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fd3e 	bl	800273c <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fd fd3a 	bl	800273c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e20b      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	4b57      	ldr	r3, [pc, #348]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x104>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06f      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cf2:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d017      	beq.n	8004d2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cfe:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d105      	bne.n	8004d16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d11c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d22:	4b44      	ldr	r3, [pc, #272]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d116      	bne.n	8004d5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2e:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCC_OscConfig+0x186>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1d3      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4937      	ldr	r1, [pc, #220]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5a:	e03a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d64:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <HAL_RCC_OscConfig+0x278>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fd fce7 	bl	800273c <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fd fce3 	bl	800273c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1b4      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4925      	ldr	r1, [pc, #148]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	600b      	str	r3, [r1, #0]
 8004da4:	e015      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_RCC_OscConfig+0x278>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd fcc6 	bl	800273c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fd fcc2 	bl	800273c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e193      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d036      	beq.n	8004e4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <HAL_RCC_OscConfig+0x27c>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fd fca6 	bl	800273c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df4:	f7fd fca2 	bl	800273c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e173      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x234>
 8004e12:	e01b      	b.n	8004e4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_OscConfig+0x27c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fc8f 	bl	800273c <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e20:	e00e      	b.n	8004e40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e22:	f7fd fc8b 	bl	800273c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d907      	bls.n	8004e40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e15c      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
 8004e34:	40023800 	.word	0x40023800
 8004e38:	42470000 	.word	0x42470000
 8004e3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e40:	4b8a      	ldr	r3, [pc, #552]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ea      	bne.n	8004e22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8097 	beq.w	8004f88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5e:	4b83      	ldr	r3, [pc, #524]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	4b7f      	ldr	r3, [pc, #508]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a7e      	ldr	r2, [pc, #504]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b7c      	ldr	r3, [pc, #496]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e86:	2301      	movs	r3, #1
 8004e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8a:	4b79      	ldr	r3, [pc, #484]	; (8005070 <HAL_RCC_OscConfig+0x4b0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d118      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e96:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCC_OscConfig+0x4b0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_RCC_OscConfig+0x4b0>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fc4b 	bl	800273c <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fd fc47 	bl	800273c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e118      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x4b0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x31e>
 8004ed0:	4b66      	ldr	r3, [pc, #408]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a65      	ldr	r2, [pc, #404]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
 8004edc:	e01c      	b.n	8004f18 <HAL_RCC_OscConfig+0x358>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x340>
 8004ee6:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a60      	ldr	r2, [pc, #384]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	4b5e      	ldr	r3, [pc, #376]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0x358>
 8004f00:	4b5a      	ldr	r3, [pc, #360]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a59      	ldr	r2, [pc, #356]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0c:	4b57      	ldr	r3, [pc, #348]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	4a56      	ldr	r2, [pc, #344]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	f023 0304 	bic.w	r3, r3, #4
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fd fc0c 	bl	800273c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fd fc08 	bl	800273c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0d7      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ee      	beq.n	8004f28 <HAL_RCC_OscConfig+0x368>
 8004f4a:	e014      	b.n	8004f76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fd fbf6 	bl	800273c <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fd fbf2 	bl	800273c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0c1      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6a:	4b40      	ldr	r3, [pc, #256]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ee      	bne.n	8004f54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	4a3a      	ldr	r2, [pc, #232]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80ad 	beq.w	80050ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d060      	beq.n	8005060 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d145      	bne.n	8005032 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa6:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x4b4>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fbc6 	bl	800273c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fd fbc2 	bl	800273c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e093      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	3b01      	subs	r3, #1
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x4b4>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd fb97 	bl	800273c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005012:	f7fd fb93 	bl	800273c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e064      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x452>
 8005030:	e05c      	b.n	80050ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x4b4>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fd fb80 	bl	800273c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fd fb7c 	bl	800273c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e04d      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_OscConfig+0x4ac>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x480>
 800505e:	e045      	b.n	80050ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e040      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
 800506c:	40023800 	.word	0x40023800
 8005070:	40007000 	.word	0x40007000
 8005074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005078:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <HAL_RCC_OscConfig+0x538>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d030      	beq.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d129      	bne.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d122      	bne.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d119      	bne.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	3b01      	subs	r3, #1
 80050c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d10f      	bne.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e03f      	b.n	800518e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd f8fa 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	; 0x24
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f929 	bl	8005398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b08a      	sub	sp, #40	; 0x28
 800519a:	af02      	add	r7, sp, #8
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d17c      	bne.n	80052b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_Transmit+0x2c>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e075      	b.n	80052b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UART_Transmit+0x3e>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e06e      	b.n	80052b2 <HAL_UART_Transmit+0x11c>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2221      	movs	r2, #33	; 0x21
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ea:	f7fd faa7 	bl	800273c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d108      	bne.n	8005218 <HAL_UART_Transmit+0x82>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	e003      	b.n	8005220 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005228:	e02a      	b.n	8005280 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f840 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e036      	b.n	80052b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005258:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	3302      	adds	r3, #2
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	e007      	b.n	8005272 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1cf      	bne.n	800522a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2140      	movs	r1, #64	; 0x40
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f810 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e006      	b.n	80052b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b090      	sub	sp, #64	; 0x40
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	e050      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d04c      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <UART_WaitOnFlagUntilTimeout+0x30>
 80052da:	f7fd fa2f 	bl	800273c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d241      	bcs.n	800536e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800530a:	637a      	str	r2, [r7, #52]	; 0x34
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	63bb      	str	r3, [r7, #56]	; 0x38
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800533e:	623a      	str	r2, [r7, #32]
 8005340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61bb      	str	r3, [r7, #24]
   return(result);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e00f      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	429a      	cmp	r2, r3
 800538a:	d09f      	beq.n	80052cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3740      	adds	r7, #64	; 0x40
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b0c0      	sub	sp, #256	; 0x100
 800539e:	af00      	add	r7, sp, #0
 80053a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	ea40 0301 	orr.w	r3, r0, r1
 80053c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053f0:	f021 010c 	bic.w	r1, r1, #12
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053fe:	430b      	orrs	r3, r1
 8005400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005412:	6999      	ldr	r1, [r3, #24]
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	ea40 0301 	orr.w	r3, r0, r1
 800541e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8f      	ldr	r3, [pc, #572]	; (8005664 <UART_SetConfig+0x2cc>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d005      	beq.n	8005438 <UART_SetConfig+0xa0>
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8d      	ldr	r3, [pc, #564]	; (8005668 <UART_SetConfig+0x2d0>)
 8005434:	429a      	cmp	r2, r3
 8005436:	d104      	bne.n	8005442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7ff f97e 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 800543c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005440:	e003      	b.n	800544a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005442:	f7ff f965 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8005446:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005454:	f040 810c 	bne.w	8005670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005462:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	1891      	adds	r1, r2, r2
 8005470:	65b9      	str	r1, [r7, #88]	; 0x58
 8005472:	415b      	adcs	r3, r3
 8005474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800547a:	4621      	mov	r1, r4
 800547c:	eb12 0801 	adds.w	r8, r2, r1
 8005480:	4629      	mov	r1, r5
 8005482:	eb43 0901 	adc.w	r9, r3, r1
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549a:	4690      	mov	r8, r2
 800549c:	4699      	mov	r9, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	eb18 0303 	adds.w	r3, r8, r3
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054a8:	462b      	mov	r3, r5
 80054aa:	eb49 0303 	adc.w	r3, r9, r3
 80054ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054c6:	460b      	mov	r3, r1
 80054c8:	18db      	adds	r3, r3, r3
 80054ca:	653b      	str	r3, [r7, #80]	; 0x50
 80054cc:	4613      	mov	r3, r2
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	657b      	str	r3, [r7, #84]	; 0x54
 80054d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054dc:	f7fb fc44 	bl	8000d68 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4b61      	ldr	r3, [pc, #388]	; (800566c <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	011c      	lsls	r4, r3, #4
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	64b9      	str	r1, [r7, #72]	; 0x48
 8005508:	415b      	adcs	r3, r3
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005510:	4641      	mov	r1, r8
 8005512:	eb12 0a01 	adds.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb43 0b01 	adc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800552c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005530:	4692      	mov	sl, r2
 8005532:	469b      	mov	fp, r3
 8005534:	4643      	mov	r3, r8
 8005536:	eb1a 0303 	adds.w	r3, sl, r3
 800553a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800553e:	464b      	mov	r3, r9
 8005540:	eb4b 0303 	adc.w	r3, fp, r3
 8005544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005554:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	643b      	str	r3, [r7, #64]	; 0x40
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800556e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005572:	f7fb fbf9 	bl	8000d68 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b3b      	ldr	r3, [pc, #236]	; (800566c <UART_SetConfig+0x2d4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	; 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005592:	4b36      	ldr	r3, [pc, #216]	; (800566c <UART_SetConfig+0x2d4>)
 8005594:	fba3 2302 	umull	r2, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a0:	441c      	add	r4, r3
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80055bc:	415b      	adcs	r3, r3
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6339      	str	r1, [r7, #48]	; 0x30
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005610:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800562a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800562e:	f7fb fb9b 	bl	8000d68 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <UART_SetConfig+0x2d4>)
 8005638:	fba3 1302 	umull	r1, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	2164      	movs	r1, #100	; 0x64
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	3332      	adds	r3, #50	; 0x32
 800564a:	4a08      	ldr	r2, [pc, #32]	; (800566c <UART_SetConfig+0x2d4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0207 	and.w	r2, r3, #7
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4422      	add	r2, r4
 800565e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005660:	e105      	b.n	800586e <UART_SetConfig+0x4d6>
 8005662:	bf00      	nop
 8005664:	40011000 	.word	0x40011000
 8005668:	40011400 	.word	0x40011400
 800566c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800567a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800567e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	6239      	str	r1, [r7, #32]
 800568a:	415b      	adcs	r3, r3
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005692:	4641      	mov	r1, r8
 8005694:	1854      	adds	r4, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0501 	adc.w	r5, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	00eb      	lsls	r3, r5, #3
 80056a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056aa:	00e2      	lsls	r2, r4, #3
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	18e3      	adds	r3, r4, r3
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056b8:	464b      	mov	r3, r9
 80056ba:	eb45 0303 	adc.w	r3, r5, r3
 80056be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056de:	4629      	mov	r1, r5
 80056e0:	008b      	lsls	r3, r1, #2
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e8:	4621      	mov	r1, r4
 80056ea:	008a      	lsls	r2, r1, #2
 80056ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056f0:	f7fb fb3a 	bl	8000d68 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b60      	ldr	r3, [pc, #384]	; (800587c <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800570c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	61b9      	str	r1, [r7, #24]
 800571c:	415b      	adcs	r3, r3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005724:	4641      	mov	r1, r8
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6139      	str	r1, [r7, #16]
 800572a:	4649      	mov	r1, r9
 800572c:	414b      	adcs	r3, r1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800573c:	4659      	mov	r1, fp
 800573e:	00cb      	lsls	r3, r1, #3
 8005740:	4651      	mov	r1, sl
 8005742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005746:	4651      	mov	r1, sl
 8005748:	00ca      	lsls	r2, r1, #3
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	4603      	mov	r3, r0
 8005750:	4642      	mov	r2, r8
 8005752:	189b      	adds	r3, r3, r2
 8005754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005758:	464b      	mov	r3, r9
 800575a:	460a      	mov	r2, r1
 800575c:	eb42 0303 	adc.w	r3, r2, r3
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	67bb      	str	r3, [r7, #120]	; 0x78
 800576e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800577c:	4649      	mov	r1, r9
 800577e:	008b      	lsls	r3, r1, #2
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005786:	4641      	mov	r1, r8
 8005788:	008a      	lsls	r2, r1, #2
 800578a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800578e:	f7fb faeb 	bl	8000d68 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <UART_SetConfig+0x4e4>)
 8005798:	fba3 1302 	umull	r1, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	2164      	movs	r1, #100	; 0x64
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	3332      	adds	r3, #50	; 0x32
 80057aa:	4a34      	ldr	r2, [pc, #208]	; (800587c <UART_SetConfig+0x4e4>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b6:	441c      	add	r4, r3
 80057b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057bc:	2200      	movs	r2, #0
 80057be:	673b      	str	r3, [r7, #112]	; 0x70
 80057c0:	677a      	str	r2, [r7, #116]	; 0x74
 80057c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	415b      	adcs	r3, r3
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d6:	4641      	mov	r1, r8
 80057d8:	1851      	adds	r1, r2, r1
 80057da:	6039      	str	r1, [r7, #0]
 80057dc:	4649      	mov	r1, r9
 80057de:	414b      	adcs	r3, r1
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057ee:	4659      	mov	r1, fp
 80057f0:	00cb      	lsls	r3, r1, #3
 80057f2:	4651      	mov	r1, sl
 80057f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f8:	4651      	mov	r1, sl
 80057fa:	00ca      	lsls	r2, r1, #3
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	4603      	mov	r3, r0
 8005802:	4642      	mov	r2, r8
 8005804:	189b      	adds	r3, r3, r2
 8005806:	66bb      	str	r3, [r7, #104]	; 0x68
 8005808:	464b      	mov	r3, r9
 800580a:	460a      	mov	r2, r1
 800580c:	eb42 0303 	adc.w	r3, r2, r3
 8005810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	663b      	str	r3, [r7, #96]	; 0x60
 800581c:	667a      	str	r2, [r7, #100]	; 0x64
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800582a:	4649      	mov	r1, r9
 800582c:	008b      	lsls	r3, r1, #2
 800582e:	4641      	mov	r1, r8
 8005830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005834:	4641      	mov	r1, r8
 8005836:	008a      	lsls	r2, r1, #2
 8005838:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800583c:	f7fb fa94 	bl	8000d68 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <UART_SetConfig+0x4e4>)
 8005846:	fba3 1302 	umull	r1, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2164      	movs	r1, #100	; 0x64
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	3332      	adds	r3, #50	; 0x32
 8005858:	4a08      	ldr	r2, [pc, #32]	; (800587c <UART_SetConfig+0x4e4>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	f003 020f 	and.w	r2, r3, #15
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4422      	add	r2, r4
 800586c:	609a      	str	r2, [r3, #8]
}
 800586e:	bf00      	nop
 8005870:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587a:	bf00      	nop
 800587c:	51eb851f 	.word	0x51eb851f

08005880 <MPU9250_Init>:
static int16_t GyroRW[3];

//Function Definitions

//1- i2c Handler
void MPU9250_Init(I2C_HandleTypeDef *I2Chnd) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler1, I2Chnd, sizeof(*I2Chnd));
 8005888:	2254      	movs	r2, #84	; 0x54
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4803      	ldr	r0, [pc, #12]	; (800589c <MPU9250_Init+0x1c>)
 800588e:	f000 fb55 	bl	8005f3c <memcpy>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200003b0 	.word	0x200003b0

080058a0 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	4603      	mov	r3, r0
 80058a8:	6039      	str	r1, [r7, #0]
 80058aa:	71fb      	strb	r3, [r7, #7]
 80058ac:	4613      	mov	r3, r2
 80058ae:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR << 1);
 80058b0:	23d0      	movs	r3, #208	; 0xd0
 80058b2:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler1, MPUADDR, i2cBuf, 1, 10);
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	b299      	uxth	r1, r3
 80058bc:	f107 020c 	add.w	r2, r7, #12
 80058c0:	230a      	movs	r3, #10
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2301      	movs	r3, #1
 80058c6:	4808      	ldr	r0, [pc, #32]	; (80058e8 <I2C_Read+0x48>)
 80058c8:	f7fd fb40 	bl	8002f4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler1, MPUADDR, i2cBif, NofData, 100);
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	b299      	uxth	r1, r3
 80058d0:	79bb      	ldrb	r3, [r7, #6]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2264      	movs	r2, #100	; 0x64
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	4803      	ldr	r0, [pc, #12]	; (80058e8 <I2C_Read+0x48>)
 80058dc:	f7fd fc34 	bl	8003148 <HAL_I2C_Master_Receive>
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200003b0 	.word	0x200003b0

080058ec <I2C_Write8>:
 *
 *  ret val			- NONE
 *
 *  NOTE			- None
 */
void I2C_Write8(uint8_t ADDR, uint8_t data) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	4603      	mov	r3, r0
 80058f4:	460a      	mov	r2, r1
 80058f6:	71fb      	strb	r3, [r7, #7]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8005900:	79bb      	ldrb	r3, [r7, #6]
 8005902:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR << 1);
 8005904:	23d0      	movs	r3, #208	; 0xd0
 8005906:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler1, MPUADDR, i2cData, 2, 100);
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	b299      	uxth	r1, r3
 800590c:	f107 020c 	add.w	r2, r7, #12
 8005910:	2364      	movs	r3, #100	; 0x64
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2302      	movs	r3, #2
 8005916:	4803      	ldr	r0, [pc, #12]	; (8005924 <I2C_Write8+0x38>)
 8005918:	f7fd fb18 	bl	8002f4c <HAL_I2C_Master_Transmit>
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	200003b0 	.word	0x200003b0

08005928 <MPU9250_Config>:
 *
 *  ret val			- NONE
 *
 *  NOTE			- None
 */
void MPU9250_Config(MPU_ConfigTypeDef *config) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8005934:	2180      	movs	r1, #128	; 0x80
 8005936:	206b      	movs	r0, #107	; 0x6b
 8005938:	f7ff ffd8 	bl	80058ec <I2C_Write8>
	HAL_Delay(100);
 800593c:	2064      	movs	r0, #100	; 0x64
 800593e:	f7fc ff09 	bl	8002754 <HAL_Delay>
	Buffer = config->ClockSource & 0x07; //change the 7th bits of register
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config->Sleep_Mode_Bit << 6) & 0x40; // change only the 7th bit in the register
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	791b      	ldrb	r3, [r3, #4]
 8005950:	019b      	lsls	r3, r3, #6
 8005952:	b25b      	sxtb	r3, r3
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	b25a      	sxtb	r2, r3
 800595a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800595e:	4313      	orrs	r3, r2
 8005960:	b25b      	sxtb	r3, r3
 8005962:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	4619      	mov	r1, r3
 8005968:	206b      	movs	r0, #107	; 0x6b
 800596a:	f7ff ffbf 	bl	80058ec <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changing the clock setting.
 800596e:	2064      	movs	r0, #100	; 0x64
 8005970:	f7fc fef0 	bl	8002754 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	78db      	ldrb	r3, [r3, #3]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	4619      	mov	r1, r3
 8005986:	201a      	movs	r0, #26
 8005988:	f7ff ffb0 	bl	80058ec <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0318 	and.w	r3, r3, #24
 800599c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4619      	mov	r1, r3
 80059a2:	201b      	movs	r0, #27
 80059a4:	f7ff ffa2 	bl	80058ec <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	789b      	ldrb	r3, [r3, #2]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 0318 	and.w	r3, r3, #24
 80059b8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	4619      	mov	r1, r3
 80059be:	201c      	movs	r0, #28
 80059c0:	f7ff ff94 	bl	80058ec <I2C_Write8>

	//Set SRD To Default
	MPU9250_Set_SMPRT_DIV(0x04);
 80059c4:	2004      	movs	r0, #4
 80059c6:	f000 f857 	bl	8005a78 <MPU9250_Set_SMPRT_DIV>

	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	789b      	ldrb	r3, [r3, #2]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d81a      	bhi.n	8005a08 <MPU9250_Config+0xe0>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <MPU9250_Config+0xb0>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	080059f1 	.word	0x080059f1
 80059e0:	080059f9 	.word	0x080059f9
 80059e4:	08005a01 	.word	0x08005a01
	case AFS_SEL_2g:
		accelScalingFactor1 = (2000.0f / 32768.0f);
 80059e8:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <MPU9250_Config+0x12c>)
 80059ea:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <MPU9250_Config+0x130>)
 80059ec:	601a      	str	r2, [r3, #0]
		break;
 80059ee:	e00c      	b.n	8005a0a <MPU9250_Config+0xe2>

	case AFS_SEL_4g:
		accelScalingFactor1 = (4000.0f / 32768.0f);
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <MPU9250_Config+0x12c>)
 80059f2:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <MPU9250_Config+0x134>)
 80059f4:	601a      	str	r2, [r3, #0]
		break;
 80059f6:	e008      	b.n	8005a0a <MPU9250_Config+0xe2>

	case AFS_SEL_8g:
		accelScalingFactor1 = (8000.0f / 32768.0f);
 80059f8:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <MPU9250_Config+0x12c>)
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <MPU9250_Config+0x138>)
 80059fc:	601a      	str	r2, [r3, #0]
		break;
 80059fe:	e004      	b.n	8005a0a <MPU9250_Config+0xe2>

	case AFS_SEL_16g:
		accelScalingFactor1 = (16000.0f / 32768.0f);
 8005a00:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <MPU9250_Config+0x12c>)
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <MPU9250_Config+0x13c>)
 8005a04:	601a      	str	r2, [r3, #0]
		break;
 8005a06:	e000      	b.n	8005a0a <MPU9250_Config+0xe2>

	default:
		break;
 8005a08:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d81a      	bhi.n	8005a48 <MPU9250_Config+0x120>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <MPU9250_Config+0xf0>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a31 	.word	0x08005a31
 8005a20:	08005a39 	.word	0x08005a39
 8005a24:	08005a41 	.word	0x08005a41
	case FS_SEL_250:
		gyroScalingFactor1 = 250.0f / 32768.0f;
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <MPU9250_Config+0x140>)
 8005a2a:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <MPU9250_Config+0x144>)
 8005a2c:	601a      	str	r2, [r3, #0]
		break;
 8005a2e:	e00c      	b.n	8005a4a <MPU9250_Config+0x122>

	case FS_SEL_500:
		gyroScalingFactor1 = 500.0f / 32768.0f;
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <MPU9250_Config+0x140>)
 8005a32:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <MPU9250_Config+0x148>)
 8005a34:	601a      	str	r2, [r3, #0]
		break;
 8005a36:	e008      	b.n	8005a4a <MPU9250_Config+0x122>

	case FS_SEL_1000:
		gyroScalingFactor1 = 1000.0f / 32768.0f;
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <MPU9250_Config+0x140>)
 8005a3a:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <MPU9250_Config+0x14c>)
 8005a3c:	601a      	str	r2, [r3, #0]
		break;
 8005a3e:	e004      	b.n	8005a4a <MPU9250_Config+0x122>

	case FS_SEL_2000:
		gyroScalingFactor1 = 2000.0f / 32768.0f;
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <MPU9250_Config+0x140>)
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <MPU9250_Config+0x130>)
 8005a44:	601a      	str	r2, [r3, #0]
		break;
 8005a46:	e000      	b.n	8005a4a <MPU9250_Config+0x122>

	default:
		break;
 8005a48:	bf00      	nop
	}

}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000404 	.word	0x20000404
 8005a58:	3d7a0000 	.word	0x3d7a0000
 8005a5c:	3dfa0000 	.word	0x3dfa0000
 8005a60:	3e7a0000 	.word	0x3e7a0000
 8005a64:	3efa0000 	.word	0x3efa0000
 8005a68:	20000408 	.word	0x20000408
 8005a6c:	3bfa0000 	.word	0x3bfa0000
 8005a70:	3c7a0000 	.word	0x3c7a0000
 8005a74:	3cfa0000 	.word	0x3cfa0000

08005a78 <MPU9250_Set_SMPRT_DIV>:
 *
 *  ret val			- NULL
 *
 *  NOTE			- None
 */
void MPU9250_Set_SMPRT_DIV(uint8_t SMPRTvalue) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	4619      	mov	r1, r3
 8005a86:	2019      	movs	r0, #25
 8005a88:	f7ff ff30 	bl	80058ec <I2C_Write8>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <MPU9250_Get_Accel_RawData>:
 *
 *  ret val			- None
 *
 *  NOTE			- NULL
 */
void MPU9250_Get_Accel_RawData(RawData_Def *rawDef) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1], 1);
 8005a9c:	f107 031c 	add.w	r3, r7, #28
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	203a      	movs	r0, #58	; 0x3a
 8005aa8:	f7ff fefa 	bl	80058a0 <I2C_Read>
	if ((i2cBuf[1] && 0x01)) {
 8005aac:	7f7b      	ldrb	r3, [r7, #29]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04f      	beq.n	8005b52 <MPU9250_Get_Accel_RawData+0xbe>
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr, 6);
 8005ab2:	f107 0314 	add.w	r3, r7, #20
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	4619      	mov	r1, r3
 8005aba:	203b      	movs	r0, #59	; 0x3b
 8005abc:	f7ff fef0 	bl	80058a0 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0] << 8) + AcceArr[1]); // x-Axis
 8005ac0:	7d3b      	ldrb	r3, [r7, #20]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	7d7b      	ldrb	r3, [r7, #21]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2] << 8) + AcceArr[3]); // y-Axis
 8005ad6:	7dbb      	ldrb	r3, [r7, #22]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b21a      	sxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4] << 8) + AcceArr[5]); // z-Axis
 8005aec:	7e3b      	ldrb	r3, [r7, #24]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	7e7b      	ldrb	r3, [r7, #25]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	b21a      	sxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr, 6);
 8005b02:	f107 030c 	add.w	r3, r7, #12
 8005b06:	2206      	movs	r2, #6
 8005b08:	4619      	mov	r1, r3
 8005b0a:	2043      	movs	r0, #67	; 0x43
 8005b0c:	f7ff fec8 	bl	80058a0 <I2C_Read>
		GyroRW[0] = ((GyroArr[0] << 8) + GyroArr[1]);
 8005b10:	7b3b      	ldrb	r3, [r7, #12]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	7b7b      	ldrb	r3, [r7, #13]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	b21a      	sxth	r2, r3
 8005b22:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <MPU9250_Get_Accel_RawData+0xc8>)
 8005b24:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2] << 8) + GyroArr[3];
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <MPU9250_Get_Accel_RawData+0xc8>)
 8005b3a:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4] << 8) + GyroArr[5]);
 8005b3c:	7c3b      	ldrb	r3, [r7, #16]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	7c7b      	ldrb	r3, [r7, #17]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4413      	add	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	b21a      	sxth	r2, r3
 8005b4e:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <MPU9250_Get_Accel_RawData+0xc8>)
 8005b50:	809a      	strh	r2, [r3, #4]

	}
}
 8005b52:	bf00      	nop
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000430 	.word	0x20000430

08005b60 <MPU9250_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU9250_Get_Accel_Scale(ScaledData_Def *scaledDef) {
 8005b60:	b5b0      	push	{r4, r5, r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU9250_Get_Accel_RawData(&AccelRData);
 8005b68:	f107 0308 	add.w	r3, r7, #8
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff91 	bl	8005a94 <MPU9250_Get_Accel_RawData>

	//Accel Scale data
	accelx = scaledDef->x = ((AccelRData.x + 0.0f) * accelScalingFactor1);
 8005b72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b7e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8005d98 <MPU9250_Get_Accel_Scale+0x238>
 8005b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b86:	4b85      	ldr	r3, [pc, #532]	; (8005d9c <MPU9250_Get_Accel_Scale+0x23c>)
 8005b88:	edd3 7a00 	vldr	s15, [r3]
 8005b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	edc3 7a00 	vstr	s15, [r3]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a81      	ldr	r2, [pc, #516]	; (8005da0 <MPU9250_Get_Accel_Scale+0x240>)
 8005b9c:	6013      	str	r3, [r2, #0]
	accely = scaledDef->y = ((AccelRData.y + 0.0f) * accelScalingFactor1);
 8005b9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005baa:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8005d98 <MPU9250_Get_Accel_Scale+0x238>
 8005bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	; (8005d9c <MPU9250_Get_Accel_Scale+0x23c>)
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	edc3 7a01 	vstr	s15, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4a77      	ldr	r2, [pc, #476]	; (8005da4 <MPU9250_Get_Accel_Scale+0x244>)
 8005bc8:	6013      	str	r3, [r2, #0]
	accelz = scaledDef->z = ((AccelRData.z + 0.0f) * accelScalingFactor1);
 8005bca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8005d98 <MPU9250_Get_Accel_Scale+0x238>
 8005bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bde:	4b6f      	ldr	r3, [pc, #444]	; (8005d9c <MPU9250_Get_Accel_Scale+0x23c>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	edc3 7a02 	vstr	s15, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	4a6d      	ldr	r2, [pc, #436]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005bf4:	6013      	str	r3, [r2, #0]
	AccelRoll = (atan2(accely, accelz) * 180.0) / PI;
 8005bf6:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <MPU9250_Get_Accel_Scale+0x244>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa fcc4 	bl	8000588 <__aeabi_f2d>
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	4b68      	ldr	r3, [pc, #416]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fa fcbd 	bl	8000588 <__aeabi_f2d>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	ec43 2b11 	vmov	d1, r2, r3
 8005c16:	ec45 4b10 	vmov	d0, r4, r5
 8005c1a:	f004 ffae 	bl	800ab7a <atan2>
 8005c1e:	ec51 0b10 	vmov	r0, r1, d0
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <MPU9250_Get_Accel_Scale+0x24c>)
 8005c28:	f7fa fd06 	bl	8000638 <__aeabi_dmul>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	a356      	add	r3, pc, #344	; (adr r3, 8005d90 <MPU9250_Get_Accel_Scale+0x230>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fe27 	bl	800088c <__aeabi_ddiv>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4610      	mov	r0, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	f7fa ffef 	bl	8000c28 <__aeabi_d2f>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4a58      	ldr	r2, [pc, #352]	; (8005db0 <MPU9250_Get_Accel_Scale+0x250>)
 8005c4e:	6013      	str	r3, [r2, #0]
	AccelPitch = (atan2(-accelx, sqrt(accely * accely + accelz * accelz)) * 180.0) / PI;
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <MPU9250_Get_Accel_Scale+0x240>)
 8005c52:	edd3 7a00 	vldr	s15, [r3]
 8005c56:	eef1 7a67 	vneg.f32	s15, s15
 8005c5a:	ee17 3a90 	vmov	r3, s15
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fc92 	bl	8000588 <__aeabi_f2d>
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <MPU9250_Get_Accel_Scale+0x244>)
 8005c6a:	ed93 7a00 	vldr	s14, [r3]
 8005c6e:	4b4d      	ldr	r3, [pc, #308]	; (8005da4 <MPU9250_Get_Accel_Scale+0x244>)
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c78:	4b4b      	ldr	r3, [pc, #300]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005c7a:	edd3 6a00 	vldr	s13, [r3]
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005c80:	edd3 7a00 	vldr	s15, [r3]
 8005c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c8c:	ee17 0a90 	vmov	r0, s15
 8005c90:	f7fa fc7a 	bl	8000588 <__aeabi_f2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	ec43 2b10 	vmov	d0, r2, r3
 8005c9c:	f004 ffe0 	bl	800ac60 <sqrt>
 8005ca0:	eeb0 7a40 	vmov.f32	s14, s0
 8005ca4:	eef0 7a60 	vmov.f32	s15, s1
 8005ca8:	eeb0 1a47 	vmov.f32	s2, s14
 8005cac:	eef0 1a67 	vmov.f32	s3, s15
 8005cb0:	ec45 4b10 	vmov	d0, r4, r5
 8005cb4:	f004 ff61 	bl	800ab7a <atan2>
 8005cb8:	ec51 0b10 	vmov	r0, r1, d0
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <MPU9250_Get_Accel_Scale+0x24c>)
 8005cc2:	f7fa fcb9 	bl	8000638 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	a330      	add	r3, pc, #192	; (adr r3, 8005d90 <MPU9250_Get_Accel_Scale+0x230>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fdda 	bl	800088c <__aeabi_ddiv>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f7fa ffa2 	bl	8000c28 <__aeabi_d2f>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <MPU9250_Get_Accel_Scale+0x254>)
 8005ce8:	6013      	str	r3, [r2, #0]
	AccelYaw = 180 * atan(accelz / sqrt(accelx * accelx + accelz * accelz)) / PI;
 8005cea:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa fc4a 	bl	8000588 <__aeabi_f2d>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <MPU9250_Get_Accel_Scale+0x240>)
 8005cfa:	ed93 7a00 	vldr	s14, [r3]
 8005cfe:	4b28      	ldr	r3, [pc, #160]	; (8005da0 <MPU9250_Get_Accel_Scale+0x240>)
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005d0a:	edd3 6a00 	vldr	s13, [r3]
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <MPU9250_Get_Accel_Scale+0x248>)
 8005d10:	edd3 7a00 	vldr	s15, [r3]
 8005d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1c:	ee17 0a90 	vmov	r0, s15
 8005d20:	f7fa fc32 	bl	8000588 <__aeabi_f2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	ec43 2b10 	vmov	d0, r2, r3
 8005d2c:	f004 ff98 	bl	800ac60 <sqrt>
 8005d30:	ec53 2b10 	vmov	r2, r3, d0
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fda8 	bl	800088c <__aeabi_ddiv>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	ec43 2b17 	vmov	d7, r2, r3
 8005d44:	eeb0 0a47 	vmov.f32	s0, s14
 8005d48:	eef0 0a67 	vmov.f32	s1, s15
 8005d4c:	f004 fd6c 	bl	800a828 <atan>
 8005d50:	ec51 0b10 	vmov	r0, r1, d0
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <MPU9250_Get_Accel_Scale+0x24c>)
 8005d5a:	f7fa fc6d 	bl	8000638 <__aeabi_dmul>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4610      	mov	r0, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	a30a      	add	r3, pc, #40	; (adr r3, 8005d90 <MPU9250_Get_Accel_Scale+0x230>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fd8e 	bl	800088c <__aeabi_ddiv>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	f7fa ff56 	bl	8000c28 <__aeabi_d2f>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <MPU9250_Get_Accel_Scale+0x258>)
 8005d80:	6013      	str	r3, [r2, #0]

}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w
 8005d90:	82c2bd7f 	.word	0x82c2bd7f
 8005d94:	400921fb 	.word	0x400921fb
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	20000404 	.word	0x20000404
 8005da0:	2000040c 	.word	0x2000040c
 8005da4:	20000410 	.word	0x20000410
 8005da8:	20000414 	.word	0x20000414
 8005dac:	40668000 	.word	0x40668000
 8005db0:	20000424 	.word	0x20000424
 8005db4:	20000428 	.word	0x20000428
 8005db8:	2000042c 	.word	0x2000042c

08005dbc <MPU9250_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias; // y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias; // z-Axis

}
//12- Get Gyro Raw Data
void MPU9250_Get_Gyro_RawData(RawData_Def *rawDef) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <MPU9250_Get_Gyro_RawData+0x34>)
 8005dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <MPU9250_Get_Gyro_RawData+0x34>)
 8005dd0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <MPU9250_Get_Gyro_RawData+0x34>)
 8005dda:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	809a      	strh	r2, [r3, #4]

}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000430 	.word	0x20000430

08005df4 <MPU9250_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU9250_Get_Gyro_Scale(ScaledData_Def *scaledDef) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU9250_Get_Gyro_RawData(&myGyroRaw);
 8005dfc:	f107 0308 	add.w	r3, r7, #8
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ffdb 	bl	8005dbc <MPU9250_Get_Gyro_RawData>

	//Gyro Scale data
	gyrox = scaledDef->x = (myGyroRaw.x) * gyroScalingFactor1; // x-Axis
 8005e06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e12:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <MPU9250_Get_Gyro_Scale+0x88>)
 8005e14:	edd3 7a00 	vldr	s15, [r3]
 8005e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	edc3 7a00 	vstr	s15, [r3]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <MPU9250_Get_Gyro_Scale+0x8c>)
 8005e28:	6013      	str	r3, [r2, #0]
	gyroy = scaledDef->y = (myGyroRaw.y) * gyroScalingFactor1; // y-Axis
 8005e2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <MPU9250_Get_Gyro_Scale+0x88>)
 8005e38:	edd3 7a00 	vldr	s15, [r3]
 8005e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	edc3 7a01 	vstr	s15, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4a0e      	ldr	r2, [pc, #56]	; (8005e84 <MPU9250_Get_Gyro_Scale+0x90>)
 8005e4c:	6013      	str	r3, [r2, #0]
	gyroz = scaledDef->z = (myGyroRaw.z) * gyroScalingFactor1; // z-Axis
 8005e4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <MPU9250_Get_Gyro_Scale+0x88>)
 8005e5c:	edd3 7a00 	vldr	s15, [r3]
 8005e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	edc3 7a02 	vstr	s15, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <MPU9250_Get_Gyro_Scale+0x94>)
 8005e70:	6013      	str	r3, [r2, #0]

}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000408 	.word	0x20000408
 8005e80:	20000418 	.word	0x20000418
 8005e84:	2000041c 	.word	0x2000041c
 8005e88:	20000420 	.word	0x20000420

08005e8c <Get_Packaged_Data>:





void Get_Packaged_Data(Packaged_Def *packageDef){
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]


		packageDef->Yukseklik = Altitude;
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <Get_Packaged_Data+0x44>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
		packageDef->Sicaklik = Temperature;
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <Get_Packaged_Data+0x48>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]
		packageDef->Basinc = Pressure;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <Get_Packaged_Data+0x4c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	609a      	str	r2, [r3, #8]
		packageDef->Nem = Humidity;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <Get_Packaged_Data+0x50>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
		packageDef->X_Eksen_Aci = AccelRoll;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <Get_Packaged_Data+0x54>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	611a      	str	r2, [r3, #16]
		packageDef->Y_Eksen_Aci = AccelPitch;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <Get_Packaged_Data+0x58>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	615a      	str	r2, [r3, #20]





}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000374 	.word	0x20000374
 8005ed4:	20000368 	.word	0x20000368
 8005ed8:	2000036c 	.word	0x2000036c
 8005edc:	20000370 	.word	0x20000370
 8005ee0:	20000424 	.word	0x20000424
 8005ee4:	20000428 	.word	0x20000428

08005ee8 <__errno>:
 8005ee8:	4b01      	ldr	r3, [pc, #4]	; (8005ef0 <__errno+0x8>)
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000010 	.word	0x20000010

08005ef4 <__libc_init_array>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4d0d      	ldr	r5, [pc, #52]	; (8005f2c <__libc_init_array+0x38>)
 8005ef8:	4c0d      	ldr	r4, [pc, #52]	; (8005f30 <__libc_init_array+0x3c>)
 8005efa:	1b64      	subs	r4, r4, r5
 8005efc:	10a4      	asrs	r4, r4, #2
 8005efe:	2600      	movs	r6, #0
 8005f00:	42a6      	cmp	r6, r4
 8005f02:	d109      	bne.n	8005f18 <__libc_init_array+0x24>
 8005f04:	4d0b      	ldr	r5, [pc, #44]	; (8005f34 <__libc_init_array+0x40>)
 8005f06:	4c0c      	ldr	r4, [pc, #48]	; (8005f38 <__libc_init_array+0x44>)
 8005f08:	f005 fe44 	bl	800bb94 <_init>
 8005f0c:	1b64      	subs	r4, r4, r5
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	2600      	movs	r6, #0
 8005f12:	42a6      	cmp	r6, r4
 8005f14:	d105      	bne.n	8005f22 <__libc_init_array+0x2e>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1c:	4798      	blx	r3
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7ee      	b.n	8005f00 <__libc_init_array+0xc>
 8005f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f26:	4798      	blx	r3
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7f2      	b.n	8005f12 <__libc_init_array+0x1e>
 8005f2c:	0800c118 	.word	0x0800c118
 8005f30:	0800c118 	.word	0x0800c118
 8005f34:	0800c118 	.word	0x0800c118
 8005f38:	0800c11c 	.word	0x0800c11c

08005f3c <memcpy>:
 8005f3c:	440a      	add	r2, r1
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	4770      	bx	lr
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f52:	4291      	cmp	r1, r2
 8005f54:	d1f9      	bne.n	8005f4a <memcpy+0xe>
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <__cvt>:
 8005f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	ec55 4b10 	vmov	r4, r5, d0
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	460e      	mov	r6, r1
 8005f74:	4619      	mov	r1, r3
 8005f76:	462b      	mov	r3, r5
 8005f78:	bfbb      	ittet	lt
 8005f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f7e:	461d      	movlt	r5, r3
 8005f80:	2300      	movge	r3, #0
 8005f82:	232d      	movlt	r3, #45	; 0x2d
 8005f84:	700b      	strb	r3, [r1, #0]
 8005f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	f023 0820 	bic.w	r8, r3, #32
 8005f92:	bfbc      	itt	lt
 8005f94:	4622      	movlt	r2, r4
 8005f96:	4614      	movlt	r4, r2
 8005f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f9c:	d005      	beq.n	8005faa <__cvt+0x42>
 8005f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fa2:	d100      	bne.n	8005fa6 <__cvt+0x3e>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	e000      	b.n	8005fac <__cvt+0x44>
 8005faa:	2103      	movs	r1, #3
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	ab02      	add	r3, sp, #8
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	ec45 4b10 	vmov	d0, r4, r5
 8005fb8:	4653      	mov	r3, sl
 8005fba:	4632      	mov	r2, r6
 8005fbc:	f001 fdac 	bl	8007b18 <_dtoa_r>
 8005fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	d102      	bne.n	8005fce <__cvt+0x66>
 8005fc8:	f019 0f01 	tst.w	r9, #1
 8005fcc:	d022      	beq.n	8006014 <__cvt+0xac>
 8005fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fd2:	eb07 0906 	add.w	r9, r7, r6
 8005fd6:	d110      	bne.n	8005ffa <__cvt+0x92>
 8005fd8:	783b      	ldrb	r3, [r7, #0]
 8005fda:	2b30      	cmp	r3, #48	; 0x30
 8005fdc:	d10a      	bne.n	8005ff4 <__cvt+0x8c>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7fa fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8005fea:	b918      	cbnz	r0, 8005ff4 <__cvt+0x8c>
 8005fec:	f1c6 0601 	rsb	r6, r6, #1
 8005ff0:	f8ca 6000 	str.w	r6, [sl]
 8005ff4:	f8da 3000 	ldr.w	r3, [sl]
 8005ff8:	4499      	add	r9, r3
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fd81 	bl	8000b08 <__aeabi_dcmpeq>
 8006006:	b108      	cbz	r0, 800600c <__cvt+0xa4>
 8006008:	f8cd 900c 	str.w	r9, [sp, #12]
 800600c:	2230      	movs	r2, #48	; 0x30
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	454b      	cmp	r3, r9
 8006012:	d307      	bcc.n	8006024 <__cvt+0xbc>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006018:	1bdb      	subs	r3, r3, r7
 800601a:	4638      	mov	r0, r7
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	b004      	add	sp, #16
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e7f0      	b.n	800600e <__cvt+0xa6>

0800602c <__exponent>:
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	4603      	mov	r3, r0
 8006030:	2900      	cmp	r1, #0
 8006032:	bfb8      	it	lt
 8006034:	4249      	neglt	r1, r1
 8006036:	f803 2b02 	strb.w	r2, [r3], #2
 800603a:	bfb4      	ite	lt
 800603c:	222d      	movlt	r2, #45	; 0x2d
 800603e:	222b      	movge	r2, #43	; 0x2b
 8006040:	2909      	cmp	r1, #9
 8006042:	7042      	strb	r2, [r0, #1]
 8006044:	dd2a      	ble.n	800609c <__exponent+0x70>
 8006046:	f10d 0407 	add.w	r4, sp, #7
 800604a:	46a4      	mov	ip, r4
 800604c:	270a      	movs	r7, #10
 800604e:	46a6      	mov	lr, r4
 8006050:	460a      	mov	r2, r1
 8006052:	fb91 f6f7 	sdiv	r6, r1, r7
 8006056:	fb07 1516 	mls	r5, r7, r6, r1
 800605a:	3530      	adds	r5, #48	; 0x30
 800605c:	2a63      	cmp	r2, #99	; 0x63
 800605e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006066:	4631      	mov	r1, r6
 8006068:	dcf1      	bgt.n	800604e <__exponent+0x22>
 800606a:	3130      	adds	r1, #48	; 0x30
 800606c:	f1ae 0502 	sub.w	r5, lr, #2
 8006070:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006074:	1c44      	adds	r4, r0, #1
 8006076:	4629      	mov	r1, r5
 8006078:	4561      	cmp	r1, ip
 800607a:	d30a      	bcc.n	8006092 <__exponent+0x66>
 800607c:	f10d 0209 	add.w	r2, sp, #9
 8006080:	eba2 020e 	sub.w	r2, r2, lr
 8006084:	4565      	cmp	r5, ip
 8006086:	bf88      	it	hi
 8006088:	2200      	movhi	r2, #0
 800608a:	4413      	add	r3, r2
 800608c:	1a18      	subs	r0, r3, r0
 800608e:	b003      	add	sp, #12
 8006090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f804 2f01 	strb.w	r2, [r4, #1]!
 800609a:	e7ed      	b.n	8006078 <__exponent+0x4c>
 800609c:	2330      	movs	r3, #48	; 0x30
 800609e:	3130      	adds	r1, #48	; 0x30
 80060a0:	7083      	strb	r3, [r0, #2]
 80060a2:	70c1      	strb	r1, [r0, #3]
 80060a4:	1d03      	adds	r3, r0, #4
 80060a6:	e7f1      	b.n	800608c <__exponent+0x60>

080060a8 <_printf_float>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	ed2d 8b02 	vpush	{d8}
 80060b0:	b08d      	sub	sp, #52	; 0x34
 80060b2:	460c      	mov	r4, r1
 80060b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060b8:	4616      	mov	r6, r2
 80060ba:	461f      	mov	r7, r3
 80060bc:	4605      	mov	r5, r0
 80060be:	f002 fe89 	bl	8008dd4 <_localeconv_r>
 80060c2:	f8d0 a000 	ldr.w	sl, [r0]
 80060c6:	4650      	mov	r0, sl
 80060c8:	f7fa f8a2 	bl	8000210 <strlen>
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	; 0x28
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	9305      	str	r3, [sp, #20]
 80060d4:	f8d8 3000 	ldr.w	r3, [r8]
 80060d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060dc:	3307      	adds	r3, #7
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	f103 0208 	add.w	r2, r3, #8
 80060e6:	f8c8 2000 	str.w	r2, [r8]
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006100:	ee08 0a10 	vmov	s16, r0
 8006104:	4b9f      	ldr	r3, [pc, #636]	; (8006384 <_printf_float+0x2dc>)
 8006106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	f7fa fd2d 	bl	8000b6c <__aeabi_dcmpun>
 8006112:	bb88      	cbnz	r0, 8006178 <_printf_float+0xd0>
 8006114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006118:	4b9a      	ldr	r3, [pc, #616]	; (8006384 <_printf_float+0x2dc>)
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	f7fa fd07 	bl	8000b30 <__aeabi_dcmple>
 8006122:	bb48      	cbnz	r0, 8006178 <_printf_float+0xd0>
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fcf6 	bl	8000b1c <__aeabi_dcmplt>
 8006130:	b110      	cbz	r0, 8006138 <_printf_float+0x90>
 8006132:	232d      	movs	r3, #45	; 0x2d
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	4b93      	ldr	r3, [pc, #588]	; (8006388 <_printf_float+0x2e0>)
 800613a:	4894      	ldr	r0, [pc, #592]	; (800638c <_printf_float+0x2e4>)
 800613c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006140:	bf94      	ite	ls
 8006142:	4698      	movls	r8, r3
 8006144:	4680      	movhi	r8, r0
 8006146:	2303      	movs	r3, #3
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	9b05      	ldr	r3, [sp, #20]
 800614c:	f023 0204 	bic.w	r2, r3, #4
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	f04f 0900 	mov.w	r9, #0
 8006156:	9700      	str	r7, [sp, #0]
 8006158:	4633      	mov	r3, r6
 800615a:	aa0b      	add	r2, sp, #44	; 0x2c
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 f9d8 	bl	8006514 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	f040 8090 	bne.w	800628a <_printf_float+0x1e2>
 800616a:	f04f 30ff 	mov.w	r0, #4294967295
 800616e:	b00d      	add	sp, #52	; 0x34
 8006170:	ecbd 8b02 	vpop	{d8}
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa fcf4 	bl	8000b6c <__aeabi_dcmpun>
 8006184:	b140      	cbz	r0, 8006198 <_printf_float+0xf0>
 8006186:	464b      	mov	r3, r9
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbc      	itt	lt
 800618c:	232d      	movlt	r3, #45	; 0x2d
 800618e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006192:	487f      	ldr	r0, [pc, #508]	; (8006390 <_printf_float+0x2e8>)
 8006194:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <_printf_float+0x2ec>)
 8006196:	e7d1      	b.n	800613c <_printf_float+0x94>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800619e:	9206      	str	r2, [sp, #24]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	d13f      	bne.n	8006224 <_printf_float+0x17c>
 80061a4:	2306      	movs	r3, #6
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	9b05      	ldr	r3, [sp, #20]
 80061aa:	6861      	ldr	r1, [r4, #4]
 80061ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061b0:	2300      	movs	r3, #0
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	ab0a      	add	r3, sp, #40	; 0x28
 80061b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061ba:	ab09      	add	r3, sp, #36	; 0x24
 80061bc:	ec49 8b10 	vmov	d0, r8, r9
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff fecd 	bl	8005f68 <__cvt>
 80061ce:	9b06      	ldr	r3, [sp, #24]
 80061d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d2:	2b47      	cmp	r3, #71	; 0x47
 80061d4:	4680      	mov	r8, r0
 80061d6:	d108      	bne.n	80061ea <_printf_float+0x142>
 80061d8:	1cc8      	adds	r0, r1, #3
 80061da:	db02      	blt.n	80061e2 <_printf_float+0x13a>
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	dd41      	ble.n	8006266 <_printf_float+0x1be>
 80061e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80061e6:	fa5f fb8b 	uxtb.w	fp, fp
 80061ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061ee:	d820      	bhi.n	8006232 <_printf_float+0x18a>
 80061f0:	3901      	subs	r1, #1
 80061f2:	465a      	mov	r2, fp
 80061f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061f8:	9109      	str	r1, [sp, #36]	; 0x24
 80061fa:	f7ff ff17 	bl	800602c <__exponent>
 80061fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006200:	1813      	adds	r3, r2, r0
 8006202:	2a01      	cmp	r2, #1
 8006204:	4681      	mov	r9, r0
 8006206:	6123      	str	r3, [r4, #16]
 8006208:	dc02      	bgt.n	8006210 <_printf_float+0x168>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	07d2      	lsls	r2, r2, #31
 800620e:	d501      	bpl.n	8006214 <_printf_float+0x16c>
 8006210:	3301      	adds	r3, #1
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006218:	2b00      	cmp	r3, #0
 800621a:	d09c      	beq.n	8006156 <_printf_float+0xae>
 800621c:	232d      	movs	r3, #45	; 0x2d
 800621e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006222:	e798      	b.n	8006156 <_printf_float+0xae>
 8006224:	9a06      	ldr	r2, [sp, #24]
 8006226:	2a47      	cmp	r2, #71	; 0x47
 8006228:	d1be      	bne.n	80061a8 <_printf_float+0x100>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1bc      	bne.n	80061a8 <_printf_float+0x100>
 800622e:	2301      	movs	r3, #1
 8006230:	e7b9      	b.n	80061a6 <_printf_float+0xfe>
 8006232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006236:	d118      	bne.n	800626a <_printf_float+0x1c2>
 8006238:	2900      	cmp	r1, #0
 800623a:	6863      	ldr	r3, [r4, #4]
 800623c:	dd0b      	ble.n	8006256 <_printf_float+0x1ae>
 800623e:	6121      	str	r1, [r4, #16]
 8006240:	b913      	cbnz	r3, 8006248 <_printf_float+0x1a0>
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	07d0      	lsls	r0, r2, #31
 8006246:	d502      	bpl.n	800624e <_printf_float+0x1a6>
 8006248:	3301      	adds	r3, #1
 800624a:	440b      	add	r3, r1
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006250:	f04f 0900 	mov.w	r9, #0
 8006254:	e7de      	b.n	8006214 <_printf_float+0x16c>
 8006256:	b913      	cbnz	r3, 800625e <_printf_float+0x1b6>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	07d2      	lsls	r2, r2, #31
 800625c:	d501      	bpl.n	8006262 <_printf_float+0x1ba>
 800625e:	3302      	adds	r3, #2
 8006260:	e7f4      	b.n	800624c <_printf_float+0x1a4>
 8006262:	2301      	movs	r3, #1
 8006264:	e7f2      	b.n	800624c <_printf_float+0x1a4>
 8006266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800626a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626c:	4299      	cmp	r1, r3
 800626e:	db05      	blt.n	800627c <_printf_float+0x1d4>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	6121      	str	r1, [r4, #16]
 8006274:	07d8      	lsls	r0, r3, #31
 8006276:	d5ea      	bpl.n	800624e <_printf_float+0x1a6>
 8006278:	1c4b      	adds	r3, r1, #1
 800627a:	e7e7      	b.n	800624c <_printf_float+0x1a4>
 800627c:	2900      	cmp	r1, #0
 800627e:	bfd4      	ite	le
 8006280:	f1c1 0202 	rsble	r2, r1, #2
 8006284:	2201      	movgt	r2, #1
 8006286:	4413      	add	r3, r2
 8006288:	e7e0      	b.n	800624c <_printf_float+0x1a4>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	055a      	lsls	r2, r3, #21
 800628e:	d407      	bmi.n	80062a0 <_printf_float+0x1f8>
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	4642      	mov	r2, r8
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	d12c      	bne.n	80062f8 <_printf_float+0x250>
 800629e:	e764      	b.n	800616a <_printf_float+0xc2>
 80062a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062a4:	f240 80e0 	bls.w	8006468 <_printf_float+0x3c0>
 80062a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062ac:	2200      	movs	r2, #0
 80062ae:	2300      	movs	r3, #0
 80062b0:	f7fa fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d034      	beq.n	8006322 <_printf_float+0x27a>
 80062b8:	4a37      	ldr	r2, [pc, #220]	; (8006398 <_printf_float+0x2f0>)
 80062ba:	2301      	movs	r3, #1
 80062bc:	4631      	mov	r1, r6
 80062be:	4628      	mov	r0, r5
 80062c0:	47b8      	blx	r7
 80062c2:	3001      	adds	r0, #1
 80062c4:	f43f af51 	beq.w	800616a <_printf_float+0xc2>
 80062c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062cc:	429a      	cmp	r2, r3
 80062ce:	db02      	blt.n	80062d6 <_printf_float+0x22e>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	07d8      	lsls	r0, r3, #31
 80062d4:	d510      	bpl.n	80062f8 <_printf_float+0x250>
 80062d6:	ee18 3a10 	vmov	r3, s16
 80062da:	4652      	mov	r2, sl
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af41 	beq.w	800616a <_printf_float+0xc2>
 80062e8:	f04f 0800 	mov.w	r8, #0
 80062ec:	f104 091a 	add.w	r9, r4, #26
 80062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	4543      	cmp	r3, r8
 80062f6:	dc09      	bgt.n	800630c <_printf_float+0x264>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	f100 8105 	bmi.w	800650a <_printf_float+0x462>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e730      	b.n	800616e <_printf_float+0xc6>
 800630c:	2301      	movs	r3, #1
 800630e:	464a      	mov	r2, r9
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af27 	beq.w	800616a <_printf_float+0xc2>
 800631c:	f108 0801 	add.w	r8, r8, #1
 8006320:	e7e6      	b.n	80062f0 <_printf_float+0x248>
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc39      	bgt.n	800639c <_printf_float+0x2f4>
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <_printf_float+0x2f0>)
 800632a:	2301      	movs	r3, #1
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af19 	beq.w	800616a <_printf_float+0xc2>
 8006338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800633c:	4313      	orrs	r3, r2
 800633e:	d102      	bne.n	8006346 <_printf_float+0x29e>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07d9      	lsls	r1, r3, #31
 8006344:	d5d8      	bpl.n	80062f8 <_printf_float+0x250>
 8006346:	ee18 3a10 	vmov	r3, s16
 800634a:	4652      	mov	r2, sl
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af09 	beq.w	800616a <_printf_float+0xc2>
 8006358:	f04f 0900 	mov.w	r9, #0
 800635c:	f104 0a1a 	add.w	sl, r4, #26
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	425b      	negs	r3, r3
 8006364:	454b      	cmp	r3, r9
 8006366:	dc01      	bgt.n	800636c <_printf_float+0x2c4>
 8006368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636a:	e792      	b.n	8006292 <_printf_float+0x1ea>
 800636c:	2301      	movs	r3, #1
 800636e:	4652      	mov	r2, sl
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f aef7 	beq.w	800616a <_printf_float+0xc2>
 800637c:	f109 0901 	add.w	r9, r9, #1
 8006380:	e7ee      	b.n	8006360 <_printf_float+0x2b8>
 8006382:	bf00      	nop
 8006384:	7fefffff 	.word	0x7fefffff
 8006388:	0800bbcc 	.word	0x0800bbcc
 800638c:	0800bbd0 	.word	0x0800bbd0
 8006390:	0800bbd8 	.word	0x0800bbd8
 8006394:	0800bbd4 	.word	0x0800bbd4
 8006398:	0800bbdc 	.word	0x0800bbdc
 800639c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800639e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bfa8      	it	ge
 80063a4:	461a      	movge	r2, r3
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	4691      	mov	r9, r2
 80063aa:	dc37      	bgt.n	800641c <_printf_float+0x374>
 80063ac:	f04f 0b00 	mov.w	fp, #0
 80063b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b4:	f104 021a 	add.w	r2, r4, #26
 80063b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	eba3 0309 	sub.w	r3, r3, r9
 80063c0:	455b      	cmp	r3, fp
 80063c2:	dc33      	bgt.n	800642c <_printf_float+0x384>
 80063c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c8:	429a      	cmp	r2, r3
 80063ca:	db3b      	blt.n	8006444 <_printf_float+0x39c>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07da      	lsls	r2, r3, #31
 80063d0:	d438      	bmi.n	8006444 <_printf_float+0x39c>
 80063d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d4:	9a05      	ldr	r2, [sp, #20]
 80063d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d8:	1a9a      	subs	r2, r3, r2
 80063da:	eba3 0901 	sub.w	r9, r3, r1
 80063de:	4591      	cmp	r9, r2
 80063e0:	bfa8      	it	ge
 80063e2:	4691      	movge	r9, r2
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	dc35      	bgt.n	8006456 <_printf_float+0x3ae>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f2:	f104 0a1a 	add.w	sl, r4, #26
 80063f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	eba3 0309 	sub.w	r3, r3, r9
 8006400:	4543      	cmp	r3, r8
 8006402:	f77f af79 	ble.w	80062f8 <_printf_float+0x250>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	f43f aeaa 	beq.w	800616a <_printf_float+0xc2>
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	e7ec      	b.n	80063f6 <_printf_float+0x34e>
 800641c:	4613      	mov	r3, r2
 800641e:	4631      	mov	r1, r6
 8006420:	4642      	mov	r2, r8
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	d1c0      	bne.n	80063ac <_printf_float+0x304>
 800642a:	e69e      	b.n	800616a <_printf_float+0xc2>
 800642c:	2301      	movs	r3, #1
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	9205      	str	r2, [sp, #20]
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	f43f ae97 	beq.w	800616a <_printf_float+0xc2>
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	f10b 0b01 	add.w	fp, fp, #1
 8006442:	e7b9      	b.n	80063b8 <_printf_float+0x310>
 8006444:	ee18 3a10 	vmov	r3, s16
 8006448:	4652      	mov	r2, sl
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1be      	bne.n	80063d2 <_printf_float+0x32a>
 8006454:	e689      	b.n	800616a <_printf_float+0xc2>
 8006456:	9a05      	ldr	r2, [sp, #20]
 8006458:	464b      	mov	r3, r9
 800645a:	4442      	add	r2, r8
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	d1c1      	bne.n	80063ea <_printf_float+0x342>
 8006466:	e680      	b.n	800616a <_printf_float+0xc2>
 8006468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646a:	2a01      	cmp	r2, #1
 800646c:	dc01      	bgt.n	8006472 <_printf_float+0x3ca>
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d538      	bpl.n	80064e4 <_printf_float+0x43c>
 8006472:	2301      	movs	r3, #1
 8006474:	4642      	mov	r2, r8
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae74 	beq.w	800616a <_printf_float+0xc2>
 8006482:	ee18 3a10 	vmov	r3, s16
 8006486:	4652      	mov	r2, sl
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f ae6b 	beq.w	800616a <_printf_float+0xc2>
 8006494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa fb34 	bl	8000b08 <__aeabi_dcmpeq>
 80064a0:	b9d8      	cbnz	r0, 80064da <_printf_float+0x432>
 80064a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a4:	f108 0201 	add.w	r2, r8, #1
 80064a8:	3b01      	subs	r3, #1
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	d10e      	bne.n	80064d2 <_printf_float+0x42a>
 80064b4:	e659      	b.n	800616a <_printf_float+0xc2>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4652      	mov	r2, sl
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f ae52 	beq.w	800616a <_printf_float+0xc2>
 80064c6:	f108 0801 	add.w	r8, r8, #1
 80064ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4543      	cmp	r3, r8
 80064d0:	dcf1      	bgt.n	80064b6 <_printf_float+0x40e>
 80064d2:	464b      	mov	r3, r9
 80064d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064d8:	e6dc      	b.n	8006294 <_printf_float+0x1ec>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 0a1a 	add.w	sl, r4, #26
 80064e2:	e7f2      	b.n	80064ca <_printf_float+0x422>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4642      	mov	r2, r8
 80064e8:	e7df      	b.n	80064aa <_printf_float+0x402>
 80064ea:	2301      	movs	r3, #1
 80064ec:	464a      	mov	r2, r9
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f ae38 	beq.w	800616a <_printf_float+0xc2>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006502:	1a5b      	subs	r3, r3, r1
 8006504:	4543      	cmp	r3, r8
 8006506:	dcf0      	bgt.n	80064ea <_printf_float+0x442>
 8006508:	e6fa      	b.n	8006300 <_printf_float+0x258>
 800650a:	f04f 0800 	mov.w	r8, #0
 800650e:	f104 0919 	add.w	r9, r4, #25
 8006512:	e7f4      	b.n	80064fe <_printf_float+0x456>

08006514 <_printf_common>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	4616      	mov	r6, r2
 800651a:	4699      	mov	r9, r3
 800651c:	688a      	ldr	r2, [r1, #8]
 800651e:	690b      	ldr	r3, [r1, #16]
 8006520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006524:	4293      	cmp	r3, r2
 8006526:	bfb8      	it	lt
 8006528:	4613      	movlt	r3, r2
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006530:	4607      	mov	r7, r0
 8006532:	460c      	mov	r4, r1
 8006534:	b10a      	cbz	r2, 800653a <_printf_common+0x26>
 8006536:	3301      	adds	r3, #1
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	0699      	lsls	r1, r3, #26
 800653e:	bf42      	ittt	mi
 8006540:	6833      	ldrmi	r3, [r6, #0]
 8006542:	3302      	addmi	r3, #2
 8006544:	6033      	strmi	r3, [r6, #0]
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	f015 0506 	ands.w	r5, r5, #6
 800654c:	d106      	bne.n	800655c <_printf_common+0x48>
 800654e:	f104 0a19 	add.w	sl, r4, #25
 8006552:	68e3      	ldr	r3, [r4, #12]
 8006554:	6832      	ldr	r2, [r6, #0]
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	42ab      	cmp	r3, r5
 800655a:	dc26      	bgt.n	80065aa <_printf_common+0x96>
 800655c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006560:	1e13      	subs	r3, r2, #0
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	bf18      	it	ne
 8006566:	2301      	movne	r3, #1
 8006568:	0692      	lsls	r2, r2, #26
 800656a:	d42b      	bmi.n	80065c4 <_printf_common+0xb0>
 800656c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006570:	4649      	mov	r1, r9
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d01e      	beq.n	80065b8 <_printf_common+0xa4>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	68e5      	ldr	r5, [r4, #12]
 800657e:	6832      	ldr	r2, [r6, #0]
 8006580:	f003 0306 	and.w	r3, r3, #6
 8006584:	2b04      	cmp	r3, #4
 8006586:	bf08      	it	eq
 8006588:	1aad      	subeq	r5, r5, r2
 800658a:	68a3      	ldr	r3, [r4, #8]
 800658c:	6922      	ldr	r2, [r4, #16]
 800658e:	bf0c      	ite	eq
 8006590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006594:	2500      	movne	r5, #0
 8006596:	4293      	cmp	r3, r2
 8006598:	bfc4      	itt	gt
 800659a:	1a9b      	subgt	r3, r3, r2
 800659c:	18ed      	addgt	r5, r5, r3
 800659e:	2600      	movs	r6, #0
 80065a0:	341a      	adds	r4, #26
 80065a2:	42b5      	cmp	r5, r6
 80065a4:	d11a      	bne.n	80065dc <_printf_common+0xc8>
 80065a6:	2000      	movs	r0, #0
 80065a8:	e008      	b.n	80065bc <_printf_common+0xa8>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4652      	mov	r2, sl
 80065ae:	4649      	mov	r1, r9
 80065b0:	4638      	mov	r0, r7
 80065b2:	47c0      	blx	r8
 80065b4:	3001      	adds	r0, #1
 80065b6:	d103      	bne.n	80065c0 <_printf_common+0xac>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c0:	3501      	adds	r5, #1
 80065c2:	e7c6      	b.n	8006552 <_printf_common+0x3e>
 80065c4:	18e1      	adds	r1, r4, r3
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	2030      	movs	r0, #48	; 0x30
 80065ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ce:	4422      	add	r2, r4
 80065d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d8:	3302      	adds	r3, #2
 80065da:	e7c7      	b.n	800656c <_printf_common+0x58>
 80065dc:	2301      	movs	r3, #1
 80065de:	4622      	mov	r2, r4
 80065e0:	4649      	mov	r1, r9
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d0e6      	beq.n	80065b8 <_printf_common+0xa4>
 80065ea:	3601      	adds	r6, #1
 80065ec:	e7d9      	b.n	80065a2 <_printf_common+0x8e>
	...

080065f0 <_printf_i>:
 80065f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f4:	7e0f      	ldrb	r7, [r1, #24]
 80065f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f8:	2f78      	cmp	r7, #120	; 0x78
 80065fa:	4691      	mov	r9, r2
 80065fc:	4680      	mov	r8, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	469a      	mov	sl, r3
 8006602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006606:	d807      	bhi.n	8006618 <_printf_i+0x28>
 8006608:	2f62      	cmp	r7, #98	; 0x62
 800660a:	d80a      	bhi.n	8006622 <_printf_i+0x32>
 800660c:	2f00      	cmp	r7, #0
 800660e:	f000 80d8 	beq.w	80067c2 <_printf_i+0x1d2>
 8006612:	2f58      	cmp	r7, #88	; 0x58
 8006614:	f000 80a3 	beq.w	800675e <_printf_i+0x16e>
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006620:	e03a      	b.n	8006698 <_printf_i+0xa8>
 8006622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006626:	2b15      	cmp	r3, #21
 8006628:	d8f6      	bhi.n	8006618 <_printf_i+0x28>
 800662a:	a101      	add	r1, pc, #4	; (adr r1, 8006630 <_printf_i+0x40>)
 800662c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006630:	08006689 	.word	0x08006689
 8006634:	0800669d 	.word	0x0800669d
 8006638:	08006619 	.word	0x08006619
 800663c:	08006619 	.word	0x08006619
 8006640:	08006619 	.word	0x08006619
 8006644:	08006619 	.word	0x08006619
 8006648:	0800669d 	.word	0x0800669d
 800664c:	08006619 	.word	0x08006619
 8006650:	08006619 	.word	0x08006619
 8006654:	08006619 	.word	0x08006619
 8006658:	08006619 	.word	0x08006619
 800665c:	080067a9 	.word	0x080067a9
 8006660:	080066cd 	.word	0x080066cd
 8006664:	0800678b 	.word	0x0800678b
 8006668:	08006619 	.word	0x08006619
 800666c:	08006619 	.word	0x08006619
 8006670:	080067cb 	.word	0x080067cb
 8006674:	08006619 	.word	0x08006619
 8006678:	080066cd 	.word	0x080066cd
 800667c:	08006619 	.word	0x08006619
 8006680:	08006619 	.word	0x08006619
 8006684:	08006793 	.word	0x08006793
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	1d1a      	adds	r2, r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	602a      	str	r2, [r5, #0]
 8006690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006698:	2301      	movs	r3, #1
 800669a:	e0a3      	b.n	80067e4 <_printf_i+0x1f4>
 800669c:	6820      	ldr	r0, [r4, #0]
 800669e:	6829      	ldr	r1, [r5, #0]
 80066a0:	0606      	lsls	r6, r0, #24
 80066a2:	f101 0304 	add.w	r3, r1, #4
 80066a6:	d50a      	bpl.n	80066be <_printf_i+0xce>
 80066a8:	680e      	ldr	r6, [r1, #0]
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	2e00      	cmp	r6, #0
 80066ae:	da03      	bge.n	80066b8 <_printf_i+0xc8>
 80066b0:	232d      	movs	r3, #45	; 0x2d
 80066b2:	4276      	negs	r6, r6
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	485e      	ldr	r0, [pc, #376]	; (8006834 <_printf_i+0x244>)
 80066ba:	230a      	movs	r3, #10
 80066bc:	e019      	b.n	80066f2 <_printf_i+0x102>
 80066be:	680e      	ldr	r6, [r1, #0]
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066c6:	bf18      	it	ne
 80066c8:	b236      	sxthne	r6, r6
 80066ca:	e7ef      	b.n	80066ac <_printf_i+0xbc>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	1d19      	adds	r1, r3, #4
 80066d2:	6029      	str	r1, [r5, #0]
 80066d4:	0601      	lsls	r1, r0, #24
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0xec>
 80066d8:	681e      	ldr	r6, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0xf2>
 80066dc:	0646      	lsls	r6, r0, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0xe8>
 80066e0:	881e      	ldrh	r6, [r3, #0]
 80066e2:	4854      	ldr	r0, [pc, #336]	; (8006834 <_printf_i+0x244>)
 80066e4:	2f6f      	cmp	r7, #111	; 0x6f
 80066e6:	bf0c      	ite	eq
 80066e8:	2308      	moveq	r3, #8
 80066ea:	230a      	movne	r3, #10
 80066ec:	2100      	movs	r1, #0
 80066ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066f2:	6865      	ldr	r5, [r4, #4]
 80066f4:	60a5      	str	r5, [r4, #8]
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	bfa2      	ittt	ge
 80066fa:	6821      	ldrge	r1, [r4, #0]
 80066fc:	f021 0104 	bicge.w	r1, r1, #4
 8006700:	6021      	strge	r1, [r4, #0]
 8006702:	b90e      	cbnz	r6, 8006708 <_printf_i+0x118>
 8006704:	2d00      	cmp	r5, #0
 8006706:	d04d      	beq.n	80067a4 <_printf_i+0x1b4>
 8006708:	4615      	mov	r5, r2
 800670a:	fbb6 f1f3 	udiv	r1, r6, r3
 800670e:	fb03 6711 	mls	r7, r3, r1, r6
 8006712:	5dc7      	ldrb	r7, [r0, r7]
 8006714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006718:	4637      	mov	r7, r6
 800671a:	42bb      	cmp	r3, r7
 800671c:	460e      	mov	r6, r1
 800671e:	d9f4      	bls.n	800670a <_printf_i+0x11a>
 8006720:	2b08      	cmp	r3, #8
 8006722:	d10b      	bne.n	800673c <_printf_i+0x14c>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	07de      	lsls	r6, r3, #31
 8006728:	d508      	bpl.n	800673c <_printf_i+0x14c>
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	6861      	ldr	r1, [r4, #4]
 800672e:	4299      	cmp	r1, r3
 8006730:	bfde      	ittt	le
 8006732:	2330      	movle	r3, #48	; 0x30
 8006734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800673c:	1b52      	subs	r2, r2, r5
 800673e:	6122      	str	r2, [r4, #16]
 8006740:	f8cd a000 	str.w	sl, [sp]
 8006744:	464b      	mov	r3, r9
 8006746:	aa03      	add	r2, sp, #12
 8006748:	4621      	mov	r1, r4
 800674a:	4640      	mov	r0, r8
 800674c:	f7ff fee2 	bl	8006514 <_printf_common>
 8006750:	3001      	adds	r0, #1
 8006752:	d14c      	bne.n	80067ee <_printf_i+0x1fe>
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	b004      	add	sp, #16
 800675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675e:	4835      	ldr	r0, [pc, #212]	; (8006834 <_printf_i+0x244>)
 8006760:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006764:	6829      	ldr	r1, [r5, #0]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f851 6b04 	ldr.w	r6, [r1], #4
 800676c:	6029      	str	r1, [r5, #0]
 800676e:	061d      	lsls	r5, r3, #24
 8006770:	d514      	bpl.n	800679c <_printf_i+0x1ac>
 8006772:	07df      	lsls	r7, r3, #31
 8006774:	bf44      	itt	mi
 8006776:	f043 0320 	orrmi.w	r3, r3, #32
 800677a:	6023      	strmi	r3, [r4, #0]
 800677c:	b91e      	cbnz	r6, 8006786 <_printf_i+0x196>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f023 0320 	bic.w	r3, r3, #32
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	2310      	movs	r3, #16
 8006788:	e7b0      	b.n	80066ec <_printf_i+0xfc>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	f043 0320 	orr.w	r3, r3, #32
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	2378      	movs	r3, #120	; 0x78
 8006794:	4828      	ldr	r0, [pc, #160]	; (8006838 <_printf_i+0x248>)
 8006796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800679a:	e7e3      	b.n	8006764 <_printf_i+0x174>
 800679c:	0659      	lsls	r1, r3, #25
 800679e:	bf48      	it	mi
 80067a0:	b2b6      	uxthmi	r6, r6
 80067a2:	e7e6      	b.n	8006772 <_printf_i+0x182>
 80067a4:	4615      	mov	r5, r2
 80067a6:	e7bb      	b.n	8006720 <_printf_i+0x130>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	6826      	ldr	r6, [r4, #0]
 80067ac:	6961      	ldr	r1, [r4, #20]
 80067ae:	1d18      	adds	r0, r3, #4
 80067b0:	6028      	str	r0, [r5, #0]
 80067b2:	0635      	lsls	r5, r6, #24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0x1cc>
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0x1d2>
 80067bc:	0670      	lsls	r0, r6, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0x1c8>
 80067c0:	8019      	strh	r1, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	4615      	mov	r5, r2
 80067c8:	e7ba      	b.n	8006740 <_printf_i+0x150>
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	602a      	str	r2, [r5, #0]
 80067d0:	681d      	ldr	r5, [r3, #0]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7f9 fd22 	bl	8000220 <memchr>
 80067dc:	b108      	cbz	r0, 80067e2 <_printf_i+0x1f2>
 80067de:	1b40      	subs	r0, r0, r5
 80067e0:	6060      	str	r0, [r4, #4]
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ec:	e7a8      	b.n	8006740 <_printf_i+0x150>
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	462a      	mov	r2, r5
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d0ab      	beq.n	8006754 <_printf_i+0x164>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	079b      	lsls	r3, r3, #30
 8006800:	d413      	bmi.n	800682a <_printf_i+0x23a>
 8006802:	68e0      	ldr	r0, [r4, #12]
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	4298      	cmp	r0, r3
 8006808:	bfb8      	it	lt
 800680a:	4618      	movlt	r0, r3
 800680c:	e7a4      	b.n	8006758 <_printf_i+0x168>
 800680e:	2301      	movs	r3, #1
 8006810:	4632      	mov	r2, r6
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d09b      	beq.n	8006754 <_printf_i+0x164>
 800681c:	3501      	adds	r5, #1
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	1a5b      	subs	r3, r3, r1
 8006824:	42ab      	cmp	r3, r5
 8006826:	dcf2      	bgt.n	800680e <_printf_i+0x21e>
 8006828:	e7eb      	b.n	8006802 <_printf_i+0x212>
 800682a:	2500      	movs	r5, #0
 800682c:	f104 0619 	add.w	r6, r4, #25
 8006830:	e7f5      	b.n	800681e <_printf_i+0x22e>
 8006832:	bf00      	nop
 8006834:	0800bbde 	.word	0x0800bbde
 8006838:	0800bbef 	.word	0x0800bbef

0800683c <_scanf_float>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	b087      	sub	sp, #28
 8006842:	4617      	mov	r7, r2
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	688b      	ldr	r3, [r1, #8]
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800684e:	bf83      	ittte	hi
 8006850:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006854:	195b      	addhi	r3, r3, r5
 8006856:	9302      	strhi	r3, [sp, #8]
 8006858:	2300      	movls	r3, #0
 800685a:	bf86      	itte	hi
 800685c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006860:	608b      	strhi	r3, [r1, #8]
 8006862:	9302      	strls	r3, [sp, #8]
 8006864:	680b      	ldr	r3, [r1, #0]
 8006866:	468b      	mov	fp, r1
 8006868:	2500      	movs	r5, #0
 800686a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800686e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006872:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006876:	4680      	mov	r8, r0
 8006878:	460c      	mov	r4, r1
 800687a:	465e      	mov	r6, fp
 800687c:	46aa      	mov	sl, r5
 800687e:	46a9      	mov	r9, r5
 8006880:	9501      	str	r5, [sp, #4]
 8006882:	68a2      	ldr	r2, [r4, #8]
 8006884:	b152      	cbz	r2, 800689c <_scanf_float+0x60>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b4e      	cmp	r3, #78	; 0x4e
 800688c:	d864      	bhi.n	8006958 <_scanf_float+0x11c>
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d83c      	bhi.n	800690c <_scanf_float+0xd0>
 8006892:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006896:	b2c8      	uxtb	r0, r1
 8006898:	280e      	cmp	r0, #14
 800689a:	d93a      	bls.n	8006912 <_scanf_float+0xd6>
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	d003      	beq.n	80068aa <_scanf_float+0x6e>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ae:	f1ba 0f01 	cmp.w	sl, #1
 80068b2:	f200 8113 	bhi.w	8006adc <_scanf_float+0x2a0>
 80068b6:	455e      	cmp	r6, fp
 80068b8:	f200 8105 	bhi.w	8006ac6 <_scanf_float+0x28a>
 80068bc:	2501      	movs	r5, #1
 80068be:	4628      	mov	r0, r5
 80068c0:	b007      	add	sp, #28
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068ca:	2a0d      	cmp	r2, #13
 80068cc:	d8e6      	bhi.n	800689c <_scanf_float+0x60>
 80068ce:	a101      	add	r1, pc, #4	; (adr r1, 80068d4 <_scanf_float+0x98>)
 80068d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068d4:	08006a13 	.word	0x08006a13
 80068d8:	0800689d 	.word	0x0800689d
 80068dc:	0800689d 	.word	0x0800689d
 80068e0:	0800689d 	.word	0x0800689d
 80068e4:	08006a73 	.word	0x08006a73
 80068e8:	08006a4b 	.word	0x08006a4b
 80068ec:	0800689d 	.word	0x0800689d
 80068f0:	0800689d 	.word	0x0800689d
 80068f4:	08006a21 	.word	0x08006a21
 80068f8:	0800689d 	.word	0x0800689d
 80068fc:	0800689d 	.word	0x0800689d
 8006900:	0800689d 	.word	0x0800689d
 8006904:	0800689d 	.word	0x0800689d
 8006908:	080069d9 	.word	0x080069d9
 800690c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006910:	e7db      	b.n	80068ca <_scanf_float+0x8e>
 8006912:	290e      	cmp	r1, #14
 8006914:	d8c2      	bhi.n	800689c <_scanf_float+0x60>
 8006916:	a001      	add	r0, pc, #4	; (adr r0, 800691c <_scanf_float+0xe0>)
 8006918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800691c:	080069cb 	.word	0x080069cb
 8006920:	0800689d 	.word	0x0800689d
 8006924:	080069cb 	.word	0x080069cb
 8006928:	08006a5f 	.word	0x08006a5f
 800692c:	0800689d 	.word	0x0800689d
 8006930:	08006979 	.word	0x08006979
 8006934:	080069b5 	.word	0x080069b5
 8006938:	080069b5 	.word	0x080069b5
 800693c:	080069b5 	.word	0x080069b5
 8006940:	080069b5 	.word	0x080069b5
 8006944:	080069b5 	.word	0x080069b5
 8006948:	080069b5 	.word	0x080069b5
 800694c:	080069b5 	.word	0x080069b5
 8006950:	080069b5 	.word	0x080069b5
 8006954:	080069b5 	.word	0x080069b5
 8006958:	2b6e      	cmp	r3, #110	; 0x6e
 800695a:	d809      	bhi.n	8006970 <_scanf_float+0x134>
 800695c:	2b60      	cmp	r3, #96	; 0x60
 800695e:	d8b2      	bhi.n	80068c6 <_scanf_float+0x8a>
 8006960:	2b54      	cmp	r3, #84	; 0x54
 8006962:	d077      	beq.n	8006a54 <_scanf_float+0x218>
 8006964:	2b59      	cmp	r3, #89	; 0x59
 8006966:	d199      	bne.n	800689c <_scanf_float+0x60>
 8006968:	2d07      	cmp	r5, #7
 800696a:	d197      	bne.n	800689c <_scanf_float+0x60>
 800696c:	2508      	movs	r5, #8
 800696e:	e029      	b.n	80069c4 <_scanf_float+0x188>
 8006970:	2b74      	cmp	r3, #116	; 0x74
 8006972:	d06f      	beq.n	8006a54 <_scanf_float+0x218>
 8006974:	2b79      	cmp	r3, #121	; 0x79
 8006976:	e7f6      	b.n	8006966 <_scanf_float+0x12a>
 8006978:	6821      	ldr	r1, [r4, #0]
 800697a:	05c8      	lsls	r0, r1, #23
 800697c:	d51a      	bpl.n	80069b4 <_scanf_float+0x178>
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006984:	6021      	str	r1, [r4, #0]
 8006986:	f109 0901 	add.w	r9, r9, #1
 800698a:	b11b      	cbz	r3, 8006994 <_scanf_float+0x158>
 800698c:	3b01      	subs	r3, #1
 800698e:	3201      	adds	r2, #1
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	60a2      	str	r2, [r4, #8]
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	3301      	adds	r3, #1
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	f340 8084 	ble.w	8006ab4 <_scanf_float+0x278>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	e766      	b.n	8006882 <_scanf_float+0x46>
 80069b4:	eb1a 0f05 	cmn.w	sl, r5
 80069b8:	f47f af70 	bne.w	800689c <_scanf_float+0x60>
 80069bc:	6822      	ldr	r2, [r4, #0]
 80069be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	f806 3b01 	strb.w	r3, [r6], #1
 80069c8:	e7e4      	b.n	8006994 <_scanf_float+0x158>
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	0610      	lsls	r0, r2, #24
 80069ce:	f57f af65 	bpl.w	800689c <_scanf_float+0x60>
 80069d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069d6:	e7f4      	b.n	80069c2 <_scanf_float+0x186>
 80069d8:	f1ba 0f00 	cmp.w	sl, #0
 80069dc:	d10e      	bne.n	80069fc <_scanf_float+0x1c0>
 80069de:	f1b9 0f00 	cmp.w	r9, #0
 80069e2:	d10e      	bne.n	8006a02 <_scanf_float+0x1c6>
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069ee:	d108      	bne.n	8006a02 <_scanf_float+0x1c6>
 80069f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	f04f 0a01 	mov.w	sl, #1
 80069fa:	e7e3      	b.n	80069c4 <_scanf_float+0x188>
 80069fc:	f1ba 0f02 	cmp.w	sl, #2
 8006a00:	d055      	beq.n	8006aae <_scanf_float+0x272>
 8006a02:	2d01      	cmp	r5, #1
 8006a04:	d002      	beq.n	8006a0c <_scanf_float+0x1d0>
 8006a06:	2d04      	cmp	r5, #4
 8006a08:	f47f af48 	bne.w	800689c <_scanf_float+0x60>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	b2ed      	uxtb	r5, r5
 8006a10:	e7d8      	b.n	80069c4 <_scanf_float+0x188>
 8006a12:	f1ba 0f01 	cmp.w	sl, #1
 8006a16:	f47f af41 	bne.w	800689c <_scanf_float+0x60>
 8006a1a:	f04f 0a02 	mov.w	sl, #2
 8006a1e:	e7d1      	b.n	80069c4 <_scanf_float+0x188>
 8006a20:	b97d      	cbnz	r5, 8006a42 <_scanf_float+0x206>
 8006a22:	f1b9 0f00 	cmp.w	r9, #0
 8006a26:	f47f af3c 	bne.w	80068a2 <_scanf_float+0x66>
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a34:	f47f af39 	bne.w	80068aa <_scanf_float+0x6e>
 8006a38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a3c:	6022      	str	r2, [r4, #0]
 8006a3e:	2501      	movs	r5, #1
 8006a40:	e7c0      	b.n	80069c4 <_scanf_float+0x188>
 8006a42:	2d03      	cmp	r5, #3
 8006a44:	d0e2      	beq.n	8006a0c <_scanf_float+0x1d0>
 8006a46:	2d05      	cmp	r5, #5
 8006a48:	e7de      	b.n	8006a08 <_scanf_float+0x1cc>
 8006a4a:	2d02      	cmp	r5, #2
 8006a4c:	f47f af26 	bne.w	800689c <_scanf_float+0x60>
 8006a50:	2503      	movs	r5, #3
 8006a52:	e7b7      	b.n	80069c4 <_scanf_float+0x188>
 8006a54:	2d06      	cmp	r5, #6
 8006a56:	f47f af21 	bne.w	800689c <_scanf_float+0x60>
 8006a5a:	2507      	movs	r5, #7
 8006a5c:	e7b2      	b.n	80069c4 <_scanf_float+0x188>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	0591      	lsls	r1, r2, #22
 8006a62:	f57f af1b 	bpl.w	800689c <_scanf_float+0x60>
 8006a66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a70:	e7a8      	b.n	80069c4 <_scanf_float+0x188>
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a7c:	d006      	beq.n	8006a8c <_scanf_float+0x250>
 8006a7e:	0550      	lsls	r0, r2, #21
 8006a80:	f57f af0c 	bpl.w	800689c <_scanf_float+0x60>
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	f43f af0f 	beq.w	80068aa <_scanf_float+0x6e>
 8006a8c:	0591      	lsls	r1, r2, #22
 8006a8e:	bf58      	it	pl
 8006a90:	9901      	ldrpl	r1, [sp, #4]
 8006a92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a96:	bf58      	it	pl
 8006a98:	eba9 0101 	subpl.w	r1, r9, r1
 8006a9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006aa0:	bf58      	it	pl
 8006aa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006aa6:	6022      	str	r2, [r4, #0]
 8006aa8:	f04f 0900 	mov.w	r9, #0
 8006aac:	e78a      	b.n	80069c4 <_scanf_float+0x188>
 8006aae:	f04f 0a03 	mov.w	sl, #3
 8006ab2:	e787      	b.n	80069c4 <_scanf_float+0x188>
 8006ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4640      	mov	r0, r8
 8006abc:	4798      	blx	r3
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f aedf 	beq.w	8006882 <_scanf_float+0x46>
 8006ac4:	e6ea      	b.n	800689c <_scanf_float+0x60>
 8006ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4798      	blx	r3
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	e6ec      	b.n	80068b6 <_scanf_float+0x7a>
 8006adc:	1e6b      	subs	r3, r5, #1
 8006ade:	2b06      	cmp	r3, #6
 8006ae0:	d825      	bhi.n	8006b2e <_scanf_float+0x2f2>
 8006ae2:	2d02      	cmp	r5, #2
 8006ae4:	d836      	bhi.n	8006b54 <_scanf_float+0x318>
 8006ae6:	455e      	cmp	r6, fp
 8006ae8:	f67f aee8 	bls.w	80068bc <_scanf_float+0x80>
 8006aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006af0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006af4:	463a      	mov	r2, r7
 8006af6:	4640      	mov	r0, r8
 8006af8:	4798      	blx	r3
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	e7f1      	b.n	8006ae6 <_scanf_float+0x2aa>
 8006b02:	9802      	ldr	r0, [sp, #8]
 8006b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	463a      	mov	r2, r7
 8006b10:	4640      	mov	r0, r8
 8006b12:	4798      	blx	r3
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b1e:	fa5f fa8a 	uxtb.w	sl, sl
 8006b22:	f1ba 0f02 	cmp.w	sl, #2
 8006b26:	d1ec      	bne.n	8006b02 <_scanf_float+0x2c6>
 8006b28:	3d03      	subs	r5, #3
 8006b2a:	b2ed      	uxtb	r5, r5
 8006b2c:	1b76      	subs	r6, r6, r5
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	05da      	lsls	r2, r3, #23
 8006b32:	d52f      	bpl.n	8006b94 <_scanf_float+0x358>
 8006b34:	055b      	lsls	r3, r3, #21
 8006b36:	d510      	bpl.n	8006b5a <_scanf_float+0x31e>
 8006b38:	455e      	cmp	r6, fp
 8006b3a:	f67f aebf 	bls.w	80068bc <_scanf_float+0x80>
 8006b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b46:	463a      	mov	r2, r7
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4798      	blx	r3
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	e7f1      	b.n	8006b38 <_scanf_float+0x2fc>
 8006b54:	46aa      	mov	sl, r5
 8006b56:	9602      	str	r6, [sp, #8]
 8006b58:	e7df      	b.n	8006b1a <_scanf_float+0x2de>
 8006b5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	2965      	cmp	r1, #101	; 0x65
 8006b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b66:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	d00c      	beq.n	8006b88 <_scanf_float+0x34c>
 8006b6e:	2945      	cmp	r1, #69	; 0x45
 8006b70:	d00a      	beq.n	8006b88 <_scanf_float+0x34c>
 8006b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b76:	463a      	mov	r2, r7
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4798      	blx	r3
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	1eb5      	subs	r5, r6, #2
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b8c:	463a      	mov	r2, r7
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4798      	blx	r3
 8006b92:	462e      	mov	r6, r5
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	f015 0510 	ands.w	r5, r5, #16
 8006b9a:	d159      	bne.n	8006c50 <_scanf_float+0x414>
 8006b9c:	7035      	strb	r5, [r6, #0]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba8:	d11b      	bne.n	8006be2 <_scanf_float+0x3a6>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	454b      	cmp	r3, r9
 8006bae:	eba3 0209 	sub.w	r2, r3, r9
 8006bb2:	d123      	bne.n	8006bfc <_scanf_float+0x3c0>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	4640      	mov	r0, r8
 8006bba:	f000 fe97 	bl	80078ec <_strtod_r>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	f012 0f02 	tst.w	r2, #2
 8006bc6:	ec57 6b10 	vmov	r6, r7, d0
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	d021      	beq.n	8006c12 <_scanf_float+0x3d6>
 8006bce:	9903      	ldr	r1, [sp, #12]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	600a      	str	r2, [r1, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	e9c3 6700 	strd	r6, r7, [r3]
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60e3      	str	r3, [r4, #12]
 8006be0:	e66d      	b.n	80068be <_scanf_float+0x82>
 8006be2:	9b04      	ldr	r3, [sp, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0e5      	beq.n	8006bb4 <_scanf_float+0x378>
 8006be8:	9905      	ldr	r1, [sp, #20]
 8006bea:	230a      	movs	r3, #10
 8006bec:	462a      	mov	r2, r5
 8006bee:	3101      	adds	r1, #1
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	f000 ff03 	bl	80079fc <_strtol_r>
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	9e05      	ldr	r6, [sp, #20]
 8006bfa:	1ac2      	subs	r2, r0, r3
 8006bfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c00:	429e      	cmp	r6, r3
 8006c02:	bf28      	it	cs
 8006c04:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c08:	4912      	ldr	r1, [pc, #72]	; (8006c54 <_scanf_float+0x418>)
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f82c 	bl	8006c68 <siprintf>
 8006c10:	e7d0      	b.n	8006bb4 <_scanf_float+0x378>
 8006c12:	9903      	ldr	r1, [sp, #12]
 8006c14:	f012 0f04 	tst.w	r2, #4
 8006c18:	f103 0204 	add.w	r2, r3, #4
 8006c1c:	600a      	str	r2, [r1, #0]
 8006c1e:	d1d9      	bne.n	8006bd4 <_scanf_float+0x398>
 8006c20:	f8d3 8000 	ldr.w	r8, [r3]
 8006c24:	ee10 2a10 	vmov	r2, s0
 8006c28:	ee10 0a10 	vmov	r0, s0
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 ff9c 	bl	8000b6c <__aeabi_dcmpun>
 8006c34:	b128      	cbz	r0, 8006c42 <_scanf_float+0x406>
 8006c36:	4808      	ldr	r0, [pc, #32]	; (8006c58 <_scanf_float+0x41c>)
 8006c38:	f000 f810 	bl	8006c5c <nanf>
 8006c3c:	ed88 0a00 	vstr	s0, [r8]
 8006c40:	e7cb      	b.n	8006bda <_scanf_float+0x39e>
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 ffef 	bl	8000c28 <__aeabi_d2f>
 8006c4a:	f8c8 0000 	str.w	r0, [r8]
 8006c4e:	e7c4      	b.n	8006bda <_scanf_float+0x39e>
 8006c50:	2500      	movs	r5, #0
 8006c52:	e634      	b.n	80068be <_scanf_float+0x82>
 8006c54:	0800bc00 	.word	0x0800bc00
 8006c58:	0800c008 	.word	0x0800c008

08006c5c <nanf>:
 8006c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c64 <nanf+0x8>
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	7fc00000 	.word	0x7fc00000

08006c68 <siprintf>:
 8006c68:	b40e      	push	{r1, r2, r3}
 8006c6a:	b500      	push	{lr}
 8006c6c:	b09c      	sub	sp, #112	; 0x70
 8006c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c70:	9002      	str	r0, [sp, #8]
 8006c72:	9006      	str	r0, [sp, #24]
 8006c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c78:	4809      	ldr	r0, [pc, #36]	; (8006ca0 <siprintf+0x38>)
 8006c7a:	9107      	str	r1, [sp, #28]
 8006c7c:	9104      	str	r1, [sp, #16]
 8006c7e:	4909      	ldr	r1, [pc, #36]	; (8006ca4 <siprintf+0x3c>)
 8006c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c84:	9105      	str	r1, [sp, #20]
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	a902      	add	r1, sp, #8
 8006c8c:	f002 fed4 	bl	8009a38 <_svfiprintf_r>
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	b01c      	add	sp, #112	; 0x70
 8006c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c9c:	b003      	add	sp, #12
 8006c9e:	4770      	bx	lr
 8006ca0:	20000010 	.word	0x20000010
 8006ca4:	ffff0208 	.word	0xffff0208

08006ca8 <sulp>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	460d      	mov	r5, r1
 8006cae:	ec45 4b10 	vmov	d0, r4, r5
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	f002 fc1e 	bl	80094f4 <__ulp>
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	b17e      	cbz	r6, 8006cde <sulp+0x36>
 8006cbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd09      	ble.n	8006cde <sulp+0x36>
 8006cca:	051b      	lsls	r3, r3, #20
 8006ccc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cd0:	2400      	movs	r4, #0
 8006cd2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	462b      	mov	r3, r5
 8006cda:	f7f9 fcad 	bl	8000638 <__aeabi_dmul>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}

08006ce0 <_strtod_l>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	ed2d 8b02 	vpush	{d8}
 8006ce8:	b09d      	sub	sp, #116	; 0x74
 8006cea:	461f      	mov	r7, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	9318      	str	r3, [sp, #96]	; 0x60
 8006cf0:	4ba2      	ldr	r3, [pc, #648]	; (8006f7c <_strtod_l+0x29c>)
 8006cf2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	4688      	mov	r8, r1
 8006cfe:	f7f9 fa87 	bl	8000210 <strlen>
 8006d02:	f04f 0a00 	mov.w	sl, #0
 8006d06:	4605      	mov	r5, r0
 8006d08:	f04f 0b00 	mov.w	fp, #0
 8006d0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	2a2b      	cmp	r2, #43	; 0x2b
 8006d16:	d04e      	beq.n	8006db6 <_strtod_l+0xd6>
 8006d18:	d83b      	bhi.n	8006d92 <_strtod_l+0xb2>
 8006d1a:	2a0d      	cmp	r2, #13
 8006d1c:	d834      	bhi.n	8006d88 <_strtod_l+0xa8>
 8006d1e:	2a08      	cmp	r2, #8
 8006d20:	d834      	bhi.n	8006d8c <_strtod_l+0xac>
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d03e      	beq.n	8006da4 <_strtod_l+0xc4>
 8006d26:	2300      	movs	r3, #0
 8006d28:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d2c:	7833      	ldrb	r3, [r6, #0]
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	f040 80b0 	bne.w	8006e94 <_strtod_l+0x1b4>
 8006d34:	7873      	ldrb	r3, [r6, #1]
 8006d36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d3a:	2b58      	cmp	r3, #88	; 0x58
 8006d3c:	d168      	bne.n	8006e10 <_strtod_l+0x130>
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	ab18      	add	r3, sp, #96	; 0x60
 8006d44:	9702      	str	r7, [sp, #8]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4a8d      	ldr	r2, [pc, #564]	; (8006f80 <_strtod_l+0x2a0>)
 8006d4a:	ab19      	add	r3, sp, #100	; 0x64
 8006d4c:	a917      	add	r1, sp, #92	; 0x5c
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 fd38 	bl	80087c4 <__gethex>
 8006d54:	f010 0707 	ands.w	r7, r0, #7
 8006d58:	4605      	mov	r5, r0
 8006d5a:	d005      	beq.n	8006d68 <_strtod_l+0x88>
 8006d5c:	2f06      	cmp	r7, #6
 8006d5e:	d12c      	bne.n	8006dba <_strtod_l+0xda>
 8006d60:	3601      	adds	r6, #1
 8006d62:	2300      	movs	r3, #0
 8006d64:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d66:	930a      	str	r3, [sp, #40]	; 0x28
 8006d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 8590 	bne.w	8007890 <_strtod_l+0xbb0>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	b1eb      	cbz	r3, 8006db0 <_strtod_l+0xd0>
 8006d74:	4652      	mov	r2, sl
 8006d76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d7a:	ec43 2b10 	vmov	d0, r2, r3
 8006d7e:	b01d      	add	sp, #116	; 0x74
 8006d80:	ecbd 8b02 	vpop	{d8}
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	2a20      	cmp	r2, #32
 8006d8a:	d1cc      	bne.n	8006d26 <_strtod_l+0x46>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d90:	e7be      	b.n	8006d10 <_strtod_l+0x30>
 8006d92:	2a2d      	cmp	r2, #45	; 0x2d
 8006d94:	d1c7      	bne.n	8006d26 <_strtod_l+0x46>
 8006d96:	2201      	movs	r2, #1
 8006d98:	920a      	str	r2, [sp, #40]	; 0x28
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1c2      	bne.n	8006d2a <_strtod_l+0x4a>
 8006da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006da6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 856e 	bne.w	800788c <_strtod_l+0xbac>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	e7e1      	b.n	8006d7a <_strtod_l+0x9a>
 8006db6:	2200      	movs	r2, #0
 8006db8:	e7ee      	b.n	8006d98 <_strtod_l+0xb8>
 8006dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dbc:	b13a      	cbz	r2, 8006dce <_strtod_l+0xee>
 8006dbe:	2135      	movs	r1, #53	; 0x35
 8006dc0:	a81a      	add	r0, sp, #104	; 0x68
 8006dc2:	f002 fca2 	bl	800970a <__copybits>
 8006dc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f002 f861 	bl	8008e90 <_Bfree>
 8006dce:	3f01      	subs	r7, #1
 8006dd0:	2f04      	cmp	r7, #4
 8006dd2:	d806      	bhi.n	8006de2 <_strtod_l+0x102>
 8006dd4:	e8df f007 	tbb	[pc, r7]
 8006dd8:	1714030a 	.word	0x1714030a
 8006ddc:	0a          	.byte	0x0a
 8006ddd:	00          	.byte	0x00
 8006dde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006de2:	0728      	lsls	r0, r5, #28
 8006de4:	d5c0      	bpl.n	8006d68 <_strtod_l+0x88>
 8006de6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006dea:	e7bd      	b.n	8006d68 <_strtod_l+0x88>
 8006dec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006dfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006dfe:	e7f0      	b.n	8006de2 <_strtod_l+0x102>
 8006e00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f84 <_strtod_l+0x2a4>
 8006e04:	e7ed      	b.n	8006de2 <_strtod_l+0x102>
 8006e06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e0a:	f04f 3aff 	mov.w	sl, #4294967295
 8006e0e:	e7e8      	b.n	8006de2 <_strtod_l+0x102>
 8006e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d0f9      	beq.n	8006e10 <_strtod_l+0x130>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0a3      	beq.n	8006d68 <_strtod_l+0x88>
 8006e20:	2301      	movs	r3, #1
 8006e22:	f04f 0900 	mov.w	r9, #0
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e30:	464f      	mov	r7, r9
 8006e32:	220a      	movs	r2, #10
 8006e34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e36:	7806      	ldrb	r6, [r0, #0]
 8006e38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e3c:	b2d9      	uxtb	r1, r3
 8006e3e:	2909      	cmp	r1, #9
 8006e40:	d92a      	bls.n	8006e98 <_strtod_l+0x1b8>
 8006e42:	9905      	ldr	r1, [sp, #20]
 8006e44:	462a      	mov	r2, r5
 8006e46:	f002 ff0f 	bl	8009c68 <strncmp>
 8006e4a:	b398      	cbz	r0, 8006eb4 <_strtod_l+0x1d4>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	4632      	mov	r2, r6
 8006e50:	463d      	mov	r5, r7
 8006e52:	9005      	str	r0, [sp, #20]
 8006e54:	4603      	mov	r3, r0
 8006e56:	2a65      	cmp	r2, #101	; 0x65
 8006e58:	d001      	beq.n	8006e5e <_strtod_l+0x17e>
 8006e5a:	2a45      	cmp	r2, #69	; 0x45
 8006e5c:	d118      	bne.n	8006e90 <_strtod_l+0x1b0>
 8006e5e:	b91d      	cbnz	r5, 8006e68 <_strtod_l+0x188>
 8006e60:	9a04      	ldr	r2, [sp, #16]
 8006e62:	4302      	orrs	r2, r0
 8006e64:	d09e      	beq.n	8006da4 <_strtod_l+0xc4>
 8006e66:	2500      	movs	r5, #0
 8006e68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e6c:	f108 0201 	add.w	r2, r8, #1
 8006e70:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e76:	2a2b      	cmp	r2, #43	; 0x2b
 8006e78:	d075      	beq.n	8006f66 <_strtod_l+0x286>
 8006e7a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e7c:	d07b      	beq.n	8006f76 <_strtod_l+0x296>
 8006e7e:	f04f 0c00 	mov.w	ip, #0
 8006e82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e86:	2909      	cmp	r1, #9
 8006e88:	f240 8082 	bls.w	8006f90 <_strtod_l+0x2b0>
 8006e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e90:	2600      	movs	r6, #0
 8006e92:	e09d      	b.n	8006fd0 <_strtod_l+0x2f0>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e7c4      	b.n	8006e22 <_strtod_l+0x142>
 8006e98:	2f08      	cmp	r7, #8
 8006e9a:	bfd8      	it	le
 8006e9c:	9907      	ldrle	r1, [sp, #28]
 8006e9e:	f100 0001 	add.w	r0, r0, #1
 8006ea2:	bfda      	itte	le
 8006ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ea8:	9307      	strle	r3, [sp, #28]
 8006eaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006eae:	3701      	adds	r7, #1
 8006eb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eb2:	e7bf      	b.n	8006e34 <_strtod_l+0x154>
 8006eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eb6:	195a      	adds	r2, r3, r5
 8006eb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eba:	5d5a      	ldrb	r2, [r3, r5]
 8006ebc:	2f00      	cmp	r7, #0
 8006ebe:	d037      	beq.n	8006f30 <_strtod_l+0x250>
 8006ec0:	9005      	str	r0, [sp, #20]
 8006ec2:	463d      	mov	r5, r7
 8006ec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d912      	bls.n	8006ef2 <_strtod_l+0x212>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e7c2      	b.n	8006e56 <_strtod_l+0x176>
 8006ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ed6:	785a      	ldrb	r2, [r3, #1]
 8006ed8:	3001      	adds	r0, #1
 8006eda:	2a30      	cmp	r2, #48	; 0x30
 8006edc:	d0f8      	beq.n	8006ed0 <_strtod_l+0x1f0>
 8006ede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	f200 84d9 	bhi.w	800789a <_strtod_l+0xbba>
 8006ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eea:	9005      	str	r0, [sp, #20]
 8006eec:	2000      	movs	r0, #0
 8006eee:	9308      	str	r3, [sp, #32]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	3a30      	subs	r2, #48	; 0x30
 8006ef4:	f100 0301 	add.w	r3, r0, #1
 8006ef8:	d014      	beq.n	8006f24 <_strtod_l+0x244>
 8006efa:	9905      	ldr	r1, [sp, #20]
 8006efc:	4419      	add	r1, r3
 8006efe:	9105      	str	r1, [sp, #20]
 8006f00:	462b      	mov	r3, r5
 8006f02:	eb00 0e05 	add.w	lr, r0, r5
 8006f06:	210a      	movs	r1, #10
 8006f08:	4573      	cmp	r3, lr
 8006f0a:	d113      	bne.n	8006f34 <_strtod_l+0x254>
 8006f0c:	182b      	adds	r3, r5, r0
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	f105 0501 	add.w	r5, r5, #1
 8006f14:	4405      	add	r5, r0
 8006f16:	dc1c      	bgt.n	8006f52 <_strtod_l+0x272>
 8006f18:	9907      	ldr	r1, [sp, #28]
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f26:	1c51      	adds	r1, r2, #1
 8006f28:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f2a:	7852      	ldrb	r2, [r2, #1]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	e7c9      	b.n	8006ec4 <_strtod_l+0x1e4>
 8006f30:	4638      	mov	r0, r7
 8006f32:	e7d2      	b.n	8006eda <_strtod_l+0x1fa>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	dc04      	bgt.n	8006f42 <_strtod_l+0x262>
 8006f38:	9e07      	ldr	r6, [sp, #28]
 8006f3a:	434e      	muls	r6, r1
 8006f3c:	9607      	str	r6, [sp, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	e7e2      	b.n	8006f08 <_strtod_l+0x228>
 8006f42:	f103 0c01 	add.w	ip, r3, #1
 8006f46:	f1bc 0f10 	cmp.w	ip, #16
 8006f4a:	bfd8      	it	le
 8006f4c:	fb01 f909 	mulle.w	r9, r1, r9
 8006f50:	e7f5      	b.n	8006f3e <_strtod_l+0x25e>
 8006f52:	2d10      	cmp	r5, #16
 8006f54:	bfdc      	itt	le
 8006f56:	230a      	movle	r3, #10
 8006f58:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f5c:	e7e1      	b.n	8006f22 <_strtod_l+0x242>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	2301      	movs	r3, #1
 8006f64:	e77c      	b.n	8006e60 <_strtod_l+0x180>
 8006f66:	f04f 0c00 	mov.w	ip, #0
 8006f6a:	f108 0202 	add.w	r2, r8, #2
 8006f6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f74:	e785      	b.n	8006e82 <_strtod_l+0x1a2>
 8006f76:	f04f 0c01 	mov.w	ip, #1
 8006f7a:	e7f6      	b.n	8006f6a <_strtod_l+0x28a>
 8006f7c:	0800be50 	.word	0x0800be50
 8006f80:	0800bc08 	.word	0x0800bc08
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f8a:	1c51      	adds	r1, r2, #1
 8006f8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f8e:	7852      	ldrb	r2, [r2, #1]
 8006f90:	2a30      	cmp	r2, #48	; 0x30
 8006f92:	d0f9      	beq.n	8006f88 <_strtod_l+0x2a8>
 8006f94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f98:	2908      	cmp	r1, #8
 8006f9a:	f63f af79 	bhi.w	8006e90 <_strtod_l+0x1b0>
 8006f9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa4:	9206      	str	r2, [sp, #24]
 8006fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa8:	1c51      	adds	r1, r2, #1
 8006faa:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fac:	7852      	ldrb	r2, [r2, #1]
 8006fae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fb2:	2e09      	cmp	r6, #9
 8006fb4:	d937      	bls.n	8007026 <_strtod_l+0x346>
 8006fb6:	9e06      	ldr	r6, [sp, #24]
 8006fb8:	1b89      	subs	r1, r1, r6
 8006fba:	2908      	cmp	r1, #8
 8006fbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fc0:	dc02      	bgt.n	8006fc8 <_strtod_l+0x2e8>
 8006fc2:	4576      	cmp	r6, lr
 8006fc4:	bfa8      	it	ge
 8006fc6:	4676      	movge	r6, lr
 8006fc8:	f1bc 0f00 	cmp.w	ip, #0
 8006fcc:	d000      	beq.n	8006fd0 <_strtod_l+0x2f0>
 8006fce:	4276      	negs	r6, r6
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	d14d      	bne.n	8007070 <_strtod_l+0x390>
 8006fd4:	9904      	ldr	r1, [sp, #16]
 8006fd6:	4301      	orrs	r1, r0
 8006fd8:	f47f aec6 	bne.w	8006d68 <_strtod_l+0x88>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f aee1 	bne.w	8006da4 <_strtod_l+0xc4>
 8006fe2:	2a69      	cmp	r2, #105	; 0x69
 8006fe4:	d027      	beq.n	8007036 <_strtod_l+0x356>
 8006fe6:	dc24      	bgt.n	8007032 <_strtod_l+0x352>
 8006fe8:	2a49      	cmp	r2, #73	; 0x49
 8006fea:	d024      	beq.n	8007036 <_strtod_l+0x356>
 8006fec:	2a4e      	cmp	r2, #78	; 0x4e
 8006fee:	f47f aed9 	bne.w	8006da4 <_strtod_l+0xc4>
 8006ff2:	499f      	ldr	r1, [pc, #636]	; (8007270 <_strtod_l+0x590>)
 8006ff4:	a817      	add	r0, sp, #92	; 0x5c
 8006ff6:	f001 fe3d 	bl	8008c74 <__match>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f aed2 	beq.w	8006da4 <_strtod_l+0xc4>
 8007000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b28      	cmp	r3, #40	; 0x28
 8007006:	d12d      	bne.n	8007064 <_strtod_l+0x384>
 8007008:	499a      	ldr	r1, [pc, #616]	; (8007274 <_strtod_l+0x594>)
 800700a:	aa1a      	add	r2, sp, #104	; 0x68
 800700c:	a817      	add	r0, sp, #92	; 0x5c
 800700e:	f001 fe45 	bl	8008c9c <__hexnan>
 8007012:	2805      	cmp	r0, #5
 8007014:	d126      	bne.n	8007064 <_strtod_l+0x384>
 8007016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800701c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007024:	e6a0      	b.n	8006d68 <_strtod_l+0x88>
 8007026:	210a      	movs	r1, #10
 8007028:	fb01 2e0e 	mla	lr, r1, lr, r2
 800702c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007030:	e7b9      	b.n	8006fa6 <_strtod_l+0x2c6>
 8007032:	2a6e      	cmp	r2, #110	; 0x6e
 8007034:	e7db      	b.n	8006fee <_strtod_l+0x30e>
 8007036:	4990      	ldr	r1, [pc, #576]	; (8007278 <_strtod_l+0x598>)
 8007038:	a817      	add	r0, sp, #92	; 0x5c
 800703a:	f001 fe1b 	bl	8008c74 <__match>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f aeb0 	beq.w	8006da4 <_strtod_l+0xc4>
 8007044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007046:	498d      	ldr	r1, [pc, #564]	; (800727c <_strtod_l+0x59c>)
 8007048:	3b01      	subs	r3, #1
 800704a:	a817      	add	r0, sp, #92	; 0x5c
 800704c:	9317      	str	r3, [sp, #92]	; 0x5c
 800704e:	f001 fe11 	bl	8008c74 <__match>
 8007052:	b910      	cbnz	r0, 800705a <_strtod_l+0x37a>
 8007054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007056:	3301      	adds	r3, #1
 8007058:	9317      	str	r3, [sp, #92]	; 0x5c
 800705a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800728c <_strtod_l+0x5ac>
 800705e:	f04f 0a00 	mov.w	sl, #0
 8007062:	e681      	b.n	8006d68 <_strtod_l+0x88>
 8007064:	4886      	ldr	r0, [pc, #536]	; (8007280 <_strtod_l+0x5a0>)
 8007066:	f002 fde7 	bl	8009c38 <nan>
 800706a:	ec5b ab10 	vmov	sl, fp, d0
 800706e:	e67b      	b.n	8006d68 <_strtod_l+0x88>
 8007070:	9b05      	ldr	r3, [sp, #20]
 8007072:	9807      	ldr	r0, [sp, #28]
 8007074:	1af3      	subs	r3, r6, r3
 8007076:	2f00      	cmp	r7, #0
 8007078:	bf08      	it	eq
 800707a:	462f      	moveq	r7, r5
 800707c:	2d10      	cmp	r5, #16
 800707e:	9306      	str	r3, [sp, #24]
 8007080:	46a8      	mov	r8, r5
 8007082:	bfa8      	it	ge
 8007084:	f04f 0810 	movge.w	r8, #16
 8007088:	f7f9 fa5c 	bl	8000544 <__aeabi_ui2d>
 800708c:	2d09      	cmp	r5, #9
 800708e:	4682      	mov	sl, r0
 8007090:	468b      	mov	fp, r1
 8007092:	dd13      	ble.n	80070bc <_strtod_l+0x3dc>
 8007094:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <_strtod_l+0x5a4>)
 8007096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800709a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800709e:	f7f9 facb 	bl	8000638 <__aeabi_dmul>
 80070a2:	4682      	mov	sl, r0
 80070a4:	4648      	mov	r0, r9
 80070a6:	468b      	mov	fp, r1
 80070a8:	f7f9 fa4c 	bl	8000544 <__aeabi_ui2d>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	f7f9 f90a 	bl	80002cc <__adddf3>
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	2d0f      	cmp	r5, #15
 80070be:	dc38      	bgt.n	8007132 <_strtod_l+0x452>
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f43f ae50 	beq.w	8006d68 <_strtod_l+0x88>
 80070c8:	dd24      	ble.n	8007114 <_strtod_l+0x434>
 80070ca:	2b16      	cmp	r3, #22
 80070cc:	dc0b      	bgt.n	80070e6 <_strtod_l+0x406>
 80070ce:	496d      	ldr	r1, [pc, #436]	; (8007284 <_strtod_l+0x5a4>)
 80070d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	f7f9 faac 	bl	8000638 <__aeabi_dmul>
 80070e0:	4682      	mov	sl, r0
 80070e2:	468b      	mov	fp, r1
 80070e4:	e640      	b.n	8006d68 <_strtod_l+0x88>
 80070e6:	9a06      	ldr	r2, [sp, #24]
 80070e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070ec:	4293      	cmp	r3, r2
 80070ee:	db20      	blt.n	8007132 <_strtod_l+0x452>
 80070f0:	4c64      	ldr	r4, [pc, #400]	; (8007284 <_strtod_l+0x5a4>)
 80070f2:	f1c5 050f 	rsb	r5, r5, #15
 80070f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80070fa:	4652      	mov	r2, sl
 80070fc:	465b      	mov	r3, fp
 80070fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007102:	f7f9 fa99 	bl	8000638 <__aeabi_dmul>
 8007106:	9b06      	ldr	r3, [sp, #24]
 8007108:	1b5d      	subs	r5, r3, r5
 800710a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800710e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007112:	e7e3      	b.n	80070dc <_strtod_l+0x3fc>
 8007114:	9b06      	ldr	r3, [sp, #24]
 8007116:	3316      	adds	r3, #22
 8007118:	db0b      	blt.n	8007132 <_strtod_l+0x452>
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	1b9e      	subs	r6, r3, r6
 800711e:	4b59      	ldr	r3, [pc, #356]	; (8007284 <_strtod_l+0x5a4>)
 8007120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	f7f9 fbae 	bl	800088c <__aeabi_ddiv>
 8007130:	e7d6      	b.n	80070e0 <_strtod_l+0x400>
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	eba5 0808 	sub.w	r8, r5, r8
 8007138:	4498      	add	r8, r3
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	dd74      	ble.n	800722a <_strtod_l+0x54a>
 8007140:	f018 030f 	ands.w	r3, r8, #15
 8007144:	d00a      	beq.n	800715c <_strtod_l+0x47c>
 8007146:	494f      	ldr	r1, [pc, #316]	; (8007284 <_strtod_l+0x5a4>)
 8007148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800714c:	4652      	mov	r2, sl
 800714e:	465b      	mov	r3, fp
 8007150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007154:	f7f9 fa70 	bl	8000638 <__aeabi_dmul>
 8007158:	4682      	mov	sl, r0
 800715a:	468b      	mov	fp, r1
 800715c:	f038 080f 	bics.w	r8, r8, #15
 8007160:	d04f      	beq.n	8007202 <_strtod_l+0x522>
 8007162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007166:	dd22      	ble.n	80071ae <_strtod_l+0x4ce>
 8007168:	2500      	movs	r5, #0
 800716a:	462e      	mov	r6, r5
 800716c:	9507      	str	r5, [sp, #28]
 800716e:	9505      	str	r5, [sp, #20]
 8007170:	2322      	movs	r3, #34	; 0x22
 8007172:	f8df b118 	ldr.w	fp, [pc, #280]	; 800728c <_strtod_l+0x5ac>
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f43f adf2 	beq.w	8006d68 <_strtod_l+0x88>
 8007184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007186:	4620      	mov	r0, r4
 8007188:	f001 fe82 	bl	8008e90 <_Bfree>
 800718c:	9905      	ldr	r1, [sp, #20]
 800718e:	4620      	mov	r0, r4
 8007190:	f001 fe7e 	bl	8008e90 <_Bfree>
 8007194:	4631      	mov	r1, r6
 8007196:	4620      	mov	r0, r4
 8007198:	f001 fe7a 	bl	8008e90 <_Bfree>
 800719c:	9907      	ldr	r1, [sp, #28]
 800719e:	4620      	mov	r0, r4
 80071a0:	f001 fe76 	bl	8008e90 <_Bfree>
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe72 	bl	8008e90 <_Bfree>
 80071ac:	e5dc      	b.n	8006d68 <_strtod_l+0x88>
 80071ae:	4b36      	ldr	r3, [pc, #216]	; (8007288 <_strtod_l+0x5a8>)
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	2300      	movs	r3, #0
 80071b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071b8:	4650      	mov	r0, sl
 80071ba:	4659      	mov	r1, fp
 80071bc:	4699      	mov	r9, r3
 80071be:	f1b8 0f01 	cmp.w	r8, #1
 80071c2:	dc21      	bgt.n	8007208 <_strtod_l+0x528>
 80071c4:	b10b      	cbz	r3, 80071ca <_strtod_l+0x4ea>
 80071c6:	4682      	mov	sl, r0
 80071c8:	468b      	mov	fp, r1
 80071ca:	4b2f      	ldr	r3, [pc, #188]	; (8007288 <_strtod_l+0x5a8>)
 80071cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071d4:	4652      	mov	r2, sl
 80071d6:	465b      	mov	r3, fp
 80071d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071dc:	f7f9 fa2c 	bl	8000638 <__aeabi_dmul>
 80071e0:	4b2a      	ldr	r3, [pc, #168]	; (800728c <_strtod_l+0x5ac>)
 80071e2:	460a      	mov	r2, r1
 80071e4:	400b      	ands	r3, r1
 80071e6:	492a      	ldr	r1, [pc, #168]	; (8007290 <_strtod_l+0x5b0>)
 80071e8:	428b      	cmp	r3, r1
 80071ea:	4682      	mov	sl, r0
 80071ec:	d8bc      	bhi.n	8007168 <_strtod_l+0x488>
 80071ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071f2:	428b      	cmp	r3, r1
 80071f4:	bf86      	itte	hi
 80071f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007294 <_strtod_l+0x5b4>
 80071fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80071fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007202:	2300      	movs	r3, #0
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	e084      	b.n	8007312 <_strtod_l+0x632>
 8007208:	f018 0f01 	tst.w	r8, #1
 800720c:	d005      	beq.n	800721a <_strtod_l+0x53a>
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f9 fa10 	bl	8000638 <__aeabi_dmul>
 8007218:	2301      	movs	r3, #1
 800721a:	9a04      	ldr	r2, [sp, #16]
 800721c:	3208      	adds	r2, #8
 800721e:	f109 0901 	add.w	r9, r9, #1
 8007222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007226:	9204      	str	r2, [sp, #16]
 8007228:	e7c9      	b.n	80071be <_strtod_l+0x4de>
 800722a:	d0ea      	beq.n	8007202 <_strtod_l+0x522>
 800722c:	f1c8 0800 	rsb	r8, r8, #0
 8007230:	f018 020f 	ands.w	r2, r8, #15
 8007234:	d00a      	beq.n	800724c <_strtod_l+0x56c>
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <_strtod_l+0x5a4>)
 8007238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723c:	4650      	mov	r0, sl
 800723e:	4659      	mov	r1, fp
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 fb22 	bl	800088c <__aeabi_ddiv>
 8007248:	4682      	mov	sl, r0
 800724a:	468b      	mov	fp, r1
 800724c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007250:	d0d7      	beq.n	8007202 <_strtod_l+0x522>
 8007252:	f1b8 0f1f 	cmp.w	r8, #31
 8007256:	dd1f      	ble.n	8007298 <_strtod_l+0x5b8>
 8007258:	2500      	movs	r5, #0
 800725a:	462e      	mov	r6, r5
 800725c:	9507      	str	r5, [sp, #28]
 800725e:	9505      	str	r5, [sp, #20]
 8007260:	2322      	movs	r3, #34	; 0x22
 8007262:	f04f 0a00 	mov.w	sl, #0
 8007266:	f04f 0b00 	mov.w	fp, #0
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e786      	b.n	800717c <_strtod_l+0x49c>
 800726e:	bf00      	nop
 8007270:	0800bbd9 	.word	0x0800bbd9
 8007274:	0800bc1c 	.word	0x0800bc1c
 8007278:	0800bbd1 	.word	0x0800bbd1
 800727c:	0800bd5c 	.word	0x0800bd5c
 8007280:	0800c008 	.word	0x0800c008
 8007284:	0800bee8 	.word	0x0800bee8
 8007288:	0800bec0 	.word	0x0800bec0
 800728c:	7ff00000 	.word	0x7ff00000
 8007290:	7ca00000 	.word	0x7ca00000
 8007294:	7fefffff 	.word	0x7fefffff
 8007298:	f018 0310 	ands.w	r3, r8, #16
 800729c:	bf18      	it	ne
 800729e:	236a      	movne	r3, #106	; 0x6a
 80072a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007650 <_strtod_l+0x970>
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	4650      	mov	r0, sl
 80072a8:	4659      	mov	r1, fp
 80072aa:	2300      	movs	r3, #0
 80072ac:	f018 0f01 	tst.w	r8, #1
 80072b0:	d004      	beq.n	80072bc <_strtod_l+0x5dc>
 80072b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072b6:	f7f9 f9bf 	bl	8000638 <__aeabi_dmul>
 80072ba:	2301      	movs	r3, #1
 80072bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072c0:	f109 0908 	add.w	r9, r9, #8
 80072c4:	d1f2      	bne.n	80072ac <_strtod_l+0x5cc>
 80072c6:	b10b      	cbz	r3, 80072cc <_strtod_l+0x5ec>
 80072c8:	4682      	mov	sl, r0
 80072ca:	468b      	mov	fp, r1
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	b1c3      	cbz	r3, 8007302 <_strtod_l+0x622>
 80072d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072d8:	2b00      	cmp	r3, #0
 80072da:	4659      	mov	r1, fp
 80072dc:	dd11      	ble.n	8007302 <_strtod_l+0x622>
 80072de:	2b1f      	cmp	r3, #31
 80072e0:	f340 8124 	ble.w	800752c <_strtod_l+0x84c>
 80072e4:	2b34      	cmp	r3, #52	; 0x34
 80072e6:	bfde      	ittt	le
 80072e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295
 80072f0:	fa03 f202 	lslle.w	r2, r3, r2
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	bfcc      	ite	gt
 80072fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80072fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4650      	mov	r0, sl
 8007308:	4659      	mov	r1, fp
 800730a:	f7f9 fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800730e:	2800      	cmp	r0, #0
 8007310:	d1a2      	bne.n	8007258 <_strtod_l+0x578>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	9908      	ldr	r1, [sp, #32]
 8007318:	462b      	mov	r3, r5
 800731a:	463a      	mov	r2, r7
 800731c:	4620      	mov	r0, r4
 800731e:	f001 fe1f 	bl	8008f60 <__s2b>
 8007322:	9007      	str	r0, [sp, #28]
 8007324:	2800      	cmp	r0, #0
 8007326:	f43f af1f 	beq.w	8007168 <_strtod_l+0x488>
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	1b9e      	subs	r6, r3, r6
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	bfb4      	ite	lt
 8007334:	4633      	movlt	r3, r6
 8007336:	2300      	movge	r3, #0
 8007338:	930c      	str	r3, [sp, #48]	; 0x30
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	2500      	movs	r5, #0
 800733e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007342:	9312      	str	r3, [sp, #72]	; 0x48
 8007344:	462e      	mov	r6, r5
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	4620      	mov	r0, r4
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f001 fd60 	bl	8008e10 <_Balloc>
 8007350:	9005      	str	r0, [sp, #20]
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f af0c 	beq.w	8007170 <_strtod_l+0x490>
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	3202      	adds	r2, #2
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	0092      	lsls	r2, r2, #2
 8007364:	300c      	adds	r0, #12
 8007366:	f7fe fde9 	bl	8005f3c <memcpy>
 800736a:	ec4b ab10 	vmov	d0, sl, fp
 800736e:	aa1a      	add	r2, sp, #104	; 0x68
 8007370:	a919      	add	r1, sp, #100	; 0x64
 8007372:	4620      	mov	r0, r4
 8007374:	f002 f93a 	bl	80095ec <__d2b>
 8007378:	ec4b ab18 	vmov	d8, sl, fp
 800737c:	9018      	str	r0, [sp, #96]	; 0x60
 800737e:	2800      	cmp	r0, #0
 8007380:	f43f aef6 	beq.w	8007170 <_strtod_l+0x490>
 8007384:	2101      	movs	r1, #1
 8007386:	4620      	mov	r0, r4
 8007388:	f001 fe84 	bl	8009094 <__i2b>
 800738c:	4606      	mov	r6, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aeee 	beq.w	8007170 <_strtod_l+0x490>
 8007394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007396:	9904      	ldr	r1, [sp, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfab      	itete	ge
 800739c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800739e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073a6:	bfac      	ite	ge
 80073a8:	eb03 0902 	addge.w	r9, r3, r2
 80073ac:	1ad7      	sublt	r7, r2, r3
 80073ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073b0:	eba3 0801 	sub.w	r8, r3, r1
 80073b4:	4490      	add	r8, r2
 80073b6:	4ba1      	ldr	r3, [pc, #644]	; (800763c <_strtod_l+0x95c>)
 80073b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80073bc:	4598      	cmp	r8, r3
 80073be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073c2:	f280 80c7 	bge.w	8007554 <_strtod_l+0x874>
 80073c6:	eba3 0308 	sub.w	r3, r3, r8
 80073ca:	2b1f      	cmp	r3, #31
 80073cc:	eba2 0203 	sub.w	r2, r2, r3
 80073d0:	f04f 0101 	mov.w	r1, #1
 80073d4:	f300 80b1 	bgt.w	800753a <_strtod_l+0x85a>
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	930d      	str	r3, [sp, #52]	; 0x34
 80073de:	2300      	movs	r3, #0
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	eb09 0802 	add.w	r8, r9, r2
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	45c1      	cmp	r9, r8
 80073ea:	4417      	add	r7, r2
 80073ec:	441f      	add	r7, r3
 80073ee:	464b      	mov	r3, r9
 80073f0:	bfa8      	it	ge
 80073f2:	4643      	movge	r3, r8
 80073f4:	42bb      	cmp	r3, r7
 80073f6:	bfa8      	it	ge
 80073f8:	463b      	movge	r3, r7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfc2      	ittt	gt
 80073fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007402:	1aff      	subgt	r7, r7, r3
 8007404:	eba9 0903 	subgt.w	r9, r9, r3
 8007408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd17      	ble.n	800743e <_strtod_l+0x75e>
 800740e:	4631      	mov	r1, r6
 8007410:	461a      	mov	r2, r3
 8007412:	4620      	mov	r0, r4
 8007414:	f001 fefe 	bl	8009214 <__pow5mult>
 8007418:	4606      	mov	r6, r0
 800741a:	2800      	cmp	r0, #0
 800741c:	f43f aea8 	beq.w	8007170 <_strtod_l+0x490>
 8007420:	4601      	mov	r1, r0
 8007422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007424:	4620      	mov	r0, r4
 8007426:	f001 fe4b 	bl	80090c0 <__multiply>
 800742a:	900b      	str	r0, [sp, #44]	; 0x2c
 800742c:	2800      	cmp	r0, #0
 800742e:	f43f ae9f 	beq.w	8007170 <_strtod_l+0x490>
 8007432:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007434:	4620      	mov	r0, r4
 8007436:	f001 fd2b 	bl	8008e90 <_Bfree>
 800743a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800743c:	9318      	str	r3, [sp, #96]	; 0x60
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	f300 808c 	bgt.w	800755e <_strtod_l+0x87e>
 8007446:	9b06      	ldr	r3, [sp, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd08      	ble.n	800745e <_strtod_l+0x77e>
 800744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800744e:	9905      	ldr	r1, [sp, #20]
 8007450:	4620      	mov	r0, r4
 8007452:	f001 fedf 	bl	8009214 <__pow5mult>
 8007456:	9005      	str	r0, [sp, #20]
 8007458:	2800      	cmp	r0, #0
 800745a:	f43f ae89 	beq.w	8007170 <_strtod_l+0x490>
 800745e:	2f00      	cmp	r7, #0
 8007460:	dd08      	ble.n	8007474 <_strtod_l+0x794>
 8007462:	9905      	ldr	r1, [sp, #20]
 8007464:	463a      	mov	r2, r7
 8007466:	4620      	mov	r0, r4
 8007468:	f001 ff2e 	bl	80092c8 <__lshift>
 800746c:	9005      	str	r0, [sp, #20]
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f ae7e 	beq.w	8007170 <_strtod_l+0x490>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	dd08      	ble.n	800748c <_strtod_l+0x7ac>
 800747a:	4631      	mov	r1, r6
 800747c:	464a      	mov	r2, r9
 800747e:	4620      	mov	r0, r4
 8007480:	f001 ff22 	bl	80092c8 <__lshift>
 8007484:	4606      	mov	r6, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f ae72 	beq.w	8007170 <_strtod_l+0x490>
 800748c:	9a05      	ldr	r2, [sp, #20]
 800748e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007490:	4620      	mov	r0, r4
 8007492:	f001 ffa5 	bl	80093e0 <__mdiff>
 8007496:	4605      	mov	r5, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	f43f ae69 	beq.w	8007170 <_strtod_l+0x490>
 800749e:	68c3      	ldr	r3, [r0, #12]
 80074a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a2:	2300      	movs	r3, #0
 80074a4:	60c3      	str	r3, [r0, #12]
 80074a6:	4631      	mov	r1, r6
 80074a8:	f001 ff7e 	bl	80093a8 <__mcmp>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	da60      	bge.n	8007572 <_strtod_l+0x892>
 80074b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b2:	ea53 030a 	orrs.w	r3, r3, sl
 80074b6:	f040 8082 	bne.w	80075be <_strtod_l+0x8de>
 80074ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d17d      	bne.n	80075be <_strtod_l+0x8de>
 80074c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074c6:	0d1b      	lsrs	r3, r3, #20
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ce:	d976      	bls.n	80075be <_strtod_l+0x8de>
 80074d0:	696b      	ldr	r3, [r5, #20]
 80074d2:	b913      	cbnz	r3, 80074da <_strtod_l+0x7fa>
 80074d4:	692b      	ldr	r3, [r5, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	dd71      	ble.n	80075be <_strtod_l+0x8de>
 80074da:	4629      	mov	r1, r5
 80074dc:	2201      	movs	r2, #1
 80074de:	4620      	mov	r0, r4
 80074e0:	f001 fef2 	bl	80092c8 <__lshift>
 80074e4:	4631      	mov	r1, r6
 80074e6:	4605      	mov	r5, r0
 80074e8:	f001 ff5e 	bl	80093a8 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dd66      	ble.n	80075be <_strtod_l+0x8de>
 80074f0:	9904      	ldr	r1, [sp, #16]
 80074f2:	4a53      	ldr	r2, [pc, #332]	; (8007640 <_strtod_l+0x960>)
 80074f4:	465b      	mov	r3, fp
 80074f6:	2900      	cmp	r1, #0
 80074f8:	f000 8081 	beq.w	80075fe <_strtod_l+0x91e>
 80074fc:	ea02 010b 	and.w	r1, r2, fp
 8007500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007504:	dc7b      	bgt.n	80075fe <_strtod_l+0x91e>
 8007506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800750a:	f77f aea9 	ble.w	8007260 <_strtod_l+0x580>
 800750e:	4b4d      	ldr	r3, [pc, #308]	; (8007644 <_strtod_l+0x964>)
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	2200      	movs	r2, #0
 8007516:	f7f9 f88f 	bl	8000638 <__aeabi_dmul>
 800751a:	460b      	mov	r3, r1
 800751c:	4303      	orrs	r3, r0
 800751e:	bf08      	it	eq
 8007520:	2322      	moveq	r3, #34	; 0x22
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	bf08      	it	eq
 8007528:	6023      	streq	r3, [r4, #0]
 800752a:	e62b      	b.n	8007184 <_strtod_l+0x4a4>
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	ea03 0a0a 	and.w	sl, r3, sl
 8007538:	e6e3      	b.n	8007302 <_strtod_l+0x622>
 800753a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800753e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800754a:	fa01 f308 	lsl.w	r3, r1, r8
 800754e:	9308      	str	r3, [sp, #32]
 8007550:	910d      	str	r1, [sp, #52]	; 0x34
 8007552:	e746      	b.n	80073e2 <_strtod_l+0x702>
 8007554:	2300      	movs	r3, #0
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	2301      	movs	r3, #1
 800755a:	930d      	str	r3, [sp, #52]	; 0x34
 800755c:	e741      	b.n	80073e2 <_strtod_l+0x702>
 800755e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007560:	4642      	mov	r2, r8
 8007562:	4620      	mov	r0, r4
 8007564:	f001 feb0 	bl	80092c8 <__lshift>
 8007568:	9018      	str	r0, [sp, #96]	; 0x60
 800756a:	2800      	cmp	r0, #0
 800756c:	f47f af6b 	bne.w	8007446 <_strtod_l+0x766>
 8007570:	e5fe      	b.n	8007170 <_strtod_l+0x490>
 8007572:	465f      	mov	r7, fp
 8007574:	d16e      	bne.n	8007654 <_strtod_l+0x974>
 8007576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800757c:	b342      	cbz	r2, 80075d0 <_strtod_l+0x8f0>
 800757e:	4a32      	ldr	r2, [pc, #200]	; (8007648 <_strtod_l+0x968>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d128      	bne.n	80075d6 <_strtod_l+0x8f6>
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	4651      	mov	r1, sl
 8007588:	b1eb      	cbz	r3, 80075c6 <_strtod_l+0x8e6>
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <_strtod_l+0x960>)
 800758c:	403b      	ands	r3, r7
 800758e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007592:	f04f 32ff 	mov.w	r2, #4294967295
 8007596:	d819      	bhi.n	80075cc <_strtod_l+0x8ec>
 8007598:	0d1b      	lsrs	r3, r3, #20
 800759a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	4299      	cmp	r1, r3
 80075a4:	d117      	bne.n	80075d6 <_strtod_l+0x8f6>
 80075a6:	4b29      	ldr	r3, [pc, #164]	; (800764c <_strtod_l+0x96c>)
 80075a8:	429f      	cmp	r7, r3
 80075aa:	d102      	bne.n	80075b2 <_strtod_l+0x8d2>
 80075ac:	3101      	adds	r1, #1
 80075ae:	f43f addf 	beq.w	8007170 <_strtod_l+0x490>
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <_strtod_l+0x960>)
 80075b4:	403b      	ands	r3, r7
 80075b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075ba:	f04f 0a00 	mov.w	sl, #0
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1a4      	bne.n	800750e <_strtod_l+0x82e>
 80075c4:	e5de      	b.n	8007184 <_strtod_l+0x4a4>
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ca:	e7ea      	b.n	80075a2 <_strtod_l+0x8c2>
 80075cc:	4613      	mov	r3, r2
 80075ce:	e7e8      	b.n	80075a2 <_strtod_l+0x8c2>
 80075d0:	ea53 030a 	orrs.w	r3, r3, sl
 80075d4:	d08c      	beq.n	80074f0 <_strtod_l+0x810>
 80075d6:	9b08      	ldr	r3, [sp, #32]
 80075d8:	b1db      	cbz	r3, 8007612 <_strtod_l+0x932>
 80075da:	423b      	tst	r3, r7
 80075dc:	d0ef      	beq.n	80075be <_strtod_l+0x8de>
 80075de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e0:	9a04      	ldr	r2, [sp, #16]
 80075e2:	4650      	mov	r0, sl
 80075e4:	4659      	mov	r1, fp
 80075e6:	b1c3      	cbz	r3, 800761a <_strtod_l+0x93a>
 80075e8:	f7ff fb5e 	bl	8006ca8 <sulp>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	ec51 0b18 	vmov	r0, r1, d8
 80075f4:	f7f8 fe6a 	bl	80002cc <__adddf3>
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	e7df      	b.n	80075be <_strtod_l+0x8de>
 80075fe:	4013      	ands	r3, r2
 8007600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800760c:	f04f 3aff 	mov.w	sl, #4294967295
 8007610:	e7d5      	b.n	80075be <_strtod_l+0x8de>
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	ea13 0f0a 	tst.w	r3, sl
 8007618:	e7e0      	b.n	80075dc <_strtod_l+0x8fc>
 800761a:	f7ff fb45 	bl	8006ca8 <sulp>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	ec51 0b18 	vmov	r0, r1, d8
 8007626:	f7f8 fe4f 	bl	80002c8 <__aeabi_dsub>
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	4682      	mov	sl, r0
 8007630:	468b      	mov	fp, r1
 8007632:	f7f9 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8007636:	2800      	cmp	r0, #0
 8007638:	d0c1      	beq.n	80075be <_strtod_l+0x8de>
 800763a:	e611      	b.n	8007260 <_strtod_l+0x580>
 800763c:	fffffc02 	.word	0xfffffc02
 8007640:	7ff00000 	.word	0x7ff00000
 8007644:	39500000 	.word	0x39500000
 8007648:	000fffff 	.word	0x000fffff
 800764c:	7fefffff 	.word	0x7fefffff
 8007650:	0800bc30 	.word	0x0800bc30
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	f002 f824 	bl	80096a4 <__ratio>
 800765c:	ec59 8b10 	vmov	r8, r9, d0
 8007660:	ee10 0a10 	vmov	r0, s0
 8007664:	2200      	movs	r2, #0
 8007666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800766a:	4649      	mov	r1, r9
 800766c:	f7f9 fa60 	bl	8000b30 <__aeabi_dcmple>
 8007670:	2800      	cmp	r0, #0
 8007672:	d07a      	beq.n	800776a <_strtod_l+0xa8a>
 8007674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04a      	beq.n	8007710 <_strtod_l+0xa30>
 800767a:	4b95      	ldr	r3, [pc, #596]	; (80078d0 <_strtod_l+0xbf0>)
 800767c:	2200      	movs	r2, #0
 800767e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078d0 <_strtod_l+0xbf0>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	4b92      	ldr	r3, [pc, #584]	; (80078d4 <_strtod_l+0xbf4>)
 800768c:	403b      	ands	r3, r7
 800768e:	930d      	str	r3, [sp, #52]	; 0x34
 8007690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007692:	4b91      	ldr	r3, [pc, #580]	; (80078d8 <_strtod_l+0xbf8>)
 8007694:	429a      	cmp	r2, r3
 8007696:	f040 80b0 	bne.w	80077fa <_strtod_l+0xb1a>
 800769a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800769e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076a2:	ec4b ab10 	vmov	d0, sl, fp
 80076a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076aa:	f001 ff23 	bl	80094f4 <__ulp>
 80076ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076b2:	ec53 2b10 	vmov	r2, r3, d0
 80076b6:	f7f8 ffbf 	bl	8000638 <__aeabi_dmul>
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	f7f8 fe05 	bl	80002cc <__adddf3>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4983      	ldr	r1, [pc, #524]	; (80078d4 <_strtod_l+0xbf4>)
 80076c6:	4a85      	ldr	r2, [pc, #532]	; (80078dc <_strtod_l+0xbfc>)
 80076c8:	4019      	ands	r1, r3
 80076ca:	4291      	cmp	r1, r2
 80076cc:	4682      	mov	sl, r0
 80076ce:	d960      	bls.n	8007792 <_strtod_l+0xab2>
 80076d0:	ee18 3a90 	vmov	r3, s17
 80076d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076d8:	4293      	cmp	r3, r2
 80076da:	d104      	bne.n	80076e6 <_strtod_l+0xa06>
 80076dc:	ee18 3a10 	vmov	r3, s16
 80076e0:	3301      	adds	r3, #1
 80076e2:	f43f ad45 	beq.w	8007170 <_strtod_l+0x490>
 80076e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078e8 <_strtod_l+0xc08>
 80076ea:	f04f 3aff 	mov.w	sl, #4294967295
 80076ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 fbcd 	bl	8008e90 <_Bfree>
 80076f6:	9905      	ldr	r1, [sp, #20]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f001 fbc9 	bl	8008e90 <_Bfree>
 80076fe:	4631      	mov	r1, r6
 8007700:	4620      	mov	r0, r4
 8007702:	f001 fbc5 	bl	8008e90 <_Bfree>
 8007706:	4629      	mov	r1, r5
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fbc1 	bl	8008e90 <_Bfree>
 800770e:	e61a      	b.n	8007346 <_strtod_l+0x666>
 8007710:	f1ba 0f00 	cmp.w	sl, #0
 8007714:	d11b      	bne.n	800774e <_strtod_l+0xa6e>
 8007716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800771a:	b9f3      	cbnz	r3, 800775a <_strtod_l+0xa7a>
 800771c:	4b6c      	ldr	r3, [pc, #432]	; (80078d0 <_strtod_l+0xbf0>)
 800771e:	2200      	movs	r2, #0
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f9 f9fa 	bl	8000b1c <__aeabi_dcmplt>
 8007728:	b9d0      	cbnz	r0, 8007760 <_strtod_l+0xa80>
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	4b6c      	ldr	r3, [pc, #432]	; (80078e0 <_strtod_l+0xc00>)
 8007730:	2200      	movs	r2, #0
 8007732:	f7f8 ff81 	bl	8000638 <__aeabi_dmul>
 8007736:	4680      	mov	r8, r0
 8007738:	4689      	mov	r9, r1
 800773a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800773e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007742:	9315      	str	r3, [sp, #84]	; 0x54
 8007744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800774c:	e79d      	b.n	800768a <_strtod_l+0x9aa>
 800774e:	f1ba 0f01 	cmp.w	sl, #1
 8007752:	d102      	bne.n	800775a <_strtod_l+0xa7a>
 8007754:	2f00      	cmp	r7, #0
 8007756:	f43f ad83 	beq.w	8007260 <_strtod_l+0x580>
 800775a:	4b62      	ldr	r3, [pc, #392]	; (80078e4 <_strtod_l+0xc04>)
 800775c:	2200      	movs	r2, #0
 800775e:	e78e      	b.n	800767e <_strtod_l+0x99e>
 8007760:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078e0 <_strtod_l+0xc00>
 8007764:	f04f 0800 	mov.w	r8, #0
 8007768:	e7e7      	b.n	800773a <_strtod_l+0xa5a>
 800776a:	4b5d      	ldr	r3, [pc, #372]	; (80078e0 <_strtod_l+0xc00>)
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff61 	bl	8000638 <__aeabi_dmul>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	4680      	mov	r8, r0
 800777a:	4689      	mov	r9, r1
 800777c:	b933      	cbnz	r3, 800778c <_strtod_l+0xaac>
 800777e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007782:	900e      	str	r0, [sp, #56]	; 0x38
 8007784:	930f      	str	r3, [sp, #60]	; 0x3c
 8007786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800778a:	e7dd      	b.n	8007748 <_strtod_l+0xa68>
 800778c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007790:	e7f9      	b.n	8007786 <_strtod_l+0xaa6>
 8007792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1a8      	bne.n	80076ee <_strtod_l+0xa0e>
 800779c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077a2:	0d1b      	lsrs	r3, r3, #20
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d1a1      	bne.n	80076ee <_strtod_l+0xa0e>
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f9 faf3 	bl	8000d98 <__aeabi_d2lz>
 80077b2:	f7f8 ff13 	bl	80005dc <__aeabi_l2d>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f8 fd83 	bl	80002c8 <__aeabi_dsub>
 80077c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077c8:	ea43 030a 	orr.w	r3, r3, sl
 80077cc:	4313      	orrs	r3, r2
 80077ce:	4680      	mov	r8, r0
 80077d0:	4689      	mov	r9, r1
 80077d2:	d055      	beq.n	8007880 <_strtod_l+0xba0>
 80077d4:	a336      	add	r3, pc, #216	; (adr r3, 80078b0 <_strtod_l+0xbd0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f9 f99f 	bl	8000b1c <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f47f acd0 	bne.w	8007184 <_strtod_l+0x4a4>
 80077e4:	a334      	add	r3, pc, #208	; (adr r3, 80078b8 <_strtod_l+0xbd8>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f9 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f af7b 	beq.w	80076ee <_strtod_l+0xa0e>
 80077f8:	e4c4      	b.n	8007184 <_strtod_l+0x4a4>
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	b333      	cbz	r3, 800784c <_strtod_l+0xb6c>
 80077fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007804:	d822      	bhi.n	800784c <_strtod_l+0xb6c>
 8007806:	a32e      	add	r3, pc, #184	; (adr r3, 80078c0 <_strtod_l+0xbe0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f9 f98e 	bl	8000b30 <__aeabi_dcmple>
 8007814:	b1a0      	cbz	r0, 8007840 <_strtod_l+0xb60>
 8007816:	4649      	mov	r1, r9
 8007818:	4640      	mov	r0, r8
 800781a:	f7f9 f9e5 	bl	8000be8 <__aeabi_d2uiz>
 800781e:	2801      	cmp	r0, #1
 8007820:	bf38      	it	cc
 8007822:	2001      	movcc	r0, #1
 8007824:	f7f8 fe8e 	bl	8000544 <__aeabi_ui2d>
 8007828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782a:	4680      	mov	r8, r0
 800782c:	4689      	mov	r9, r1
 800782e:	bb23      	cbnz	r3, 800787a <_strtod_l+0xb9a>
 8007830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007834:	9010      	str	r0, [sp, #64]	; 0x40
 8007836:	9311      	str	r3, [sp, #68]	; 0x44
 8007838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800783c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	9309      	str	r3, [sp, #36]	; 0x24
 800784c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007850:	eeb0 0a48 	vmov.f32	s0, s16
 8007854:	eef0 0a68 	vmov.f32	s1, s17
 8007858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800785c:	f001 fe4a 	bl	80094f4 <__ulp>
 8007860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007864:	ec53 2b10 	vmov	r2, r3, d0
 8007868:	f7f8 fee6 	bl	8000638 <__aeabi_dmul>
 800786c:	ec53 2b18 	vmov	r2, r3, d8
 8007870:	f7f8 fd2c 	bl	80002cc <__adddf3>
 8007874:	4682      	mov	sl, r0
 8007876:	468b      	mov	fp, r1
 8007878:	e78d      	b.n	8007796 <_strtod_l+0xab6>
 800787a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800787e:	e7db      	b.n	8007838 <_strtod_l+0xb58>
 8007880:	a311      	add	r3, pc, #68	; (adr r3, 80078c8 <_strtod_l+0xbe8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f9 f949 	bl	8000b1c <__aeabi_dcmplt>
 800788a:	e7b2      	b.n	80077f2 <_strtod_l+0xb12>
 800788c:	2300      	movs	r3, #0
 800788e:	930a      	str	r3, [sp, #40]	; 0x28
 8007890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	f7ff ba6b 	b.w	8006d70 <_strtod_l+0x90>
 800789a:	2a65      	cmp	r2, #101	; 0x65
 800789c:	f43f ab5f 	beq.w	8006f5e <_strtod_l+0x27e>
 80078a0:	2a45      	cmp	r2, #69	; 0x45
 80078a2:	f43f ab5c 	beq.w	8006f5e <_strtod_l+0x27e>
 80078a6:	2301      	movs	r3, #1
 80078a8:	f7ff bb94 	b.w	8006fd4 <_strtod_l+0x2f4>
 80078ac:	f3af 8000 	nop.w
 80078b0:	94a03595 	.word	0x94a03595
 80078b4:	3fdfffff 	.word	0x3fdfffff
 80078b8:	35afe535 	.word	0x35afe535
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	ffc00000 	.word	0xffc00000
 80078c4:	41dfffff 	.word	0x41dfffff
 80078c8:	94a03595 	.word	0x94a03595
 80078cc:	3fcfffff 	.word	0x3fcfffff
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	7ff00000 	.word	0x7ff00000
 80078d8:	7fe00000 	.word	0x7fe00000
 80078dc:	7c9fffff 	.word	0x7c9fffff
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	bff00000 	.word	0xbff00000
 80078e8:	7fefffff 	.word	0x7fefffff

080078ec <_strtod_r>:
 80078ec:	4b01      	ldr	r3, [pc, #4]	; (80078f4 <_strtod_r+0x8>)
 80078ee:	f7ff b9f7 	b.w	8006ce0 <_strtod_l>
 80078f2:	bf00      	nop
 80078f4:	20000078 	.word	0x20000078

080078f8 <_strtol_l.constprop.0>:
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fe:	d001      	beq.n	8007904 <_strtol_l.constprop.0+0xc>
 8007900:	2b24      	cmp	r3, #36	; 0x24
 8007902:	d906      	bls.n	8007912 <_strtol_l.constprop.0+0x1a>
 8007904:	f7fe faf0 	bl	8005ee8 <__errno>
 8007908:	2316      	movs	r3, #22
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	2000      	movs	r0, #0
 800790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079f8 <_strtol_l.constprop.0+0x100>
 8007916:	460d      	mov	r5, r1
 8007918:	462e      	mov	r6, r5
 800791a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800791e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007922:	f017 0708 	ands.w	r7, r7, #8
 8007926:	d1f7      	bne.n	8007918 <_strtol_l.constprop.0+0x20>
 8007928:	2c2d      	cmp	r4, #45	; 0x2d
 800792a:	d132      	bne.n	8007992 <_strtol_l.constprop.0+0x9a>
 800792c:	782c      	ldrb	r4, [r5, #0]
 800792e:	2701      	movs	r7, #1
 8007930:	1cb5      	adds	r5, r6, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d05b      	beq.n	80079ee <_strtol_l.constprop.0+0xf6>
 8007936:	2b10      	cmp	r3, #16
 8007938:	d109      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 800793a:	2c30      	cmp	r4, #48	; 0x30
 800793c:	d107      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 800793e:	782c      	ldrb	r4, [r5, #0]
 8007940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007944:	2c58      	cmp	r4, #88	; 0x58
 8007946:	d14d      	bne.n	80079e4 <_strtol_l.constprop.0+0xec>
 8007948:	786c      	ldrb	r4, [r5, #1]
 800794a:	2310      	movs	r3, #16
 800794c:	3502      	adds	r5, #2
 800794e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007952:	f108 38ff 	add.w	r8, r8, #4294967295
 8007956:	f04f 0c00 	mov.w	ip, #0
 800795a:	fbb8 f9f3 	udiv	r9, r8, r3
 800795e:	4666      	mov	r6, ip
 8007960:	fb03 8a19 	mls	sl, r3, r9, r8
 8007964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007968:	f1be 0f09 	cmp.w	lr, #9
 800796c:	d816      	bhi.n	800799c <_strtol_l.constprop.0+0xa4>
 800796e:	4674      	mov	r4, lr
 8007970:	42a3      	cmp	r3, r4
 8007972:	dd24      	ble.n	80079be <_strtol_l.constprop.0+0xc6>
 8007974:	f1bc 0f00 	cmp.w	ip, #0
 8007978:	db1e      	blt.n	80079b8 <_strtol_l.constprop.0+0xc0>
 800797a:	45b1      	cmp	r9, r6
 800797c:	d31c      	bcc.n	80079b8 <_strtol_l.constprop.0+0xc0>
 800797e:	d101      	bne.n	8007984 <_strtol_l.constprop.0+0x8c>
 8007980:	45a2      	cmp	sl, r4
 8007982:	db19      	blt.n	80079b8 <_strtol_l.constprop.0+0xc0>
 8007984:	fb06 4603 	mla	r6, r6, r3, r4
 8007988:	f04f 0c01 	mov.w	ip, #1
 800798c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007990:	e7e8      	b.n	8007964 <_strtol_l.constprop.0+0x6c>
 8007992:	2c2b      	cmp	r4, #43	; 0x2b
 8007994:	bf04      	itt	eq
 8007996:	782c      	ldrbeq	r4, [r5, #0]
 8007998:	1cb5      	addeq	r5, r6, #2
 800799a:	e7ca      	b.n	8007932 <_strtol_l.constprop.0+0x3a>
 800799c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079a0:	f1be 0f19 	cmp.w	lr, #25
 80079a4:	d801      	bhi.n	80079aa <_strtol_l.constprop.0+0xb2>
 80079a6:	3c37      	subs	r4, #55	; 0x37
 80079a8:	e7e2      	b.n	8007970 <_strtol_l.constprop.0+0x78>
 80079aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079ae:	f1be 0f19 	cmp.w	lr, #25
 80079b2:	d804      	bhi.n	80079be <_strtol_l.constprop.0+0xc6>
 80079b4:	3c57      	subs	r4, #87	; 0x57
 80079b6:	e7db      	b.n	8007970 <_strtol_l.constprop.0+0x78>
 80079b8:	f04f 3cff 	mov.w	ip, #4294967295
 80079bc:	e7e6      	b.n	800798c <_strtol_l.constprop.0+0x94>
 80079be:	f1bc 0f00 	cmp.w	ip, #0
 80079c2:	da05      	bge.n	80079d0 <_strtol_l.constprop.0+0xd8>
 80079c4:	2322      	movs	r3, #34	; 0x22
 80079c6:	6003      	str	r3, [r0, #0]
 80079c8:	4646      	mov	r6, r8
 80079ca:	b942      	cbnz	r2, 80079de <_strtol_l.constprop.0+0xe6>
 80079cc:	4630      	mov	r0, r6
 80079ce:	e79e      	b.n	800790e <_strtol_l.constprop.0+0x16>
 80079d0:	b107      	cbz	r7, 80079d4 <_strtol_l.constprop.0+0xdc>
 80079d2:	4276      	negs	r6, r6
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	d0f9      	beq.n	80079cc <_strtol_l.constprop.0+0xd4>
 80079d8:	f1bc 0f00 	cmp.w	ip, #0
 80079dc:	d000      	beq.n	80079e0 <_strtol_l.constprop.0+0xe8>
 80079de:	1e69      	subs	r1, r5, #1
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7f3      	b.n	80079cc <_strtol_l.constprop.0+0xd4>
 80079e4:	2430      	movs	r4, #48	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1b1      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 80079ea:	2308      	movs	r3, #8
 80079ec:	e7af      	b.n	800794e <_strtol_l.constprop.0+0x56>
 80079ee:	2c30      	cmp	r4, #48	; 0x30
 80079f0:	d0a5      	beq.n	800793e <_strtol_l.constprop.0+0x46>
 80079f2:	230a      	movs	r3, #10
 80079f4:	e7ab      	b.n	800794e <_strtol_l.constprop.0+0x56>
 80079f6:	bf00      	nop
 80079f8:	0800bc59 	.word	0x0800bc59

080079fc <_strtol_r>:
 80079fc:	f7ff bf7c 	b.w	80078f8 <_strtol_l.constprop.0>

08007a00 <quorem>:
 8007a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	6903      	ldr	r3, [r0, #16]
 8007a06:	690c      	ldr	r4, [r1, #16]
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	f2c0 8081 	blt.w	8007b12 <quorem+0x112>
 8007a10:	3c01      	subs	r4, #1
 8007a12:	f101 0814 	add.w	r8, r1, #20
 8007a16:	f100 0514 	add.w	r5, r0, #20
 8007a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a38:	d331      	bcc.n	8007a9e <quorem+0x9e>
 8007a3a:	f04f 0e00 	mov.w	lr, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	46ac      	mov	ip, r5
 8007a42:	46f2      	mov	sl, lr
 8007a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a48:	b293      	uxth	r3, r2
 8007a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ebaa 0303 	sub.w	r3, sl, r3
 8007a58:	f8dc a000 	ldr.w	sl, [ip]
 8007a5c:	0c12      	lsrs	r2, r2, #16
 8007a5e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a62:	fb06 e202 	mla	r2, r6, r2, lr
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a78:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a7c:	4581      	cmp	r9, r0
 8007a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a82:	f84c 3b04 	str.w	r3, [ip], #4
 8007a86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a8a:	d2db      	bcs.n	8007a44 <quorem+0x44>
 8007a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a90:	b92b      	cbnz	r3, 8007a9e <quorem+0x9e>
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	429d      	cmp	r5, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	d32e      	bcc.n	8007afa <quorem+0xfa>
 8007a9c:	613c      	str	r4, [r7, #16]
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f001 fc82 	bl	80093a8 <__mcmp>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	db24      	blt.n	8007af2 <quorem+0xf2>
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f04f 0c00 	mov.w	ip, #0
 8007ab0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ab4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ab8:	b293      	uxth	r3, r2
 8007aba:	ebac 0303 	sub.w	r3, ip, r3
 8007abe:	0c12      	lsrs	r2, r2, #16
 8007ac0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ac4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad2:	45c1      	cmp	r9, r8
 8007ad4:	f840 3b04 	str.w	r3, [r0], #4
 8007ad8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007adc:	d2e8      	bcs.n	8007ab0 <quorem+0xb0>
 8007ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ae6:	b922      	cbnz	r2, 8007af2 <quorem+0xf2>
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	429d      	cmp	r5, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	d30a      	bcc.n	8007b06 <quorem+0x106>
 8007af0:	613c      	str	r4, [r7, #16]
 8007af2:	4630      	mov	r0, r6
 8007af4:	b003      	add	sp, #12
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	d1cc      	bne.n	8007a9c <quorem+0x9c>
 8007b02:	3c01      	subs	r4, #1
 8007b04:	e7c7      	b.n	8007a96 <quorem+0x96>
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d1f0      	bne.n	8007af0 <quorem+0xf0>
 8007b0e:	3c01      	subs	r4, #1
 8007b10:	e7eb      	b.n	8007aea <quorem+0xea>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e7ee      	b.n	8007af4 <quorem+0xf4>
	...

08007b18 <_dtoa_r>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ed2d 8b04 	vpush	{d8-d9}
 8007b20:	ec57 6b10 	vmov	r6, r7, d0
 8007b24:	b093      	sub	sp, #76	; 0x4c
 8007b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b2c:	9106      	str	r1, [sp, #24]
 8007b2e:	ee10 aa10 	vmov	sl, s0
 8007b32:	4604      	mov	r4, r0
 8007b34:	9209      	str	r2, [sp, #36]	; 0x24
 8007b36:	930c      	str	r3, [sp, #48]	; 0x30
 8007b38:	46bb      	mov	fp, r7
 8007b3a:	b975      	cbnz	r5, 8007b5a <_dtoa_r+0x42>
 8007b3c:	2010      	movs	r0, #16
 8007b3e:	f001 f94d 	bl	8008ddc <malloc>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6260      	str	r0, [r4, #36]	; 0x24
 8007b46:	b920      	cbnz	r0, 8007b52 <_dtoa_r+0x3a>
 8007b48:	4ba7      	ldr	r3, [pc, #668]	; (8007de8 <_dtoa_r+0x2d0>)
 8007b4a:	21ea      	movs	r1, #234	; 0xea
 8007b4c:	48a7      	ldr	r0, [pc, #668]	; (8007dec <_dtoa_r+0x2d4>)
 8007b4e:	f002 f8ad 	bl	8009cac <__assert_func>
 8007b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b56:	6005      	str	r5, [r0, #0]
 8007b58:	60c5      	str	r5, [r0, #12]
 8007b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	b151      	cbz	r1, 8007b76 <_dtoa_r+0x5e>
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	604a      	str	r2, [r1, #4]
 8007b64:	2301      	movs	r3, #1
 8007b66:	4093      	lsls	r3, r2
 8007b68:	608b      	str	r3, [r1, #8]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f001 f990 	bl	8008e90 <_Bfree>
 8007b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	1e3b      	subs	r3, r7, #0
 8007b78:	bfaa      	itet	ge
 8007b7a:	2300      	movge	r3, #0
 8007b7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b80:	f8c8 3000 	strge.w	r3, [r8]
 8007b84:	4b9a      	ldr	r3, [pc, #616]	; (8007df0 <_dtoa_r+0x2d8>)
 8007b86:	bfbc      	itt	lt
 8007b88:	2201      	movlt	r2, #1
 8007b8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b8e:	ea33 030b 	bics.w	r3, r3, fp
 8007b92:	d11b      	bne.n	8007bcc <_dtoa_r+0xb4>
 8007b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba0:	4333      	orrs	r3, r6
 8007ba2:	f000 8592 	beq.w	80086ca <_dtoa_r+0xbb2>
 8007ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba8:	b963      	cbnz	r3, 8007bc4 <_dtoa_r+0xac>
 8007baa:	4b92      	ldr	r3, [pc, #584]	; (8007df4 <_dtoa_r+0x2dc>)
 8007bac:	e022      	b.n	8007bf4 <_dtoa_r+0xdc>
 8007bae:	4b92      	ldr	r3, [pc, #584]	; (8007df8 <_dtoa_r+0x2e0>)
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	b013      	add	sp, #76	; 0x4c
 8007bbc:	ecbd 8b04 	vpop	{d8-d9}
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	4b8b      	ldr	r3, [pc, #556]	; (8007df4 <_dtoa_r+0x2dc>)
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	3303      	adds	r3, #3
 8007bca:	e7f3      	b.n	8007bb4 <_dtoa_r+0x9c>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	4659      	mov	r1, fp
 8007bd4:	f7f8 ff98 	bl	8000b08 <__aeabi_dcmpeq>
 8007bd8:	ec4b ab19 	vmov	d9, sl, fp
 8007bdc:	4680      	mov	r8, r0
 8007bde:	b158      	cbz	r0, 8007bf8 <_dtoa_r+0xe0>
 8007be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be2:	2301      	movs	r3, #1
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 856b 	beq.w	80086c4 <_dtoa_r+0xbac>
 8007bee:	4883      	ldr	r0, [pc, #524]	; (8007dfc <_dtoa_r+0x2e4>)
 8007bf0:	6018      	str	r0, [r3, #0]
 8007bf2:	1e43      	subs	r3, r0, #1
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	e7df      	b.n	8007bb8 <_dtoa_r+0xa0>
 8007bf8:	ec4b ab10 	vmov	d0, sl, fp
 8007bfc:	aa10      	add	r2, sp, #64	; 0x40
 8007bfe:	a911      	add	r1, sp, #68	; 0x44
 8007c00:	4620      	mov	r0, r4
 8007c02:	f001 fcf3 	bl	80095ec <__d2b>
 8007c06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c0a:	ee08 0a10 	vmov	s16, r0
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	f000 8084 	beq.w	8007d1c <_dtoa_r+0x204>
 8007c14:	ee19 3a90 	vmov	r3, s19
 8007c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c20:	4656      	mov	r6, sl
 8007c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c2e:	4b74      	ldr	r3, [pc, #464]	; (8007e00 <_dtoa_r+0x2e8>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	4630      	mov	r0, r6
 8007c34:	4639      	mov	r1, r7
 8007c36:	f7f8 fb47 	bl	80002c8 <__aeabi_dsub>
 8007c3a:	a365      	add	r3, pc, #404	; (adr r3, 8007dd0 <_dtoa_r+0x2b8>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f7f8 fcfa 	bl	8000638 <__aeabi_dmul>
 8007c44:	a364      	add	r3, pc, #400	; (adr r3, 8007dd8 <_dtoa_r+0x2c0>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fb3f 	bl	80002cc <__adddf3>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4628      	mov	r0, r5
 8007c52:	460f      	mov	r7, r1
 8007c54:	f7f8 fc86 	bl	8000564 <__aeabi_i2d>
 8007c58:	a361      	add	r3, pc, #388	; (adr r3, 8007de0 <_dtoa_r+0x2c8>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fceb 	bl	8000638 <__aeabi_dmul>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fb2f 	bl	80002cc <__adddf3>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460f      	mov	r7, r1
 8007c72:	f7f8 ff91 	bl	8000b98 <__aeabi_d2iz>
 8007c76:	2200      	movs	r2, #0
 8007c78:	9000      	str	r0, [sp, #0]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 8007c84:	b150      	cbz	r0, 8007c9c <_dtoa_r+0x184>
 8007c86:	9800      	ldr	r0, [sp, #0]
 8007c88:	f7f8 fc6c 	bl	8000564 <__aeabi_i2d>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	463b      	mov	r3, r7
 8007c90:	f7f8 ff3a 	bl	8000b08 <__aeabi_dcmpeq>
 8007c94:	b910      	cbnz	r0, 8007c9c <_dtoa_r+0x184>
 8007c96:	9b00      	ldr	r3, [sp, #0]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	9b00      	ldr	r3, [sp, #0]
 8007c9e:	2b16      	cmp	r3, #22
 8007ca0:	d85a      	bhi.n	8007d58 <_dtoa_r+0x240>
 8007ca2:	9a00      	ldr	r2, [sp, #0]
 8007ca4:	4b57      	ldr	r3, [pc, #348]	; (8007e04 <_dtoa_r+0x2ec>)
 8007ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	ec51 0b19 	vmov	r0, r1, d9
 8007cb2:	f7f8 ff33 	bl	8000b1c <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d050      	beq.n	8007d5c <_dtoa_r+0x244>
 8007cba:	9b00      	ldr	r3, [sp, #0]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cc6:	1b5d      	subs	r5, r3, r5
 8007cc8:	1e6b      	subs	r3, r5, #1
 8007cca:	9305      	str	r3, [sp, #20]
 8007ccc:	bf45      	ittet	mi
 8007cce:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cd2:	9304      	strmi	r3, [sp, #16]
 8007cd4:	2300      	movpl	r3, #0
 8007cd6:	2300      	movmi	r3, #0
 8007cd8:	bf4c      	ite	mi
 8007cda:	9305      	strmi	r3, [sp, #20]
 8007cdc:	9304      	strpl	r3, [sp, #16]
 8007cde:	9b00      	ldr	r3, [sp, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	db3d      	blt.n	8007d60 <_dtoa_r+0x248>
 8007ce4:	9b05      	ldr	r3, [sp, #20]
 8007ce6:	9a00      	ldr	r2, [sp, #0]
 8007ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cea:	4413      	add	r3, r2
 8007cec:	9305      	str	r3, [sp, #20]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9307      	str	r3, [sp, #28]
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	2b09      	cmp	r3, #9
 8007cf6:	f200 8089 	bhi.w	8007e0c <_dtoa_r+0x2f4>
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	bfc4      	itt	gt
 8007cfe:	3b04      	subgt	r3, #4
 8007d00:	9306      	strgt	r3, [sp, #24]
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	f1a3 0302 	sub.w	r3, r3, #2
 8007d08:	bfcc      	ite	gt
 8007d0a:	2500      	movgt	r5, #0
 8007d0c:	2501      	movle	r5, #1
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	f200 8087 	bhi.w	8007e22 <_dtoa_r+0x30a>
 8007d14:	e8df f003 	tbb	[pc, r3]
 8007d18:	59383a2d 	.word	0x59383a2d
 8007d1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d20:	441d      	add	r5, r3
 8007d22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	bfc1      	itttt	gt
 8007d2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d3a:	bfda      	itte	le
 8007d3c:	f1c3 0320 	rsble	r3, r3, #32
 8007d40:	fa06 f003 	lslle.w	r0, r6, r3
 8007d44:	4318      	orrgt	r0, r3
 8007d46:	f7f8 fbfd 	bl	8000544 <__aeabi_ui2d>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d52:	3d01      	subs	r5, #1
 8007d54:	930e      	str	r3, [sp, #56]	; 0x38
 8007d56:	e76a      	b.n	8007c2e <_dtoa_r+0x116>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e7b2      	b.n	8007cc2 <_dtoa_r+0x1aa>
 8007d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d5e:	e7b1      	b.n	8007cc4 <_dtoa_r+0x1ac>
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	9a00      	ldr	r2, [sp, #0]
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	4253      	negs	r3, r2
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d70:	e7bf      	b.n	8007cf2 <_dtoa_r+0x1da>
 8007d72:	2300      	movs	r3, #0
 8007d74:	9308      	str	r3, [sp, #32]
 8007d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc55      	bgt.n	8007e28 <_dtoa_r+0x310>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d82:	461a      	mov	r2, r3
 8007d84:	9209      	str	r2, [sp, #36]	; 0x24
 8007d86:	e00c      	b.n	8007da2 <_dtoa_r+0x28a>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e7f3      	b.n	8007d74 <_dtoa_r+0x25c>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	9b00      	ldr	r3, [sp, #0]
 8007d94:	4413      	add	r3, r2
 8007d96:	9302      	str	r3, [sp, #8]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	bfb8      	it	lt
 8007da0:	2301      	movlt	r3, #1
 8007da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007da4:	2200      	movs	r2, #0
 8007da6:	6042      	str	r2, [r0, #4]
 8007da8:	2204      	movs	r2, #4
 8007daa:	f102 0614 	add.w	r6, r2, #20
 8007dae:	429e      	cmp	r6, r3
 8007db0:	6841      	ldr	r1, [r0, #4]
 8007db2:	d93d      	bls.n	8007e30 <_dtoa_r+0x318>
 8007db4:	4620      	mov	r0, r4
 8007db6:	f001 f82b 	bl	8008e10 <_Balloc>
 8007dba:	9001      	str	r0, [sp, #4]
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d13b      	bne.n	8007e38 <_dtoa_r+0x320>
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <_dtoa_r+0x2f0>)
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dc8:	e6c0      	b.n	8007b4c <_dtoa_r+0x34>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e7df      	b.n	8007d8e <_dtoa_r+0x276>
 8007dce:	bf00      	nop
 8007dd0:	636f4361 	.word	0x636f4361
 8007dd4:	3fd287a7 	.word	0x3fd287a7
 8007dd8:	8b60c8b3 	.word	0x8b60c8b3
 8007ddc:	3fc68a28 	.word	0x3fc68a28
 8007de0:	509f79fb 	.word	0x509f79fb
 8007de4:	3fd34413 	.word	0x3fd34413
 8007de8:	0800bd66 	.word	0x0800bd66
 8007dec:	0800bd7d 	.word	0x0800bd7d
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800bd62 	.word	0x0800bd62
 8007df8:	0800bd59 	.word	0x0800bd59
 8007dfc:	0800bbdd 	.word	0x0800bbdd
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	0800bee8 	.word	0x0800bee8
 8007e08:	0800bdd8 	.word	0x0800bdd8
 8007e0c:	2501      	movs	r5, #1
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9306      	str	r3, [sp, #24]
 8007e12:	9508      	str	r5, [sp, #32]
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295
 8007e18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2312      	movs	r3, #18
 8007e20:	e7b0      	b.n	8007d84 <_dtoa_r+0x26c>
 8007e22:	2301      	movs	r3, #1
 8007e24:	9308      	str	r3, [sp, #32]
 8007e26:	e7f5      	b.n	8007e14 <_dtoa_r+0x2fc>
 8007e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e2e:	e7b8      	b.n	8007da2 <_dtoa_r+0x28a>
 8007e30:	3101      	adds	r1, #1
 8007e32:	6041      	str	r1, [r0, #4]
 8007e34:	0052      	lsls	r2, r2, #1
 8007e36:	e7b8      	b.n	8007daa <_dtoa_r+0x292>
 8007e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e3a:	9a01      	ldr	r2, [sp, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	2b0e      	cmp	r3, #14
 8007e42:	f200 809d 	bhi.w	8007f80 <_dtoa_r+0x468>
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	f000 809a 	beq.w	8007f80 <_dtoa_r+0x468>
 8007e4c:	9b00      	ldr	r3, [sp, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dd32      	ble.n	8007eb8 <_dtoa_r+0x3a0>
 8007e52:	4ab7      	ldr	r2, [pc, #732]	; (8008130 <_dtoa_r+0x618>)
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e60:	9b00      	ldr	r3, [sp, #0]
 8007e62:	05d8      	lsls	r0, r3, #23
 8007e64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e68:	d516      	bpl.n	8007e98 <_dtoa_r+0x380>
 8007e6a:	4bb2      	ldr	r3, [pc, #712]	; (8008134 <_dtoa_r+0x61c>)
 8007e6c:	ec51 0b19 	vmov	r0, r1, d9
 8007e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e74:	f7f8 fd0a 	bl	800088c <__aeabi_ddiv>
 8007e78:	f007 070f 	and.w	r7, r7, #15
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	468b      	mov	fp, r1
 8007e80:	2503      	movs	r5, #3
 8007e82:	4eac      	ldr	r6, [pc, #688]	; (8008134 <_dtoa_r+0x61c>)
 8007e84:	b957      	cbnz	r7, 8007e9c <_dtoa_r+0x384>
 8007e86:	4642      	mov	r2, r8
 8007e88:	464b      	mov	r3, r9
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	f7f8 fcfd 	bl	800088c <__aeabi_ddiv>
 8007e92:	4682      	mov	sl, r0
 8007e94:	468b      	mov	fp, r1
 8007e96:	e028      	b.n	8007eea <_dtoa_r+0x3d2>
 8007e98:	2502      	movs	r5, #2
 8007e9a:	e7f2      	b.n	8007e82 <_dtoa_r+0x36a>
 8007e9c:	07f9      	lsls	r1, r7, #31
 8007e9e:	d508      	bpl.n	8007eb2 <_dtoa_r+0x39a>
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ea8:	f7f8 fbc6 	bl	8000638 <__aeabi_dmul>
 8007eac:	3501      	adds	r5, #1
 8007eae:	4680      	mov	r8, r0
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	107f      	asrs	r7, r7, #1
 8007eb4:	3608      	adds	r6, #8
 8007eb6:	e7e5      	b.n	8007e84 <_dtoa_r+0x36c>
 8007eb8:	f000 809b 	beq.w	8007ff2 <_dtoa_r+0x4da>
 8007ebc:	9b00      	ldr	r3, [sp, #0]
 8007ebe:	4f9d      	ldr	r7, [pc, #628]	; (8008134 <_dtoa_r+0x61c>)
 8007ec0:	425e      	negs	r6, r3
 8007ec2:	4b9b      	ldr	r3, [pc, #620]	; (8008130 <_dtoa_r+0x618>)
 8007ec4:	f006 020f 	and.w	r2, r6, #15
 8007ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	ec51 0b19 	vmov	r0, r1, d9
 8007ed4:	f7f8 fbb0 	bl	8000638 <__aeabi_dmul>
 8007ed8:	1136      	asrs	r6, r6, #4
 8007eda:	4682      	mov	sl, r0
 8007edc:	468b      	mov	fp, r1
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2502      	movs	r5, #2
 8007ee2:	2e00      	cmp	r6, #0
 8007ee4:	d17a      	bne.n	8007fdc <_dtoa_r+0x4c4>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1d3      	bne.n	8007e92 <_dtoa_r+0x37a>
 8007eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8082 	beq.w	8007ff6 <_dtoa_r+0x4de>
 8007ef2:	4b91      	ldr	r3, [pc, #580]	; (8008138 <_dtoa_r+0x620>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	4659      	mov	r1, fp
 8007efa:	f7f8 fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d079      	beq.n	8007ff6 <_dtoa_r+0x4de>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d076      	beq.n	8007ff6 <_dtoa_r+0x4de>
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dd36      	ble.n	8007f7c <_dtoa_r+0x464>
 8007f0e:	9b00      	ldr	r3, [sp, #0]
 8007f10:	4650      	mov	r0, sl
 8007f12:	4659      	mov	r1, fp
 8007f14:	1e5f      	subs	r7, r3, #1
 8007f16:	2200      	movs	r2, #0
 8007f18:	4b88      	ldr	r3, [pc, #544]	; (800813c <_dtoa_r+0x624>)
 8007f1a:	f7f8 fb8d 	bl	8000638 <__aeabi_dmul>
 8007f1e:	9e02      	ldr	r6, [sp, #8]
 8007f20:	4682      	mov	sl, r0
 8007f22:	468b      	mov	fp, r1
 8007f24:	3501      	adds	r5, #1
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7f8 fb1c 	bl	8000564 <__aeabi_i2d>
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	465b      	mov	r3, fp
 8007f30:	f7f8 fb82 	bl	8000638 <__aeabi_dmul>
 8007f34:	4b82      	ldr	r3, [pc, #520]	; (8008140 <_dtoa_r+0x628>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	f7f8 f9c8 	bl	80002cc <__adddf3>
 8007f3c:	46d0      	mov	r8, sl
 8007f3e:	46d9      	mov	r9, fp
 8007f40:	4682      	mov	sl, r0
 8007f42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	d158      	bne.n	8007ffc <_dtoa_r+0x4e4>
 8007f4a:	4b7e      	ldr	r3, [pc, #504]	; (8008144 <_dtoa_r+0x62c>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4649      	mov	r1, r9
 8007f52:	f7f8 f9b9 	bl	80002c8 <__aeabi_dsub>
 8007f56:	4652      	mov	r2, sl
 8007f58:	465b      	mov	r3, fp
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	f7f8 fdfb 	bl	8000b58 <__aeabi_dcmpgt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f040 8295 	bne.w	8008492 <_dtoa_r+0x97a>
 8007f68:	4652      	mov	r2, sl
 8007f6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7f8 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f040 8289 	bne.w	800848e <_dtoa_r+0x976>
 8007f7c:	ec5b ab19 	vmov	sl, fp, d9
 8007f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f2c0 8148 	blt.w	8008218 <_dtoa_r+0x700>
 8007f88:	9a00      	ldr	r2, [sp, #0]
 8007f8a:	2a0e      	cmp	r2, #14
 8007f8c:	f300 8144 	bgt.w	8008218 <_dtoa_r+0x700>
 8007f90:	4b67      	ldr	r3, [pc, #412]	; (8008130 <_dtoa_r+0x618>)
 8007f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f280 80d5 	bge.w	800814c <_dtoa_r+0x634>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f300 80d1 	bgt.w	800814c <_dtoa_r+0x634>
 8007faa:	f040 826f 	bne.w	800848c <_dtoa_r+0x974>
 8007fae:	4b65      	ldr	r3, [pc, #404]	; (8008144 <_dtoa_r+0x62c>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 fb3f 	bl	8000638 <__aeabi_dmul>
 8007fba:	4652      	mov	r2, sl
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	f7f8 fdc1 	bl	8000b44 <__aeabi_dcmpge>
 8007fc2:	9e03      	ldr	r6, [sp, #12]
 8007fc4:	4637      	mov	r7, r6
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f040 8245 	bne.w	8008456 <_dtoa_r+0x93e>
 8007fcc:	9d01      	ldr	r5, [sp, #4]
 8007fce:	2331      	movs	r3, #49	; 0x31
 8007fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	e240      	b.n	800845e <_dtoa_r+0x946>
 8007fdc:	07f2      	lsls	r2, r6, #31
 8007fde:	d505      	bpl.n	8007fec <_dtoa_r+0x4d4>
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	f7f8 fb28 	bl	8000638 <__aeabi_dmul>
 8007fe8:	3501      	adds	r5, #1
 8007fea:	2301      	movs	r3, #1
 8007fec:	1076      	asrs	r6, r6, #1
 8007fee:	3708      	adds	r7, #8
 8007ff0:	e777      	b.n	8007ee2 <_dtoa_r+0x3ca>
 8007ff2:	2502      	movs	r5, #2
 8007ff4:	e779      	b.n	8007eea <_dtoa_r+0x3d2>
 8007ff6:	9f00      	ldr	r7, [sp, #0]
 8007ff8:	9e03      	ldr	r6, [sp, #12]
 8007ffa:	e794      	b.n	8007f26 <_dtoa_r+0x40e>
 8007ffc:	9901      	ldr	r1, [sp, #4]
 8007ffe:	4b4c      	ldr	r3, [pc, #304]	; (8008130 <_dtoa_r+0x618>)
 8008000:	4431      	add	r1, r6
 8008002:	910d      	str	r1, [sp, #52]	; 0x34
 8008004:	9908      	ldr	r1, [sp, #32]
 8008006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800800a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800800e:	2900      	cmp	r1, #0
 8008010:	d043      	beq.n	800809a <_dtoa_r+0x582>
 8008012:	494d      	ldr	r1, [pc, #308]	; (8008148 <_dtoa_r+0x630>)
 8008014:	2000      	movs	r0, #0
 8008016:	f7f8 fc39 	bl	800088c <__aeabi_ddiv>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	9d01      	ldr	r5, [sp, #4]
 8008024:	4682      	mov	sl, r0
 8008026:	468b      	mov	fp, r1
 8008028:	4649      	mov	r1, r9
 800802a:	4640      	mov	r0, r8
 800802c:	f7f8 fdb4 	bl	8000b98 <__aeabi_d2iz>
 8008030:	4606      	mov	r6, r0
 8008032:	f7f8 fa97 	bl	8000564 <__aeabi_i2d>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4640      	mov	r0, r8
 800803c:	4649      	mov	r1, r9
 800803e:	f7f8 f943 	bl	80002c8 <__aeabi_dsub>
 8008042:	3630      	adds	r6, #48	; 0x30
 8008044:	f805 6b01 	strb.w	r6, [r5], #1
 8008048:	4652      	mov	r2, sl
 800804a:	465b      	mov	r3, fp
 800804c:	4680      	mov	r8, r0
 800804e:	4689      	mov	r9, r1
 8008050:	f7f8 fd64 	bl	8000b1c <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	d163      	bne.n	8008120 <_dtoa_r+0x608>
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	4936      	ldr	r1, [pc, #216]	; (8008138 <_dtoa_r+0x620>)
 800805e:	2000      	movs	r0, #0
 8008060:	f7f8 f932 	bl	80002c8 <__aeabi_dsub>
 8008064:	4652      	mov	r2, sl
 8008066:	465b      	mov	r3, fp
 8008068:	f7f8 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800806c:	2800      	cmp	r0, #0
 800806e:	f040 80b5 	bne.w	80081dc <_dtoa_r+0x6c4>
 8008072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008074:	429d      	cmp	r5, r3
 8008076:	d081      	beq.n	8007f7c <_dtoa_r+0x464>
 8008078:	4b30      	ldr	r3, [pc, #192]	; (800813c <_dtoa_r+0x624>)
 800807a:	2200      	movs	r2, #0
 800807c:	4650      	mov	r0, sl
 800807e:	4659      	mov	r1, fp
 8008080:	f7f8 fada 	bl	8000638 <__aeabi_dmul>
 8008084:	4b2d      	ldr	r3, [pc, #180]	; (800813c <_dtoa_r+0x624>)
 8008086:	4682      	mov	sl, r0
 8008088:	468b      	mov	fp, r1
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	2200      	movs	r2, #0
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	4680      	mov	r8, r0
 8008096:	4689      	mov	r9, r1
 8008098:	e7c6      	b.n	8008028 <_dtoa_r+0x510>
 800809a:	4650      	mov	r0, sl
 800809c:	4659      	mov	r1, fp
 800809e:	f7f8 facb 	bl	8000638 <__aeabi_dmul>
 80080a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080a4:	9d01      	ldr	r5, [sp, #4]
 80080a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a8:	4682      	mov	sl, r0
 80080aa:	468b      	mov	fp, r1
 80080ac:	4649      	mov	r1, r9
 80080ae:	4640      	mov	r0, r8
 80080b0:	f7f8 fd72 	bl	8000b98 <__aeabi_d2iz>
 80080b4:	4606      	mov	r6, r0
 80080b6:	f7f8 fa55 	bl	8000564 <__aeabi_i2d>
 80080ba:	3630      	adds	r6, #48	; 0x30
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f7f8 f900 	bl	80002c8 <__aeabi_dsub>
 80080c8:	f805 6b01 	strb.w	r6, [r5], #1
 80080cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ce:	429d      	cmp	r5, r3
 80080d0:	4680      	mov	r8, r0
 80080d2:	4689      	mov	r9, r1
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	d124      	bne.n	8008124 <_dtoa_r+0x60c>
 80080da:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <_dtoa_r+0x630>)
 80080dc:	4650      	mov	r0, sl
 80080de:	4659      	mov	r1, fp
 80080e0:	f7f8 f8f4 	bl	80002cc <__adddf3>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4640      	mov	r0, r8
 80080ea:	4649      	mov	r1, r9
 80080ec:	f7f8 fd34 	bl	8000b58 <__aeabi_dcmpgt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d173      	bne.n	80081dc <_dtoa_r+0x6c4>
 80080f4:	4652      	mov	r2, sl
 80080f6:	465b      	mov	r3, fp
 80080f8:	4913      	ldr	r1, [pc, #76]	; (8008148 <_dtoa_r+0x630>)
 80080fa:	2000      	movs	r0, #0
 80080fc:	f7f8 f8e4 	bl	80002c8 <__aeabi_dsub>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4640      	mov	r0, r8
 8008106:	4649      	mov	r1, r9
 8008108:	f7f8 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f43f af35 	beq.w	8007f7c <_dtoa_r+0x464>
 8008112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008114:	1e6b      	subs	r3, r5, #1
 8008116:	930f      	str	r3, [sp, #60]	; 0x3c
 8008118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800811c:	2b30      	cmp	r3, #48	; 0x30
 800811e:	d0f8      	beq.n	8008112 <_dtoa_r+0x5fa>
 8008120:	9700      	str	r7, [sp, #0]
 8008122:	e049      	b.n	80081b8 <_dtoa_r+0x6a0>
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <_dtoa_r+0x624>)
 8008126:	f7f8 fa87 	bl	8000638 <__aeabi_dmul>
 800812a:	4680      	mov	r8, r0
 800812c:	4689      	mov	r9, r1
 800812e:	e7bd      	b.n	80080ac <_dtoa_r+0x594>
 8008130:	0800bee8 	.word	0x0800bee8
 8008134:	0800bec0 	.word	0x0800bec0
 8008138:	3ff00000 	.word	0x3ff00000
 800813c:	40240000 	.word	0x40240000
 8008140:	401c0000 	.word	0x401c0000
 8008144:	40140000 	.word	0x40140000
 8008148:	3fe00000 	.word	0x3fe00000
 800814c:	9d01      	ldr	r5, [sp, #4]
 800814e:	4656      	mov	r6, sl
 8008150:	465f      	mov	r7, fp
 8008152:	4642      	mov	r2, r8
 8008154:	464b      	mov	r3, r9
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fb97 	bl	800088c <__aeabi_ddiv>
 800815e:	f7f8 fd1b 	bl	8000b98 <__aeabi_d2iz>
 8008162:	4682      	mov	sl, r0
 8008164:	f7f8 f9fe 	bl	8000564 <__aeabi_i2d>
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	f7f8 fa64 	bl	8000638 <__aeabi_dmul>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800817c:	f7f8 f8a4 	bl	80002c8 <__aeabi_dsub>
 8008180:	f805 6b01 	strb.w	r6, [r5], #1
 8008184:	9e01      	ldr	r6, [sp, #4]
 8008186:	9f03      	ldr	r7, [sp, #12]
 8008188:	1bae      	subs	r6, r5, r6
 800818a:	42b7      	cmp	r7, r6
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	d135      	bne.n	80081fe <_dtoa_r+0x6e6>
 8008192:	f7f8 f89b 	bl	80002cc <__adddf3>
 8008196:	4642      	mov	r2, r8
 8008198:	464b      	mov	r3, r9
 800819a:	4606      	mov	r6, r0
 800819c:	460f      	mov	r7, r1
 800819e:	f7f8 fcdb 	bl	8000b58 <__aeabi_dcmpgt>
 80081a2:	b9d0      	cbnz	r0, 80081da <_dtoa_r+0x6c2>
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80081b0:	b110      	cbz	r0, 80081b8 <_dtoa_r+0x6a0>
 80081b2:	f01a 0f01 	tst.w	sl, #1
 80081b6:	d110      	bne.n	80081da <_dtoa_r+0x6c2>
 80081b8:	4620      	mov	r0, r4
 80081ba:	ee18 1a10 	vmov	r1, s16
 80081be:	f000 fe67 	bl	8008e90 <_Bfree>
 80081c2:	2300      	movs	r3, #0
 80081c4:	9800      	ldr	r0, [sp, #0]
 80081c6:	702b      	strb	r3, [r5, #0]
 80081c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ca:	3001      	adds	r0, #1
 80081cc:	6018      	str	r0, [r3, #0]
 80081ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f43f acf1 	beq.w	8007bb8 <_dtoa_r+0xa0>
 80081d6:	601d      	str	r5, [r3, #0]
 80081d8:	e4ee      	b.n	8007bb8 <_dtoa_r+0xa0>
 80081da:	9f00      	ldr	r7, [sp, #0]
 80081dc:	462b      	mov	r3, r5
 80081de:	461d      	mov	r5, r3
 80081e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081e4:	2a39      	cmp	r2, #57	; 0x39
 80081e6:	d106      	bne.n	80081f6 <_dtoa_r+0x6de>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d1f7      	bne.n	80081de <_dtoa_r+0x6c6>
 80081ee:	9901      	ldr	r1, [sp, #4]
 80081f0:	2230      	movs	r2, #48	; 0x30
 80081f2:	3701      	adds	r7, #1
 80081f4:	700a      	strb	r2, [r1, #0]
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	3201      	adds	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	e790      	b.n	8008120 <_dtoa_r+0x608>
 80081fe:	4ba6      	ldr	r3, [pc, #664]	; (8008498 <_dtoa_r+0x980>)
 8008200:	2200      	movs	r2, #0
 8008202:	f7f8 fa19 	bl	8000638 <__aeabi_dmul>
 8008206:	2200      	movs	r2, #0
 8008208:	2300      	movs	r3, #0
 800820a:	4606      	mov	r6, r0
 800820c:	460f      	mov	r7, r1
 800820e:	f7f8 fc7b 	bl	8000b08 <__aeabi_dcmpeq>
 8008212:	2800      	cmp	r0, #0
 8008214:	d09d      	beq.n	8008152 <_dtoa_r+0x63a>
 8008216:	e7cf      	b.n	80081b8 <_dtoa_r+0x6a0>
 8008218:	9a08      	ldr	r2, [sp, #32]
 800821a:	2a00      	cmp	r2, #0
 800821c:	f000 80d7 	beq.w	80083ce <_dtoa_r+0x8b6>
 8008220:	9a06      	ldr	r2, [sp, #24]
 8008222:	2a01      	cmp	r2, #1
 8008224:	f300 80ba 	bgt.w	800839c <_dtoa_r+0x884>
 8008228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800822a:	2a00      	cmp	r2, #0
 800822c:	f000 80b2 	beq.w	8008394 <_dtoa_r+0x87c>
 8008230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008234:	9e07      	ldr	r6, [sp, #28]
 8008236:	9d04      	ldr	r5, [sp, #16]
 8008238:	9a04      	ldr	r2, [sp, #16]
 800823a:	441a      	add	r2, r3
 800823c:	9204      	str	r2, [sp, #16]
 800823e:	9a05      	ldr	r2, [sp, #20]
 8008240:	2101      	movs	r1, #1
 8008242:	441a      	add	r2, r3
 8008244:	4620      	mov	r0, r4
 8008246:	9205      	str	r2, [sp, #20]
 8008248:	f000 ff24 	bl	8009094 <__i2b>
 800824c:	4607      	mov	r7, r0
 800824e:	2d00      	cmp	r5, #0
 8008250:	dd0c      	ble.n	800826c <_dtoa_r+0x754>
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd09      	ble.n	800826c <_dtoa_r+0x754>
 8008258:	42ab      	cmp	r3, r5
 800825a:	9a04      	ldr	r2, [sp, #16]
 800825c:	bfa8      	it	ge
 800825e:	462b      	movge	r3, r5
 8008260:	1ad2      	subs	r2, r2, r3
 8008262:	9204      	str	r2, [sp, #16]
 8008264:	9a05      	ldr	r2, [sp, #20]
 8008266:	1aed      	subs	r5, r5, r3
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	b31b      	cbz	r3, 80082b8 <_dtoa_r+0x7a0>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80af 	beq.w	80083d6 <_dtoa_r+0x8be>
 8008278:	2e00      	cmp	r6, #0
 800827a:	dd13      	ble.n	80082a4 <_dtoa_r+0x78c>
 800827c:	4639      	mov	r1, r7
 800827e:	4632      	mov	r2, r6
 8008280:	4620      	mov	r0, r4
 8008282:	f000 ffc7 	bl	8009214 <__pow5mult>
 8008286:	ee18 2a10 	vmov	r2, s16
 800828a:	4601      	mov	r1, r0
 800828c:	4607      	mov	r7, r0
 800828e:	4620      	mov	r0, r4
 8008290:	f000 ff16 	bl	80090c0 <__multiply>
 8008294:	ee18 1a10 	vmov	r1, s16
 8008298:	4680      	mov	r8, r0
 800829a:	4620      	mov	r0, r4
 800829c:	f000 fdf8 	bl	8008e90 <_Bfree>
 80082a0:	ee08 8a10 	vmov	s16, r8
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	1b9a      	subs	r2, r3, r6
 80082a8:	d006      	beq.n	80082b8 <_dtoa_r+0x7a0>
 80082aa:	ee18 1a10 	vmov	r1, s16
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 ffb0 	bl	8009214 <__pow5mult>
 80082b4:	ee08 0a10 	vmov	s16, r0
 80082b8:	2101      	movs	r1, #1
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 feea 	bl	8009094 <__i2b>
 80082c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	4606      	mov	r6, r0
 80082c6:	f340 8088 	ble.w	80083da <_dtoa_r+0x8c2>
 80082ca:	461a      	mov	r2, r3
 80082cc:	4601      	mov	r1, r0
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 ffa0 	bl	8009214 <__pow5mult>
 80082d4:	9b06      	ldr	r3, [sp, #24]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	4606      	mov	r6, r0
 80082da:	f340 8081 	ble.w	80083e0 <_dtoa_r+0x8c8>
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	6933      	ldr	r3, [r6, #16]
 80082e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f000 fe83 	bl	8008ff4 <__hi0bits>
 80082ee:	f1c0 0020 	rsb	r0, r0, #32
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	4418      	add	r0, r3
 80082f6:	f010 001f 	ands.w	r0, r0, #31
 80082fa:	f000 8092 	beq.w	8008422 <_dtoa_r+0x90a>
 80082fe:	f1c0 0320 	rsb	r3, r0, #32
 8008302:	2b04      	cmp	r3, #4
 8008304:	f340 808a 	ble.w	800841c <_dtoa_r+0x904>
 8008308:	f1c0 001c 	rsb	r0, r0, #28
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	4403      	add	r3, r0
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	4403      	add	r3, r0
 8008316:	4405      	add	r5, r0
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	dd07      	ble.n	8008330 <_dtoa_r+0x818>
 8008320:	ee18 1a10 	vmov	r1, s16
 8008324:	461a      	mov	r2, r3
 8008326:	4620      	mov	r0, r4
 8008328:	f000 ffce 	bl	80092c8 <__lshift>
 800832c:	ee08 0a10 	vmov	s16, r0
 8008330:	9b05      	ldr	r3, [sp, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dd05      	ble.n	8008342 <_dtoa_r+0x82a>
 8008336:	4631      	mov	r1, r6
 8008338:	461a      	mov	r2, r3
 800833a:	4620      	mov	r0, r4
 800833c:	f000 ffc4 	bl	80092c8 <__lshift>
 8008340:	4606      	mov	r6, r0
 8008342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d06e      	beq.n	8008426 <_dtoa_r+0x90e>
 8008348:	ee18 0a10 	vmov	r0, s16
 800834c:	4631      	mov	r1, r6
 800834e:	f001 f82b 	bl	80093a8 <__mcmp>
 8008352:	2800      	cmp	r0, #0
 8008354:	da67      	bge.n	8008426 <_dtoa_r+0x90e>
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	3b01      	subs	r3, #1
 800835a:	ee18 1a10 	vmov	r1, s16
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	220a      	movs	r2, #10
 8008362:	2300      	movs	r3, #0
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fdb5 	bl	8008ed4 <__multadd>
 800836a:	9b08      	ldr	r3, [sp, #32]
 800836c:	ee08 0a10 	vmov	s16, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 81b1 	beq.w	80086d8 <_dtoa_r+0xbc0>
 8008376:	2300      	movs	r3, #0
 8008378:	4639      	mov	r1, r7
 800837a:	220a      	movs	r2, #10
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fda9 	bl	8008ed4 <__multadd>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	4607      	mov	r7, r0
 8008388:	f300 808e 	bgt.w	80084a8 <_dtoa_r+0x990>
 800838c:	9b06      	ldr	r3, [sp, #24]
 800838e:	2b02      	cmp	r3, #2
 8008390:	dc51      	bgt.n	8008436 <_dtoa_r+0x91e>
 8008392:	e089      	b.n	80084a8 <_dtoa_r+0x990>
 8008394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800839a:	e74b      	b.n	8008234 <_dtoa_r+0x71c>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	1e5e      	subs	r6, r3, #1
 80083a0:	9b07      	ldr	r3, [sp, #28]
 80083a2:	42b3      	cmp	r3, r6
 80083a4:	bfbf      	itttt	lt
 80083a6:	9b07      	ldrlt	r3, [sp, #28]
 80083a8:	9607      	strlt	r6, [sp, #28]
 80083aa:	1af2      	sublt	r2, r6, r3
 80083ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083ae:	bfb6      	itet	lt
 80083b0:	189b      	addlt	r3, r3, r2
 80083b2:	1b9e      	subge	r6, r3, r6
 80083b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	bfb8      	it	lt
 80083ba:	2600      	movlt	r6, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bfb7      	itett	lt
 80083c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083c8:	1a9d      	sublt	r5, r3, r2
 80083ca:	2300      	movlt	r3, #0
 80083cc:	e734      	b.n	8008238 <_dtoa_r+0x720>
 80083ce:	9e07      	ldr	r6, [sp, #28]
 80083d0:	9d04      	ldr	r5, [sp, #16]
 80083d2:	9f08      	ldr	r7, [sp, #32]
 80083d4:	e73b      	b.n	800824e <_dtoa_r+0x736>
 80083d6:	9a07      	ldr	r2, [sp, #28]
 80083d8:	e767      	b.n	80082aa <_dtoa_r+0x792>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	dc18      	bgt.n	8008412 <_dtoa_r+0x8fa>
 80083e0:	f1ba 0f00 	cmp.w	sl, #0
 80083e4:	d115      	bne.n	8008412 <_dtoa_r+0x8fa>
 80083e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ea:	b993      	cbnz	r3, 8008412 <_dtoa_r+0x8fa>
 80083ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083f0:	0d1b      	lsrs	r3, r3, #20
 80083f2:	051b      	lsls	r3, r3, #20
 80083f4:	b183      	cbz	r3, 8008418 <_dtoa_r+0x900>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	9b05      	ldr	r3, [sp, #20]
 80083fe:	3301      	adds	r3, #1
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	f04f 0801 	mov.w	r8, #1
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	2b00      	cmp	r3, #0
 800840a:	f47f af6a 	bne.w	80082e2 <_dtoa_r+0x7ca>
 800840e:	2001      	movs	r0, #1
 8008410:	e76f      	b.n	80082f2 <_dtoa_r+0x7da>
 8008412:	f04f 0800 	mov.w	r8, #0
 8008416:	e7f6      	b.n	8008406 <_dtoa_r+0x8ee>
 8008418:	4698      	mov	r8, r3
 800841a:	e7f4      	b.n	8008406 <_dtoa_r+0x8ee>
 800841c:	f43f af7d 	beq.w	800831a <_dtoa_r+0x802>
 8008420:	4618      	mov	r0, r3
 8008422:	301c      	adds	r0, #28
 8008424:	e772      	b.n	800830c <_dtoa_r+0x7f4>
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	dc37      	bgt.n	800849c <_dtoa_r+0x984>
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	2b02      	cmp	r3, #2
 8008430:	dd34      	ble.n	800849c <_dtoa_r+0x984>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	9b02      	ldr	r3, [sp, #8]
 8008438:	b96b      	cbnz	r3, 8008456 <_dtoa_r+0x93e>
 800843a:	4631      	mov	r1, r6
 800843c:	2205      	movs	r2, #5
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fd48 	bl	8008ed4 <__multadd>
 8008444:	4601      	mov	r1, r0
 8008446:	4606      	mov	r6, r0
 8008448:	ee18 0a10 	vmov	r0, s16
 800844c:	f000 ffac 	bl	80093a8 <__mcmp>
 8008450:	2800      	cmp	r0, #0
 8008452:	f73f adbb 	bgt.w	8007fcc <_dtoa_r+0x4b4>
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	9d01      	ldr	r5, [sp, #4]
 800845a:	43db      	mvns	r3, r3
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	f04f 0800 	mov.w	r8, #0
 8008462:	4631      	mov	r1, r6
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fd13 	bl	8008e90 <_Bfree>
 800846a:	2f00      	cmp	r7, #0
 800846c:	f43f aea4 	beq.w	80081b8 <_dtoa_r+0x6a0>
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	d005      	beq.n	8008482 <_dtoa_r+0x96a>
 8008476:	45b8      	cmp	r8, r7
 8008478:	d003      	beq.n	8008482 <_dtoa_r+0x96a>
 800847a:	4641      	mov	r1, r8
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fd07 	bl	8008e90 <_Bfree>
 8008482:	4639      	mov	r1, r7
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fd03 	bl	8008e90 <_Bfree>
 800848a:	e695      	b.n	80081b8 <_dtoa_r+0x6a0>
 800848c:	2600      	movs	r6, #0
 800848e:	4637      	mov	r7, r6
 8008490:	e7e1      	b.n	8008456 <_dtoa_r+0x93e>
 8008492:	9700      	str	r7, [sp, #0]
 8008494:	4637      	mov	r7, r6
 8008496:	e599      	b.n	8007fcc <_dtoa_r+0x4b4>
 8008498:	40240000 	.word	0x40240000
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80ca 	beq.w	8008638 <_dtoa_r+0xb20>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	dd05      	ble.n	80084b8 <_dtoa_r+0x9a0>
 80084ac:	4639      	mov	r1, r7
 80084ae:	462a      	mov	r2, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 ff09 	bl	80092c8 <__lshift>
 80084b6:	4607      	mov	r7, r0
 80084b8:	f1b8 0f00 	cmp.w	r8, #0
 80084bc:	d05b      	beq.n	8008576 <_dtoa_r+0xa5e>
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fca5 	bl	8008e10 <_Balloc>
 80084c6:	4605      	mov	r5, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <_dtoa_r+0x9be>
 80084ca:	4b87      	ldr	r3, [pc, #540]	; (80086e8 <_dtoa_r+0xbd0>)
 80084cc:	4602      	mov	r2, r0
 80084ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084d2:	f7ff bb3b 	b.w	8007b4c <_dtoa_r+0x34>
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	0092      	lsls	r2, r2, #2
 80084dc:	f107 010c 	add.w	r1, r7, #12
 80084e0:	300c      	adds	r0, #12
 80084e2:	f7fd fd2b 	bl	8005f3c <memcpy>
 80084e6:	2201      	movs	r2, #1
 80084e8:	4629      	mov	r1, r5
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 feec 	bl	80092c8 <__lshift>
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	f103 0901 	add.w	r9, r3, #1
 80084f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	f00a 0301 	and.w	r3, sl, #1
 8008502:	46b8      	mov	r8, r7
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	4607      	mov	r7, r0
 8008508:	4631      	mov	r1, r6
 800850a:	ee18 0a10 	vmov	r0, s16
 800850e:	f7ff fa77 	bl	8007a00 <quorem>
 8008512:	4641      	mov	r1, r8
 8008514:	9002      	str	r0, [sp, #8]
 8008516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800851a:	ee18 0a10 	vmov	r0, s16
 800851e:	f000 ff43 	bl	80093a8 <__mcmp>
 8008522:	463a      	mov	r2, r7
 8008524:	9003      	str	r0, [sp, #12]
 8008526:	4631      	mov	r1, r6
 8008528:	4620      	mov	r0, r4
 800852a:	f000 ff59 	bl	80093e0 <__mdiff>
 800852e:	68c2      	ldr	r2, [r0, #12]
 8008530:	f109 3bff 	add.w	fp, r9, #4294967295
 8008534:	4605      	mov	r5, r0
 8008536:	bb02      	cbnz	r2, 800857a <_dtoa_r+0xa62>
 8008538:	4601      	mov	r1, r0
 800853a:	ee18 0a10 	vmov	r0, s16
 800853e:	f000 ff33 	bl	80093a8 <__mcmp>
 8008542:	4602      	mov	r2, r0
 8008544:	4629      	mov	r1, r5
 8008546:	4620      	mov	r0, r4
 8008548:	9207      	str	r2, [sp, #28]
 800854a:	f000 fca1 	bl	8008e90 <_Bfree>
 800854e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008552:	ea43 0102 	orr.w	r1, r3, r2
 8008556:	9b04      	ldr	r3, [sp, #16]
 8008558:	430b      	orrs	r3, r1
 800855a:	464d      	mov	r5, r9
 800855c:	d10f      	bne.n	800857e <_dtoa_r+0xa66>
 800855e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008562:	d02a      	beq.n	80085ba <_dtoa_r+0xaa2>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	dd02      	ble.n	8008570 <_dtoa_r+0xa58>
 800856a:	9b02      	ldr	r3, [sp, #8]
 800856c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008570:	f88b a000 	strb.w	sl, [fp]
 8008574:	e775      	b.n	8008462 <_dtoa_r+0x94a>
 8008576:	4638      	mov	r0, r7
 8008578:	e7ba      	b.n	80084f0 <_dtoa_r+0x9d8>
 800857a:	2201      	movs	r2, #1
 800857c:	e7e2      	b.n	8008544 <_dtoa_r+0xa2c>
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	db04      	blt.n	800858e <_dtoa_r+0xa76>
 8008584:	9906      	ldr	r1, [sp, #24]
 8008586:	430b      	orrs	r3, r1
 8008588:	9904      	ldr	r1, [sp, #16]
 800858a:	430b      	orrs	r3, r1
 800858c:	d122      	bne.n	80085d4 <_dtoa_r+0xabc>
 800858e:	2a00      	cmp	r2, #0
 8008590:	ddee      	ble.n	8008570 <_dtoa_r+0xa58>
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	2201      	movs	r2, #1
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fe95 	bl	80092c8 <__lshift>
 800859e:	4631      	mov	r1, r6
 80085a0:	ee08 0a10 	vmov	s16, r0
 80085a4:	f000 ff00 	bl	80093a8 <__mcmp>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	dc03      	bgt.n	80085b4 <_dtoa_r+0xa9c>
 80085ac:	d1e0      	bne.n	8008570 <_dtoa_r+0xa58>
 80085ae:	f01a 0f01 	tst.w	sl, #1
 80085b2:	d0dd      	beq.n	8008570 <_dtoa_r+0xa58>
 80085b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085b8:	d1d7      	bne.n	800856a <_dtoa_r+0xa52>
 80085ba:	2339      	movs	r3, #57	; 0x39
 80085bc:	f88b 3000 	strb.w	r3, [fp]
 80085c0:	462b      	mov	r3, r5
 80085c2:	461d      	mov	r5, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ca:	2a39      	cmp	r2, #57	; 0x39
 80085cc:	d071      	beq.n	80086b2 <_dtoa_r+0xb9a>
 80085ce:	3201      	adds	r2, #1
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e746      	b.n	8008462 <_dtoa_r+0x94a>
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	dd07      	ble.n	80085e8 <_dtoa_r+0xad0>
 80085d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085dc:	d0ed      	beq.n	80085ba <_dtoa_r+0xaa2>
 80085de:	f10a 0301 	add.w	r3, sl, #1
 80085e2:	f88b 3000 	strb.w	r3, [fp]
 80085e6:	e73c      	b.n	8008462 <_dtoa_r+0x94a>
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085ee:	4599      	cmp	r9, r3
 80085f0:	d047      	beq.n	8008682 <_dtoa_r+0xb6a>
 80085f2:	ee18 1a10 	vmov	r1, s16
 80085f6:	2300      	movs	r3, #0
 80085f8:	220a      	movs	r2, #10
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fc6a 	bl	8008ed4 <__multadd>
 8008600:	45b8      	cmp	r8, r7
 8008602:	ee08 0a10 	vmov	s16, r0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f04f 020a 	mov.w	r2, #10
 800860e:	4641      	mov	r1, r8
 8008610:	4620      	mov	r0, r4
 8008612:	d106      	bne.n	8008622 <_dtoa_r+0xb0a>
 8008614:	f000 fc5e 	bl	8008ed4 <__multadd>
 8008618:	4680      	mov	r8, r0
 800861a:	4607      	mov	r7, r0
 800861c:	f109 0901 	add.w	r9, r9, #1
 8008620:	e772      	b.n	8008508 <_dtoa_r+0x9f0>
 8008622:	f000 fc57 	bl	8008ed4 <__multadd>
 8008626:	4639      	mov	r1, r7
 8008628:	4680      	mov	r8, r0
 800862a:	2300      	movs	r3, #0
 800862c:	220a      	movs	r2, #10
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fc50 	bl	8008ed4 <__multadd>
 8008634:	4607      	mov	r7, r0
 8008636:	e7f1      	b.n	800861c <_dtoa_r+0xb04>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	9d01      	ldr	r5, [sp, #4]
 800863e:	ee18 0a10 	vmov	r0, s16
 8008642:	4631      	mov	r1, r6
 8008644:	f7ff f9dc 	bl	8007a00 <quorem>
 8008648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	f805 ab01 	strb.w	sl, [r5], #1
 8008652:	1aea      	subs	r2, r5, r3
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	4293      	cmp	r3, r2
 8008658:	dd09      	ble.n	800866e <_dtoa_r+0xb56>
 800865a:	ee18 1a10 	vmov	r1, s16
 800865e:	2300      	movs	r3, #0
 8008660:	220a      	movs	r2, #10
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fc36 	bl	8008ed4 <__multadd>
 8008668:	ee08 0a10 	vmov	s16, r0
 800866c:	e7e7      	b.n	800863e <_dtoa_r+0xb26>
 800866e:	9b02      	ldr	r3, [sp, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfc8      	it	gt
 8008674:	461d      	movgt	r5, r3
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	bfd8      	it	le
 800867a:	2501      	movle	r5, #1
 800867c:	441d      	add	r5, r3
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	2201      	movs	r2, #1
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fe1d 	bl	80092c8 <__lshift>
 800868e:	4631      	mov	r1, r6
 8008690:	ee08 0a10 	vmov	s16, r0
 8008694:	f000 fe88 	bl	80093a8 <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	dc91      	bgt.n	80085c0 <_dtoa_r+0xaa8>
 800869c:	d102      	bne.n	80086a4 <_dtoa_r+0xb8c>
 800869e:	f01a 0f01 	tst.w	sl, #1
 80086a2:	d18d      	bne.n	80085c0 <_dtoa_r+0xaa8>
 80086a4:	462b      	mov	r3, r5
 80086a6:	461d      	mov	r5, r3
 80086a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086ac:	2a30      	cmp	r2, #48	; 0x30
 80086ae:	d0fa      	beq.n	80086a6 <_dtoa_r+0xb8e>
 80086b0:	e6d7      	b.n	8008462 <_dtoa_r+0x94a>
 80086b2:	9a01      	ldr	r2, [sp, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d184      	bne.n	80085c2 <_dtoa_r+0xaaa>
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2331      	movs	r3, #49	; 0x31
 80086c0:	7013      	strb	r3, [r2, #0]
 80086c2:	e6ce      	b.n	8008462 <_dtoa_r+0x94a>
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <_dtoa_r+0xbd4>)
 80086c6:	f7ff ba95 	b.w	8007bf4 <_dtoa_r+0xdc>
 80086ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f47f aa6e 	bne.w	8007bae <_dtoa_r+0x96>
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <_dtoa_r+0xbd8>)
 80086d4:	f7ff ba8e 	b.w	8007bf4 <_dtoa_r+0xdc>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dcae      	bgt.n	800863c <_dtoa_r+0xb24>
 80086de:	9b06      	ldr	r3, [sp, #24]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	f73f aea8 	bgt.w	8008436 <_dtoa_r+0x91e>
 80086e6:	e7a9      	b.n	800863c <_dtoa_r+0xb24>
 80086e8:	0800bdd8 	.word	0x0800bdd8
 80086ec:	0800bbdc 	.word	0x0800bbdc
 80086f0:	0800bd59 	.word	0x0800bd59

080086f4 <rshift>:
 80086f4:	6903      	ldr	r3, [r0, #16]
 80086f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008702:	f100 0414 	add.w	r4, r0, #20
 8008706:	dd45      	ble.n	8008794 <rshift+0xa0>
 8008708:	f011 011f 	ands.w	r1, r1, #31
 800870c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008710:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008714:	d10c      	bne.n	8008730 <rshift+0x3c>
 8008716:	f100 0710 	add.w	r7, r0, #16
 800871a:	4629      	mov	r1, r5
 800871c:	42b1      	cmp	r1, r6
 800871e:	d334      	bcc.n	800878a <rshift+0x96>
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	1eea      	subs	r2, r5, #3
 8008726:	4296      	cmp	r6, r2
 8008728:	bf38      	it	cc
 800872a:	2300      	movcc	r3, #0
 800872c:	4423      	add	r3, r4
 800872e:	e015      	b.n	800875c <rshift+0x68>
 8008730:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008734:	f1c1 0820 	rsb	r8, r1, #32
 8008738:	40cf      	lsrs	r7, r1
 800873a:	f105 0e04 	add.w	lr, r5, #4
 800873e:	46a1      	mov	r9, r4
 8008740:	4576      	cmp	r6, lr
 8008742:	46f4      	mov	ip, lr
 8008744:	d815      	bhi.n	8008772 <rshift+0x7e>
 8008746:	1a9a      	subs	r2, r3, r2
 8008748:	0092      	lsls	r2, r2, #2
 800874a:	3a04      	subs	r2, #4
 800874c:	3501      	adds	r5, #1
 800874e:	42ae      	cmp	r6, r5
 8008750:	bf38      	it	cc
 8008752:	2200      	movcc	r2, #0
 8008754:	18a3      	adds	r3, r4, r2
 8008756:	50a7      	str	r7, [r4, r2]
 8008758:	b107      	cbz	r7, 800875c <rshift+0x68>
 800875a:	3304      	adds	r3, #4
 800875c:	1b1a      	subs	r2, r3, r4
 800875e:	42a3      	cmp	r3, r4
 8008760:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008764:	bf08      	it	eq
 8008766:	2300      	moveq	r3, #0
 8008768:	6102      	str	r2, [r0, #16]
 800876a:	bf08      	it	eq
 800876c:	6143      	streq	r3, [r0, #20]
 800876e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008772:	f8dc c000 	ldr.w	ip, [ip]
 8008776:	fa0c fc08 	lsl.w	ip, ip, r8
 800877a:	ea4c 0707 	orr.w	r7, ip, r7
 800877e:	f849 7b04 	str.w	r7, [r9], #4
 8008782:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008786:	40cf      	lsrs	r7, r1
 8008788:	e7da      	b.n	8008740 <rshift+0x4c>
 800878a:	f851 cb04 	ldr.w	ip, [r1], #4
 800878e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008792:	e7c3      	b.n	800871c <rshift+0x28>
 8008794:	4623      	mov	r3, r4
 8008796:	e7e1      	b.n	800875c <rshift+0x68>

08008798 <__hexdig_fun>:
 8008798:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800879c:	2b09      	cmp	r3, #9
 800879e:	d802      	bhi.n	80087a6 <__hexdig_fun+0xe>
 80087a0:	3820      	subs	r0, #32
 80087a2:	b2c0      	uxtb	r0, r0
 80087a4:	4770      	bx	lr
 80087a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d801      	bhi.n	80087b2 <__hexdig_fun+0x1a>
 80087ae:	3847      	subs	r0, #71	; 0x47
 80087b0:	e7f7      	b.n	80087a2 <__hexdig_fun+0xa>
 80087b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d801      	bhi.n	80087be <__hexdig_fun+0x26>
 80087ba:	3827      	subs	r0, #39	; 0x27
 80087bc:	e7f1      	b.n	80087a2 <__hexdig_fun+0xa>
 80087be:	2000      	movs	r0, #0
 80087c0:	4770      	bx	lr
	...

080087c4 <__gethex>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	ed2d 8b02 	vpush	{d8}
 80087cc:	b089      	sub	sp, #36	; 0x24
 80087ce:	ee08 0a10 	vmov	s16, r0
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	4bb4      	ldr	r3, [pc, #720]	; (8008aa8 <__gethex+0x2e4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	4618      	mov	r0, r3
 80087dc:	468b      	mov	fp, r1
 80087de:	4690      	mov	r8, r2
 80087e0:	f7f7 fd16 	bl	8000210 <strlen>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f8db 2000 	ldr.w	r2, [fp]
 80087ea:	4403      	add	r3, r0
 80087ec:	4682      	mov	sl, r0
 80087ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80087f2:	9305      	str	r3, [sp, #20]
 80087f4:	1c93      	adds	r3, r2, #2
 80087f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087fe:	32fe      	adds	r2, #254	; 0xfe
 8008800:	18d1      	adds	r1, r2, r3
 8008802:	461f      	mov	r7, r3
 8008804:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008808:	9100      	str	r1, [sp, #0]
 800880a:	2830      	cmp	r0, #48	; 0x30
 800880c:	d0f8      	beq.n	8008800 <__gethex+0x3c>
 800880e:	f7ff ffc3 	bl	8008798 <__hexdig_fun>
 8008812:	4604      	mov	r4, r0
 8008814:	2800      	cmp	r0, #0
 8008816:	d13a      	bne.n	800888e <__gethex+0xca>
 8008818:	9901      	ldr	r1, [sp, #4]
 800881a:	4652      	mov	r2, sl
 800881c:	4638      	mov	r0, r7
 800881e:	f001 fa23 	bl	8009c68 <strncmp>
 8008822:	4605      	mov	r5, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d168      	bne.n	80088fa <__gethex+0x136>
 8008828:	f817 000a 	ldrb.w	r0, [r7, sl]
 800882c:	eb07 060a 	add.w	r6, r7, sl
 8008830:	f7ff ffb2 	bl	8008798 <__hexdig_fun>
 8008834:	2800      	cmp	r0, #0
 8008836:	d062      	beq.n	80088fe <__gethex+0x13a>
 8008838:	4633      	mov	r3, r6
 800883a:	7818      	ldrb	r0, [r3, #0]
 800883c:	2830      	cmp	r0, #48	; 0x30
 800883e:	461f      	mov	r7, r3
 8008840:	f103 0301 	add.w	r3, r3, #1
 8008844:	d0f9      	beq.n	800883a <__gethex+0x76>
 8008846:	f7ff ffa7 	bl	8008798 <__hexdig_fun>
 800884a:	2301      	movs	r3, #1
 800884c:	fab0 f480 	clz	r4, r0
 8008850:	0964      	lsrs	r4, r4, #5
 8008852:	4635      	mov	r5, r6
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	463a      	mov	r2, r7
 8008858:	4616      	mov	r6, r2
 800885a:	3201      	adds	r2, #1
 800885c:	7830      	ldrb	r0, [r6, #0]
 800885e:	f7ff ff9b 	bl	8008798 <__hexdig_fun>
 8008862:	2800      	cmp	r0, #0
 8008864:	d1f8      	bne.n	8008858 <__gethex+0x94>
 8008866:	9901      	ldr	r1, [sp, #4]
 8008868:	4652      	mov	r2, sl
 800886a:	4630      	mov	r0, r6
 800886c:	f001 f9fc 	bl	8009c68 <strncmp>
 8008870:	b980      	cbnz	r0, 8008894 <__gethex+0xd0>
 8008872:	b94d      	cbnz	r5, 8008888 <__gethex+0xc4>
 8008874:	eb06 050a 	add.w	r5, r6, sl
 8008878:	462a      	mov	r2, r5
 800887a:	4616      	mov	r6, r2
 800887c:	3201      	adds	r2, #1
 800887e:	7830      	ldrb	r0, [r6, #0]
 8008880:	f7ff ff8a 	bl	8008798 <__hexdig_fun>
 8008884:	2800      	cmp	r0, #0
 8008886:	d1f8      	bne.n	800887a <__gethex+0xb6>
 8008888:	1bad      	subs	r5, r5, r6
 800888a:	00ad      	lsls	r5, r5, #2
 800888c:	e004      	b.n	8008898 <__gethex+0xd4>
 800888e:	2400      	movs	r4, #0
 8008890:	4625      	mov	r5, r4
 8008892:	e7e0      	b.n	8008856 <__gethex+0x92>
 8008894:	2d00      	cmp	r5, #0
 8008896:	d1f7      	bne.n	8008888 <__gethex+0xc4>
 8008898:	7833      	ldrb	r3, [r6, #0]
 800889a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800889e:	2b50      	cmp	r3, #80	; 0x50
 80088a0:	d13b      	bne.n	800891a <__gethex+0x156>
 80088a2:	7873      	ldrb	r3, [r6, #1]
 80088a4:	2b2b      	cmp	r3, #43	; 0x2b
 80088a6:	d02c      	beq.n	8008902 <__gethex+0x13e>
 80088a8:	2b2d      	cmp	r3, #45	; 0x2d
 80088aa:	d02e      	beq.n	800890a <__gethex+0x146>
 80088ac:	1c71      	adds	r1, r6, #1
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	7808      	ldrb	r0, [r1, #0]
 80088b4:	f7ff ff70 	bl	8008798 <__hexdig_fun>
 80088b8:	1e43      	subs	r3, r0, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b18      	cmp	r3, #24
 80088be:	d82c      	bhi.n	800891a <__gethex+0x156>
 80088c0:	f1a0 0210 	sub.w	r2, r0, #16
 80088c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088c8:	f7ff ff66 	bl	8008798 <__hexdig_fun>
 80088cc:	1e43      	subs	r3, r0, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b18      	cmp	r3, #24
 80088d2:	d91d      	bls.n	8008910 <__gethex+0x14c>
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	d000      	beq.n	80088dc <__gethex+0x118>
 80088da:	4252      	negs	r2, r2
 80088dc:	4415      	add	r5, r2
 80088de:	f8cb 1000 	str.w	r1, [fp]
 80088e2:	b1e4      	cbz	r4, 800891e <__gethex+0x15a>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bf14      	ite	ne
 80088ea:	2700      	movne	r7, #0
 80088ec:	2706      	moveq	r7, #6
 80088ee:	4638      	mov	r0, r7
 80088f0:	b009      	add	sp, #36	; 0x24
 80088f2:	ecbd 8b02 	vpop	{d8}
 80088f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fa:	463e      	mov	r6, r7
 80088fc:	4625      	mov	r5, r4
 80088fe:	2401      	movs	r4, #1
 8008900:	e7ca      	b.n	8008898 <__gethex+0xd4>
 8008902:	f04f 0900 	mov.w	r9, #0
 8008906:	1cb1      	adds	r1, r6, #2
 8008908:	e7d3      	b.n	80088b2 <__gethex+0xee>
 800890a:	f04f 0901 	mov.w	r9, #1
 800890e:	e7fa      	b.n	8008906 <__gethex+0x142>
 8008910:	230a      	movs	r3, #10
 8008912:	fb03 0202 	mla	r2, r3, r2, r0
 8008916:	3a10      	subs	r2, #16
 8008918:	e7d4      	b.n	80088c4 <__gethex+0x100>
 800891a:	4631      	mov	r1, r6
 800891c:	e7df      	b.n	80088de <__gethex+0x11a>
 800891e:	1bf3      	subs	r3, r6, r7
 8008920:	3b01      	subs	r3, #1
 8008922:	4621      	mov	r1, r4
 8008924:	2b07      	cmp	r3, #7
 8008926:	dc0b      	bgt.n	8008940 <__gethex+0x17c>
 8008928:	ee18 0a10 	vmov	r0, s16
 800892c:	f000 fa70 	bl	8008e10 <_Balloc>
 8008930:	4604      	mov	r4, r0
 8008932:	b940      	cbnz	r0, 8008946 <__gethex+0x182>
 8008934:	4b5d      	ldr	r3, [pc, #372]	; (8008aac <__gethex+0x2e8>)
 8008936:	4602      	mov	r2, r0
 8008938:	21de      	movs	r1, #222	; 0xde
 800893a:	485d      	ldr	r0, [pc, #372]	; (8008ab0 <__gethex+0x2ec>)
 800893c:	f001 f9b6 	bl	8009cac <__assert_func>
 8008940:	3101      	adds	r1, #1
 8008942:	105b      	asrs	r3, r3, #1
 8008944:	e7ee      	b.n	8008924 <__gethex+0x160>
 8008946:	f100 0914 	add.w	r9, r0, #20
 800894a:	f04f 0b00 	mov.w	fp, #0
 800894e:	f1ca 0301 	rsb	r3, sl, #1
 8008952:	f8cd 9008 	str.w	r9, [sp, #8]
 8008956:	f8cd b000 	str.w	fp, [sp]
 800895a:	9306      	str	r3, [sp, #24]
 800895c:	42b7      	cmp	r7, r6
 800895e:	d340      	bcc.n	80089e2 <__gethex+0x21e>
 8008960:	9802      	ldr	r0, [sp, #8]
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	f840 3b04 	str.w	r3, [r0], #4
 8008968:	eba0 0009 	sub.w	r0, r0, r9
 800896c:	1080      	asrs	r0, r0, #2
 800896e:	0146      	lsls	r6, r0, #5
 8008970:	6120      	str	r0, [r4, #16]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fb3e 	bl	8008ff4 <__hi0bits>
 8008978:	1a30      	subs	r0, r6, r0
 800897a:	f8d8 6000 	ldr.w	r6, [r8]
 800897e:	42b0      	cmp	r0, r6
 8008980:	dd63      	ble.n	8008a4a <__gethex+0x286>
 8008982:	1b87      	subs	r7, r0, r6
 8008984:	4639      	mov	r1, r7
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fee2 	bl	8009750 <__any_on>
 800898c:	4682      	mov	sl, r0
 800898e:	b1a8      	cbz	r0, 80089bc <__gethex+0x1f8>
 8008990:	1e7b      	subs	r3, r7, #1
 8008992:	1159      	asrs	r1, r3, #5
 8008994:	f003 021f 	and.w	r2, r3, #31
 8008998:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800899c:	f04f 0a01 	mov.w	sl, #1
 80089a0:	fa0a f202 	lsl.w	r2, sl, r2
 80089a4:	420a      	tst	r2, r1
 80089a6:	d009      	beq.n	80089bc <__gethex+0x1f8>
 80089a8:	4553      	cmp	r3, sl
 80089aa:	dd05      	ble.n	80089b8 <__gethex+0x1f4>
 80089ac:	1eb9      	subs	r1, r7, #2
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fece 	bl	8009750 <__any_on>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d145      	bne.n	8008a44 <__gethex+0x280>
 80089b8:	f04f 0a02 	mov.w	sl, #2
 80089bc:	4639      	mov	r1, r7
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff fe98 	bl	80086f4 <rshift>
 80089c4:	443d      	add	r5, r7
 80089c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ca:	42ab      	cmp	r3, r5
 80089cc:	da4c      	bge.n	8008a68 <__gethex+0x2a4>
 80089ce:	ee18 0a10 	vmov	r0, s16
 80089d2:	4621      	mov	r1, r4
 80089d4:	f000 fa5c 	bl	8008e90 <_Bfree>
 80089d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089da:	2300      	movs	r3, #0
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	27a3      	movs	r7, #163	; 0xa3
 80089e0:	e785      	b.n	80088ee <__gethex+0x12a>
 80089e2:	1e73      	subs	r3, r6, #1
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d019      	beq.n	8008a24 <__gethex+0x260>
 80089f0:	f1bb 0f20 	cmp.w	fp, #32
 80089f4:	d107      	bne.n	8008a06 <__gethex+0x242>
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	f843 2b04 	str.w	r2, [r3], #4
 80089fe:	9302      	str	r3, [sp, #8]
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	469b      	mov	fp, r3
 8008a06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a0a:	f7ff fec5 	bl	8008798 <__hexdig_fun>
 8008a0e:	9b00      	ldr	r3, [sp, #0]
 8008a10:	f000 000f 	and.w	r0, r0, #15
 8008a14:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a18:	4303      	orrs	r3, r0
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	f10b 0b04 	add.w	fp, fp, #4
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	e00d      	b.n	8008a40 <__gethex+0x27c>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	9a06      	ldr	r2, [sp, #24]
 8008a28:	4413      	add	r3, r2
 8008a2a:	42bb      	cmp	r3, r7
 8008a2c:	d3e0      	bcc.n	80089f0 <__gethex+0x22c>
 8008a2e:	4618      	mov	r0, r3
 8008a30:	9901      	ldr	r1, [sp, #4]
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	4652      	mov	r2, sl
 8008a36:	f001 f917 	bl	8009c68 <strncmp>
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d1d7      	bne.n	80089f0 <__gethex+0x22c>
 8008a40:	461e      	mov	r6, r3
 8008a42:	e78b      	b.n	800895c <__gethex+0x198>
 8008a44:	f04f 0a03 	mov.w	sl, #3
 8008a48:	e7b8      	b.n	80089bc <__gethex+0x1f8>
 8008a4a:	da0a      	bge.n	8008a62 <__gethex+0x29e>
 8008a4c:	1a37      	subs	r7, r6, r0
 8008a4e:	4621      	mov	r1, r4
 8008a50:	ee18 0a10 	vmov	r0, s16
 8008a54:	463a      	mov	r2, r7
 8008a56:	f000 fc37 	bl	80092c8 <__lshift>
 8008a5a:	1bed      	subs	r5, r5, r7
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	f100 0914 	add.w	r9, r0, #20
 8008a62:	f04f 0a00 	mov.w	sl, #0
 8008a66:	e7ae      	b.n	80089c6 <__gethex+0x202>
 8008a68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a6c:	42a8      	cmp	r0, r5
 8008a6e:	dd72      	ble.n	8008b56 <__gethex+0x392>
 8008a70:	1b45      	subs	r5, r0, r5
 8008a72:	42ae      	cmp	r6, r5
 8008a74:	dc36      	bgt.n	8008ae4 <__gethex+0x320>
 8008a76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d02a      	beq.n	8008ad4 <__gethex+0x310>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d02c      	beq.n	8008adc <__gethex+0x318>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d11c      	bne.n	8008ac0 <__gethex+0x2fc>
 8008a86:	42ae      	cmp	r6, r5
 8008a88:	d11a      	bne.n	8008ac0 <__gethex+0x2fc>
 8008a8a:	2e01      	cmp	r6, #1
 8008a8c:	d112      	bne.n	8008ab4 <__gethex+0x2f0>
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	2301      	movs	r3, #1
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	f8c9 3000 	str.w	r3, [r9]
 8008a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008aa0:	2762      	movs	r7, #98	; 0x62
 8008aa2:	601c      	str	r4, [r3, #0]
 8008aa4:	e723      	b.n	80088ee <__gethex+0x12a>
 8008aa6:	bf00      	nop
 8008aa8:	0800be50 	.word	0x0800be50
 8008aac:	0800bdd8 	.word	0x0800bdd8
 8008ab0:	0800bde9 	.word	0x0800bde9
 8008ab4:	1e71      	subs	r1, r6, #1
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 fe4a 	bl	8009750 <__any_on>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1e6      	bne.n	8008a8e <__gethex+0x2ca>
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f000 f9e3 	bl	8008e90 <_Bfree>
 8008aca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008acc:	2300      	movs	r3, #0
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	2750      	movs	r7, #80	; 0x50
 8008ad2:	e70c      	b.n	80088ee <__gethex+0x12a>
 8008ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f2      	bne.n	8008ac0 <__gethex+0x2fc>
 8008ada:	e7d8      	b.n	8008a8e <__gethex+0x2ca>
 8008adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1d5      	bne.n	8008a8e <__gethex+0x2ca>
 8008ae2:	e7ed      	b.n	8008ac0 <__gethex+0x2fc>
 8008ae4:	1e6f      	subs	r7, r5, #1
 8008ae6:	f1ba 0f00 	cmp.w	sl, #0
 8008aea:	d131      	bne.n	8008b50 <__gethex+0x38c>
 8008aec:	b127      	cbz	r7, 8008af8 <__gethex+0x334>
 8008aee:	4639      	mov	r1, r7
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fe2d 	bl	8009750 <__any_on>
 8008af6:	4682      	mov	sl, r0
 8008af8:	117b      	asrs	r3, r7, #5
 8008afa:	2101      	movs	r1, #1
 8008afc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b00:	f007 071f 	and.w	r7, r7, #31
 8008b04:	fa01 f707 	lsl.w	r7, r1, r7
 8008b08:	421f      	tst	r7, r3
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bf18      	it	ne
 8008b10:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b14:	1b76      	subs	r6, r6, r5
 8008b16:	f7ff fded 	bl	80086f4 <rshift>
 8008b1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b1e:	2702      	movs	r7, #2
 8008b20:	f1ba 0f00 	cmp.w	sl, #0
 8008b24:	d048      	beq.n	8008bb8 <__gethex+0x3f4>
 8008b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d015      	beq.n	8008b5a <__gethex+0x396>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d017      	beq.n	8008b62 <__gethex+0x39e>
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d109      	bne.n	8008b4a <__gethex+0x386>
 8008b36:	f01a 0f02 	tst.w	sl, #2
 8008b3a:	d006      	beq.n	8008b4a <__gethex+0x386>
 8008b3c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b40:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b44:	f01a 0f01 	tst.w	sl, #1
 8008b48:	d10e      	bne.n	8008b68 <__gethex+0x3a4>
 8008b4a:	f047 0710 	orr.w	r7, r7, #16
 8008b4e:	e033      	b.n	8008bb8 <__gethex+0x3f4>
 8008b50:	f04f 0a01 	mov.w	sl, #1
 8008b54:	e7d0      	b.n	8008af8 <__gethex+0x334>
 8008b56:	2701      	movs	r7, #1
 8008b58:	e7e2      	b.n	8008b20 <__gethex+0x35c>
 8008b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b5c:	f1c3 0301 	rsb	r3, r3, #1
 8008b60:	9315      	str	r3, [sp, #84]	; 0x54
 8008b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0f0      	beq.n	8008b4a <__gethex+0x386>
 8008b68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b6c:	f104 0314 	add.w	r3, r4, #20
 8008b70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b78:	f04f 0c00 	mov.w	ip, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b86:	d01c      	beq.n	8008bc2 <__gethex+0x3fe>
 8008b88:	3201      	adds	r2, #1
 8008b8a:	6002      	str	r2, [r0, #0]
 8008b8c:	2f02      	cmp	r7, #2
 8008b8e:	f104 0314 	add.w	r3, r4, #20
 8008b92:	d13f      	bne.n	8008c14 <__gethex+0x450>
 8008b94:	f8d8 2000 	ldr.w	r2, [r8]
 8008b98:	3a01      	subs	r2, #1
 8008b9a:	42b2      	cmp	r2, r6
 8008b9c:	d10a      	bne.n	8008bb4 <__gethex+0x3f0>
 8008b9e:	1171      	asrs	r1, r6, #5
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ba6:	f006 061f 	and.w	r6, r6, #31
 8008baa:	fa02 f606 	lsl.w	r6, r2, r6
 8008bae:	421e      	tst	r6, r3
 8008bb0:	bf18      	it	ne
 8008bb2:	4617      	movne	r7, r2
 8008bb4:	f047 0720 	orr.w	r7, r7, #32
 8008bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bba:	601c      	str	r4, [r3, #0]
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	601d      	str	r5, [r3, #0]
 8008bc0:	e695      	b.n	80088ee <__gethex+0x12a>
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bc8:	d8d8      	bhi.n	8008b7c <__gethex+0x3b8>
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	459b      	cmp	fp, r3
 8008bce:	db19      	blt.n	8008c04 <__gethex+0x440>
 8008bd0:	6861      	ldr	r1, [r4, #4]
 8008bd2:	ee18 0a10 	vmov	r0, s16
 8008bd6:	3101      	adds	r1, #1
 8008bd8:	f000 f91a 	bl	8008e10 <_Balloc>
 8008bdc:	4681      	mov	r9, r0
 8008bde:	b918      	cbnz	r0, 8008be8 <__gethex+0x424>
 8008be0:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <__gethex+0x488>)
 8008be2:	4602      	mov	r2, r0
 8008be4:	2184      	movs	r1, #132	; 0x84
 8008be6:	e6a8      	b.n	800893a <__gethex+0x176>
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	3202      	adds	r2, #2
 8008bec:	f104 010c 	add.w	r1, r4, #12
 8008bf0:	0092      	lsls	r2, r2, #2
 8008bf2:	300c      	adds	r0, #12
 8008bf4:	f7fd f9a2 	bl	8005f3c <memcpy>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	ee18 0a10 	vmov	r0, s16
 8008bfe:	f000 f947 	bl	8008e90 <_Bfree>
 8008c02:	464c      	mov	r4, r9
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c0c:	6122      	str	r2, [r4, #16]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	615a      	str	r2, [r3, #20]
 8008c12:	e7bb      	b.n	8008b8c <__gethex+0x3c8>
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	455a      	cmp	r2, fp
 8008c18:	dd0b      	ble.n	8008c32 <__gethex+0x46e>
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7ff fd69 	bl	80086f4 <rshift>
 8008c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c26:	3501      	adds	r5, #1
 8008c28:	42ab      	cmp	r3, r5
 8008c2a:	f6ff aed0 	blt.w	80089ce <__gethex+0x20a>
 8008c2e:	2701      	movs	r7, #1
 8008c30:	e7c0      	b.n	8008bb4 <__gethex+0x3f0>
 8008c32:	f016 061f 	ands.w	r6, r6, #31
 8008c36:	d0fa      	beq.n	8008c2e <__gethex+0x46a>
 8008c38:	4453      	add	r3, sl
 8008c3a:	f1c6 0620 	rsb	r6, r6, #32
 8008c3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c42:	f000 f9d7 	bl	8008ff4 <__hi0bits>
 8008c46:	42b0      	cmp	r0, r6
 8008c48:	dbe7      	blt.n	8008c1a <__gethex+0x456>
 8008c4a:	e7f0      	b.n	8008c2e <__gethex+0x46a>
 8008c4c:	0800bdd8 	.word	0x0800bdd8

08008c50 <L_shift>:
 8008c50:	f1c2 0208 	rsb	r2, r2, #8
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	b570      	push	{r4, r5, r6, lr}
 8008c58:	f1c2 0620 	rsb	r6, r2, #32
 8008c5c:	6843      	ldr	r3, [r0, #4]
 8008c5e:	6804      	ldr	r4, [r0, #0]
 8008c60:	fa03 f506 	lsl.w	r5, r3, r6
 8008c64:	432c      	orrs	r4, r5
 8008c66:	40d3      	lsrs	r3, r2
 8008c68:	6004      	str	r4, [r0, #0]
 8008c6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c6e:	4288      	cmp	r0, r1
 8008c70:	d3f4      	bcc.n	8008c5c <L_shift+0xc>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}

08008c74 <__match>:
 8008c74:	b530      	push	{r4, r5, lr}
 8008c76:	6803      	ldr	r3, [r0, #0]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c7e:	b914      	cbnz	r4, 8008c86 <__match+0x12>
 8008c80:	6003      	str	r3, [r0, #0]
 8008c82:	2001      	movs	r0, #1
 8008c84:	bd30      	pop	{r4, r5, pc}
 8008c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c8e:	2d19      	cmp	r5, #25
 8008c90:	bf98      	it	ls
 8008c92:	3220      	addls	r2, #32
 8008c94:	42a2      	cmp	r2, r4
 8008c96:	d0f0      	beq.n	8008c7a <__match+0x6>
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e7f3      	b.n	8008c84 <__match+0x10>

08008c9c <__hexnan>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	680b      	ldr	r3, [r1, #0]
 8008ca2:	115e      	asrs	r6, r3, #5
 8008ca4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ca8:	f013 031f 	ands.w	r3, r3, #31
 8008cac:	b087      	sub	sp, #28
 8008cae:	bf18      	it	ne
 8008cb0:	3604      	addne	r6, #4
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	1f37      	subs	r7, r6, #4
 8008cb6:	4690      	mov	r8, r2
 8008cb8:	6802      	ldr	r2, [r0, #0]
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cc2:	46b9      	mov	r9, r7
 8008cc4:	463c      	mov	r4, r7
 8008cc6:	9502      	str	r5, [sp, #8]
 8008cc8:	46ab      	mov	fp, r5
 8008cca:	7851      	ldrb	r1, [r2, #1]
 8008ccc:	1c53      	adds	r3, r2, #1
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	b341      	cbz	r1, 8008d24 <__hexnan+0x88>
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	9205      	str	r2, [sp, #20]
 8008cd6:	9104      	str	r1, [sp, #16]
 8008cd8:	f7ff fd5e 	bl	8008798 <__hexdig_fun>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d14f      	bne.n	8008d80 <__hexnan+0xe4>
 8008ce0:	9904      	ldr	r1, [sp, #16]
 8008ce2:	9a05      	ldr	r2, [sp, #20]
 8008ce4:	2920      	cmp	r1, #32
 8008ce6:	d818      	bhi.n	8008d1a <__hexnan+0x7e>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	459b      	cmp	fp, r3
 8008cec:	dd13      	ble.n	8008d16 <__hexnan+0x7a>
 8008cee:	454c      	cmp	r4, r9
 8008cf0:	d206      	bcs.n	8008d00 <__hexnan+0x64>
 8008cf2:	2d07      	cmp	r5, #7
 8008cf4:	dc04      	bgt.n	8008d00 <__hexnan+0x64>
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff ffa8 	bl	8008c50 <L_shift>
 8008d00:	4544      	cmp	r4, r8
 8008d02:	d950      	bls.n	8008da6 <__hexnan+0x10a>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f1a4 0904 	sub.w	r9, r4, #4
 8008d0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d0e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d12:	464c      	mov	r4, r9
 8008d14:	461d      	mov	r5, r3
 8008d16:	9a03      	ldr	r2, [sp, #12]
 8008d18:	e7d7      	b.n	8008cca <__hexnan+0x2e>
 8008d1a:	2929      	cmp	r1, #41	; 0x29
 8008d1c:	d156      	bne.n	8008dcc <__hexnan+0x130>
 8008d1e:	3202      	adds	r2, #2
 8008d20:	f8ca 2000 	str.w	r2, [sl]
 8008d24:	f1bb 0f00 	cmp.w	fp, #0
 8008d28:	d050      	beq.n	8008dcc <__hexnan+0x130>
 8008d2a:	454c      	cmp	r4, r9
 8008d2c:	d206      	bcs.n	8008d3c <__hexnan+0xa0>
 8008d2e:	2d07      	cmp	r5, #7
 8008d30:	dc04      	bgt.n	8008d3c <__hexnan+0xa0>
 8008d32:	462a      	mov	r2, r5
 8008d34:	4649      	mov	r1, r9
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff ff8a 	bl	8008c50 <L_shift>
 8008d3c:	4544      	cmp	r4, r8
 8008d3e:	d934      	bls.n	8008daa <__hexnan+0x10e>
 8008d40:	f1a8 0204 	sub.w	r2, r8, #4
 8008d44:	4623      	mov	r3, r4
 8008d46:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d4e:	429f      	cmp	r7, r3
 8008d50:	d2f9      	bcs.n	8008d46 <__hexnan+0xaa>
 8008d52:	1b3b      	subs	r3, r7, r4
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	3304      	adds	r3, #4
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	3e03      	subs	r6, #3
 8008d5e:	42b4      	cmp	r4, r6
 8008d60:	bf88      	it	hi
 8008d62:	2304      	movhi	r3, #4
 8008d64:	4443      	add	r3, r8
 8008d66:	2200      	movs	r2, #0
 8008d68:	f843 2b04 	str.w	r2, [r3], #4
 8008d6c:	429f      	cmp	r7, r3
 8008d6e:	d2fb      	bcs.n	8008d68 <__hexnan+0xcc>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	b91b      	cbnz	r3, 8008d7c <__hexnan+0xe0>
 8008d74:	4547      	cmp	r7, r8
 8008d76:	d127      	bne.n	8008dc8 <__hexnan+0x12c>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	2005      	movs	r0, #5
 8008d7e:	e026      	b.n	8008dce <__hexnan+0x132>
 8008d80:	3501      	adds	r5, #1
 8008d82:	2d08      	cmp	r5, #8
 8008d84:	f10b 0b01 	add.w	fp, fp, #1
 8008d88:	dd06      	ble.n	8008d98 <__hexnan+0xfc>
 8008d8a:	4544      	cmp	r4, r8
 8008d8c:	d9c3      	bls.n	8008d16 <__hexnan+0x7a>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d94:	2501      	movs	r5, #1
 8008d96:	3c04      	subs	r4, #4
 8008d98:	6822      	ldr	r2, [r4, #0]
 8008d9a:	f000 000f 	and.w	r0, r0, #15
 8008d9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	e7b7      	b.n	8008d16 <__hexnan+0x7a>
 8008da6:	2508      	movs	r5, #8
 8008da8:	e7b5      	b.n	8008d16 <__hexnan+0x7a>
 8008daa:	9b01      	ldr	r3, [sp, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0df      	beq.n	8008d70 <__hexnan+0xd4>
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	f1c3 0320 	rsb	r3, r3, #32
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dc0:	401a      	ands	r2, r3
 8008dc2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008dc6:	e7d3      	b.n	8008d70 <__hexnan+0xd4>
 8008dc8:	3f04      	subs	r7, #4
 8008dca:	e7d1      	b.n	8008d70 <__hexnan+0xd4>
 8008dcc:	2004      	movs	r0, #4
 8008dce:	b007      	add	sp, #28
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dd4 <_localeconv_r>:
 8008dd4:	4800      	ldr	r0, [pc, #0]	; (8008dd8 <_localeconv_r+0x4>)
 8008dd6:	4770      	bx	lr
 8008dd8:	20000168 	.word	0x20000168

08008ddc <malloc>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <malloc+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f000 bd59 	b.w	8009898 <_malloc_r>
 8008de6:	bf00      	nop
 8008de8:	20000010 	.word	0x20000010

08008dec <__ascii_mbtowc>:
 8008dec:	b082      	sub	sp, #8
 8008dee:	b901      	cbnz	r1, 8008df2 <__ascii_mbtowc+0x6>
 8008df0:	a901      	add	r1, sp, #4
 8008df2:	b142      	cbz	r2, 8008e06 <__ascii_mbtowc+0x1a>
 8008df4:	b14b      	cbz	r3, 8008e0a <__ascii_mbtowc+0x1e>
 8008df6:	7813      	ldrb	r3, [r2, #0]
 8008df8:	600b      	str	r3, [r1, #0]
 8008dfa:	7812      	ldrb	r2, [r2, #0]
 8008dfc:	1e10      	subs	r0, r2, #0
 8008dfe:	bf18      	it	ne
 8008e00:	2001      	movne	r0, #1
 8008e02:	b002      	add	sp, #8
 8008e04:	4770      	bx	lr
 8008e06:	4610      	mov	r0, r2
 8008e08:	e7fb      	b.n	8008e02 <__ascii_mbtowc+0x16>
 8008e0a:	f06f 0001 	mvn.w	r0, #1
 8008e0e:	e7f8      	b.n	8008e02 <__ascii_mbtowc+0x16>

08008e10 <_Balloc>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	b976      	cbnz	r6, 8008e38 <_Balloc+0x28>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	f7ff ffde 	bl	8008ddc <malloc>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6260      	str	r0, [r4, #36]	; 0x24
 8008e24:	b920      	cbnz	r0, 8008e30 <_Balloc+0x20>
 8008e26:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <_Balloc+0x78>)
 8008e28:	4818      	ldr	r0, [pc, #96]	; (8008e8c <_Balloc+0x7c>)
 8008e2a:	2166      	movs	r1, #102	; 0x66
 8008e2c:	f000 ff3e 	bl	8009cac <__assert_func>
 8008e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e34:	6006      	str	r6, [r0, #0]
 8008e36:	60c6      	str	r6, [r0, #12]
 8008e38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e3a:	68f3      	ldr	r3, [r6, #12]
 8008e3c:	b183      	cbz	r3, 8008e60 <_Balloc+0x50>
 8008e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e46:	b9b8      	cbnz	r0, 8008e78 <_Balloc+0x68>
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e4e:	1d72      	adds	r2, r6, #5
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fc9d 	bl	8009792 <_calloc_r>
 8008e58:	b160      	cbz	r0, 8008e74 <_Balloc+0x64>
 8008e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e5e:	e00e      	b.n	8008e7e <_Balloc+0x6e>
 8008e60:	2221      	movs	r2, #33	; 0x21
 8008e62:	2104      	movs	r1, #4
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fc94 	bl	8009792 <_calloc_r>
 8008e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6c:	60f0      	str	r0, [r6, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <_Balloc+0x2e>
 8008e74:	2000      	movs	r0, #0
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	6802      	ldr	r2, [r0, #0]
 8008e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e84:	e7f7      	b.n	8008e76 <_Balloc+0x66>
 8008e86:	bf00      	nop
 8008e88:	0800bd66 	.word	0x0800bd66
 8008e8c:	0800be64 	.word	0x0800be64

08008e90 <_Bfree>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b976      	cbnz	r6, 8008eb8 <_Bfree+0x28>
 8008e9a:	2010      	movs	r0, #16
 8008e9c:	f7ff ff9e 	bl	8008ddc <malloc>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6268      	str	r0, [r5, #36]	; 0x24
 8008ea4:	b920      	cbnz	r0, 8008eb0 <_Bfree+0x20>
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <_Bfree+0x3c>)
 8008ea8:	4809      	ldr	r0, [pc, #36]	; (8008ed0 <_Bfree+0x40>)
 8008eaa:	218a      	movs	r1, #138	; 0x8a
 8008eac:	f000 fefe 	bl	8009cac <__assert_func>
 8008eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eb4:	6006      	str	r6, [r0, #0]
 8008eb6:	60c6      	str	r6, [r0, #12]
 8008eb8:	b13c      	cbz	r4, 8008eca <_Bfree+0x3a>
 8008eba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ebc:	6862      	ldr	r2, [r4, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ec4:	6021      	str	r1, [r4, #0]
 8008ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	0800bd66 	.word	0x0800bd66
 8008ed0:	0800be64 	.word	0x0800be64

08008ed4 <__multadd>:
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	690d      	ldr	r5, [r1, #16]
 8008eda:	4607      	mov	r7, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	461e      	mov	r6, r3
 8008ee0:	f101 0c14 	add.w	ip, r1, #20
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eea:	b299      	uxth	r1, r3
 8008eec:	fb02 6101 	mla	r1, r2, r1, r6
 8008ef0:	0c1e      	lsrs	r6, r3, #16
 8008ef2:	0c0b      	lsrs	r3, r1, #16
 8008ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ef8:	b289      	uxth	r1, r1
 8008efa:	3001      	adds	r0, #1
 8008efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f00:	4285      	cmp	r5, r0
 8008f02:	f84c 1b04 	str.w	r1, [ip], #4
 8008f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f0a:	dcec      	bgt.n	8008ee6 <__multadd+0x12>
 8008f0c:	b30e      	cbz	r6, 8008f52 <__multadd+0x7e>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dc19      	bgt.n	8008f48 <__multadd+0x74>
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4638      	mov	r0, r7
 8008f18:	3101      	adds	r1, #1
 8008f1a:	f7ff ff79 	bl	8008e10 <_Balloc>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__multadd+0x5a>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <__multadd+0x84>)
 8008f26:	480d      	ldr	r0, [pc, #52]	; (8008f5c <__multadd+0x88>)
 8008f28:	21b5      	movs	r1, #181	; 0xb5
 8008f2a:	f000 febf 	bl	8009cac <__assert_func>
 8008f2e:	6922      	ldr	r2, [r4, #16]
 8008f30:	3202      	adds	r2, #2
 8008f32:	f104 010c 	add.w	r1, r4, #12
 8008f36:	0092      	lsls	r2, r2, #2
 8008f38:	300c      	adds	r0, #12
 8008f3a:	f7fc ffff 	bl	8005f3c <memcpy>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7ff ffa5 	bl	8008e90 <_Bfree>
 8008f46:	4644      	mov	r4, r8
 8008f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	615e      	str	r6, [r3, #20]
 8008f50:	6125      	str	r5, [r4, #16]
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	0800bdd8 	.word	0x0800bdd8
 8008f5c:	0800be64 	.word	0x0800be64

08008f60 <__s2b>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	4615      	mov	r5, r2
 8008f68:	461f      	mov	r7, r3
 8008f6a:	2209      	movs	r2, #9
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	4606      	mov	r6, r0
 8008f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f74:	2100      	movs	r1, #0
 8008f76:	2201      	movs	r2, #1
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	db09      	blt.n	8008f90 <__s2b+0x30>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff ff47 	bl	8008e10 <_Balloc>
 8008f82:	b940      	cbnz	r0, 8008f96 <__s2b+0x36>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b19      	ldr	r3, [pc, #100]	; (8008fec <__s2b+0x8c>)
 8008f88:	4819      	ldr	r0, [pc, #100]	; (8008ff0 <__s2b+0x90>)
 8008f8a:	21ce      	movs	r1, #206	; 0xce
 8008f8c:	f000 fe8e 	bl	8009cac <__assert_func>
 8008f90:	0052      	lsls	r2, r2, #1
 8008f92:	3101      	adds	r1, #1
 8008f94:	e7f0      	b.n	8008f78 <__s2b+0x18>
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	6143      	str	r3, [r0, #20]
 8008f9a:	2d09      	cmp	r5, #9
 8008f9c:	f04f 0301 	mov.w	r3, #1
 8008fa0:	6103      	str	r3, [r0, #16]
 8008fa2:	dd16      	ble.n	8008fd2 <__s2b+0x72>
 8008fa4:	f104 0909 	add.w	r9, r4, #9
 8008fa8:	46c8      	mov	r8, r9
 8008faa:	442c      	add	r4, r5
 8008fac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	3b30      	subs	r3, #48	; 0x30
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ff8c 	bl	8008ed4 <__multadd>
 8008fbc:	45a0      	cmp	r8, r4
 8008fbe:	d1f5      	bne.n	8008fac <__s2b+0x4c>
 8008fc0:	f1a5 0408 	sub.w	r4, r5, #8
 8008fc4:	444c      	add	r4, r9
 8008fc6:	1b2d      	subs	r5, r5, r4
 8008fc8:	1963      	adds	r3, r4, r5
 8008fca:	42bb      	cmp	r3, r7
 8008fcc:	db04      	blt.n	8008fd8 <__s2b+0x78>
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	340a      	adds	r4, #10
 8008fd4:	2509      	movs	r5, #9
 8008fd6:	e7f6      	b.n	8008fc6 <__s2b+0x66>
 8008fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fdc:	4601      	mov	r1, r0
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	220a      	movs	r2, #10
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ff76 	bl	8008ed4 <__multadd>
 8008fe8:	e7ee      	b.n	8008fc8 <__s2b+0x68>
 8008fea:	bf00      	nop
 8008fec:	0800bdd8 	.word	0x0800bdd8
 8008ff0:	0800be64 	.word	0x0800be64

08008ff4 <__hi0bits>:
 8008ff4:	0c03      	lsrs	r3, r0, #16
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	b9d3      	cbnz	r3, 8009030 <__hi0bits+0x3c>
 8008ffa:	0400      	lsls	r0, r0, #16
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009002:	bf04      	itt	eq
 8009004:	0200      	lsleq	r0, r0, #8
 8009006:	3308      	addeq	r3, #8
 8009008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800900c:	bf04      	itt	eq
 800900e:	0100      	lsleq	r0, r0, #4
 8009010:	3304      	addeq	r3, #4
 8009012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009016:	bf04      	itt	eq
 8009018:	0080      	lsleq	r0, r0, #2
 800901a:	3302      	addeq	r3, #2
 800901c:	2800      	cmp	r0, #0
 800901e:	db05      	blt.n	800902c <__hi0bits+0x38>
 8009020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009024:	f103 0301 	add.w	r3, r3, #1
 8009028:	bf08      	it	eq
 800902a:	2320      	moveq	r3, #32
 800902c:	4618      	mov	r0, r3
 800902e:	4770      	bx	lr
 8009030:	2300      	movs	r3, #0
 8009032:	e7e4      	b.n	8008ffe <__hi0bits+0xa>

08009034 <__lo0bits>:
 8009034:	6803      	ldr	r3, [r0, #0]
 8009036:	f013 0207 	ands.w	r2, r3, #7
 800903a:	4601      	mov	r1, r0
 800903c:	d00b      	beq.n	8009056 <__lo0bits+0x22>
 800903e:	07da      	lsls	r2, r3, #31
 8009040:	d423      	bmi.n	800908a <__lo0bits+0x56>
 8009042:	0798      	lsls	r0, r3, #30
 8009044:	bf49      	itett	mi
 8009046:	085b      	lsrmi	r3, r3, #1
 8009048:	089b      	lsrpl	r3, r3, #2
 800904a:	2001      	movmi	r0, #1
 800904c:	600b      	strmi	r3, [r1, #0]
 800904e:	bf5c      	itt	pl
 8009050:	600b      	strpl	r3, [r1, #0]
 8009052:	2002      	movpl	r0, #2
 8009054:	4770      	bx	lr
 8009056:	b298      	uxth	r0, r3
 8009058:	b9a8      	cbnz	r0, 8009086 <__lo0bits+0x52>
 800905a:	0c1b      	lsrs	r3, r3, #16
 800905c:	2010      	movs	r0, #16
 800905e:	b2da      	uxtb	r2, r3
 8009060:	b90a      	cbnz	r2, 8009066 <__lo0bits+0x32>
 8009062:	3008      	adds	r0, #8
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	071a      	lsls	r2, r3, #28
 8009068:	bf04      	itt	eq
 800906a:	091b      	lsreq	r3, r3, #4
 800906c:	3004      	addeq	r0, #4
 800906e:	079a      	lsls	r2, r3, #30
 8009070:	bf04      	itt	eq
 8009072:	089b      	lsreq	r3, r3, #2
 8009074:	3002      	addeq	r0, #2
 8009076:	07da      	lsls	r2, r3, #31
 8009078:	d403      	bmi.n	8009082 <__lo0bits+0x4e>
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	f100 0001 	add.w	r0, r0, #1
 8009080:	d005      	beq.n	800908e <__lo0bits+0x5a>
 8009082:	600b      	str	r3, [r1, #0]
 8009084:	4770      	bx	lr
 8009086:	4610      	mov	r0, r2
 8009088:	e7e9      	b.n	800905e <__lo0bits+0x2a>
 800908a:	2000      	movs	r0, #0
 800908c:	4770      	bx	lr
 800908e:	2020      	movs	r0, #32
 8009090:	4770      	bx	lr
	...

08009094 <__i2b>:
 8009094:	b510      	push	{r4, lr}
 8009096:	460c      	mov	r4, r1
 8009098:	2101      	movs	r1, #1
 800909a:	f7ff feb9 	bl	8008e10 <_Balloc>
 800909e:	4602      	mov	r2, r0
 80090a0:	b928      	cbnz	r0, 80090ae <__i2b+0x1a>
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <__i2b+0x24>)
 80090a4:	4805      	ldr	r0, [pc, #20]	; (80090bc <__i2b+0x28>)
 80090a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090aa:	f000 fdff 	bl	8009cac <__assert_func>
 80090ae:	2301      	movs	r3, #1
 80090b0:	6144      	str	r4, [r0, #20]
 80090b2:	6103      	str	r3, [r0, #16]
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	bf00      	nop
 80090b8:	0800bdd8 	.word	0x0800bdd8
 80090bc:	0800be64 	.word	0x0800be64

080090c0 <__multiply>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	4691      	mov	r9, r2
 80090c6:	690a      	ldr	r2, [r1, #16]
 80090c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	bfb8      	it	lt
 80090d0:	460b      	movlt	r3, r1
 80090d2:	460c      	mov	r4, r1
 80090d4:	bfbc      	itt	lt
 80090d6:	464c      	movlt	r4, r9
 80090d8:	4699      	movlt	r9, r3
 80090da:	6927      	ldr	r7, [r4, #16]
 80090dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090e0:	68a3      	ldr	r3, [r4, #8]
 80090e2:	6861      	ldr	r1, [r4, #4]
 80090e4:	eb07 060a 	add.w	r6, r7, sl
 80090e8:	42b3      	cmp	r3, r6
 80090ea:	b085      	sub	sp, #20
 80090ec:	bfb8      	it	lt
 80090ee:	3101      	addlt	r1, #1
 80090f0:	f7ff fe8e 	bl	8008e10 <_Balloc>
 80090f4:	b930      	cbnz	r0, 8009104 <__multiply+0x44>
 80090f6:	4602      	mov	r2, r0
 80090f8:	4b44      	ldr	r3, [pc, #272]	; (800920c <__multiply+0x14c>)
 80090fa:	4845      	ldr	r0, [pc, #276]	; (8009210 <__multiply+0x150>)
 80090fc:	f240 115d 	movw	r1, #349	; 0x15d
 8009100:	f000 fdd4 	bl	8009cac <__assert_func>
 8009104:	f100 0514 	add.w	r5, r0, #20
 8009108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800910c:	462b      	mov	r3, r5
 800910e:	2200      	movs	r2, #0
 8009110:	4543      	cmp	r3, r8
 8009112:	d321      	bcc.n	8009158 <__multiply+0x98>
 8009114:	f104 0314 	add.w	r3, r4, #20
 8009118:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800911c:	f109 0314 	add.w	r3, r9, #20
 8009120:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009124:	9202      	str	r2, [sp, #8]
 8009126:	1b3a      	subs	r2, r7, r4
 8009128:	3a15      	subs	r2, #21
 800912a:	f022 0203 	bic.w	r2, r2, #3
 800912e:	3204      	adds	r2, #4
 8009130:	f104 0115 	add.w	r1, r4, #21
 8009134:	428f      	cmp	r7, r1
 8009136:	bf38      	it	cc
 8009138:	2204      	movcc	r2, #4
 800913a:	9201      	str	r2, [sp, #4]
 800913c:	9a02      	ldr	r2, [sp, #8]
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	429a      	cmp	r2, r3
 8009142:	d80c      	bhi.n	800915e <__multiply+0x9e>
 8009144:	2e00      	cmp	r6, #0
 8009146:	dd03      	ble.n	8009150 <__multiply+0x90>
 8009148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800914c:	2b00      	cmp	r3, #0
 800914e:	d05a      	beq.n	8009206 <__multiply+0x146>
 8009150:	6106      	str	r6, [r0, #16]
 8009152:	b005      	add	sp, #20
 8009154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009158:	f843 2b04 	str.w	r2, [r3], #4
 800915c:	e7d8      	b.n	8009110 <__multiply+0x50>
 800915e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009162:	f1ba 0f00 	cmp.w	sl, #0
 8009166:	d024      	beq.n	80091b2 <__multiply+0xf2>
 8009168:	f104 0e14 	add.w	lr, r4, #20
 800916c:	46a9      	mov	r9, r5
 800916e:	f04f 0c00 	mov.w	ip, #0
 8009172:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009176:	f8d9 1000 	ldr.w	r1, [r9]
 800917a:	fa1f fb82 	uxth.w	fp, r2
 800917e:	b289      	uxth	r1, r1
 8009180:	fb0a 110b 	mla	r1, sl, fp, r1
 8009184:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009188:	f8d9 2000 	ldr.w	r2, [r9]
 800918c:	4461      	add	r1, ip
 800918e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009192:	fb0a c20b 	mla	r2, sl, fp, ip
 8009196:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800919a:	b289      	uxth	r1, r1
 800919c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091a0:	4577      	cmp	r7, lr
 80091a2:	f849 1b04 	str.w	r1, [r9], #4
 80091a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091aa:	d8e2      	bhi.n	8009172 <__multiply+0xb2>
 80091ac:	9a01      	ldr	r2, [sp, #4]
 80091ae:	f845 c002 	str.w	ip, [r5, r2]
 80091b2:	9a03      	ldr	r2, [sp, #12]
 80091b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091b8:	3304      	adds	r3, #4
 80091ba:	f1b9 0f00 	cmp.w	r9, #0
 80091be:	d020      	beq.n	8009202 <__multiply+0x142>
 80091c0:	6829      	ldr	r1, [r5, #0]
 80091c2:	f104 0c14 	add.w	ip, r4, #20
 80091c6:	46ae      	mov	lr, r5
 80091c8:	f04f 0a00 	mov.w	sl, #0
 80091cc:	f8bc b000 	ldrh.w	fp, [ip]
 80091d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091d4:	fb09 220b 	mla	r2, r9, fp, r2
 80091d8:	4492      	add	sl, r2
 80091da:	b289      	uxth	r1, r1
 80091dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091e0:	f84e 1b04 	str.w	r1, [lr], #4
 80091e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091e8:	f8be 1000 	ldrh.w	r1, [lr]
 80091ec:	0c12      	lsrs	r2, r2, #16
 80091ee:	fb09 1102 	mla	r1, r9, r2, r1
 80091f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091f6:	4567      	cmp	r7, ip
 80091f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091fc:	d8e6      	bhi.n	80091cc <__multiply+0x10c>
 80091fe:	9a01      	ldr	r2, [sp, #4]
 8009200:	50a9      	str	r1, [r5, r2]
 8009202:	3504      	adds	r5, #4
 8009204:	e79a      	b.n	800913c <__multiply+0x7c>
 8009206:	3e01      	subs	r6, #1
 8009208:	e79c      	b.n	8009144 <__multiply+0x84>
 800920a:	bf00      	nop
 800920c:	0800bdd8 	.word	0x0800bdd8
 8009210:	0800be64 	.word	0x0800be64

08009214 <__pow5mult>:
 8009214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009218:	4615      	mov	r5, r2
 800921a:	f012 0203 	ands.w	r2, r2, #3
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	d007      	beq.n	8009234 <__pow5mult+0x20>
 8009224:	4c25      	ldr	r4, [pc, #148]	; (80092bc <__pow5mult+0xa8>)
 8009226:	3a01      	subs	r2, #1
 8009228:	2300      	movs	r3, #0
 800922a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800922e:	f7ff fe51 	bl	8008ed4 <__multadd>
 8009232:	4607      	mov	r7, r0
 8009234:	10ad      	asrs	r5, r5, #2
 8009236:	d03d      	beq.n	80092b4 <__pow5mult+0xa0>
 8009238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800923a:	b97c      	cbnz	r4, 800925c <__pow5mult+0x48>
 800923c:	2010      	movs	r0, #16
 800923e:	f7ff fdcd 	bl	8008ddc <malloc>
 8009242:	4602      	mov	r2, r0
 8009244:	6270      	str	r0, [r6, #36]	; 0x24
 8009246:	b928      	cbnz	r0, 8009254 <__pow5mult+0x40>
 8009248:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <__pow5mult+0xac>)
 800924a:	481e      	ldr	r0, [pc, #120]	; (80092c4 <__pow5mult+0xb0>)
 800924c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009250:	f000 fd2c 	bl	8009cac <__assert_func>
 8009254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009258:	6004      	str	r4, [r0, #0]
 800925a:	60c4      	str	r4, [r0, #12]
 800925c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009264:	b94c      	cbnz	r4, 800927a <__pow5mult+0x66>
 8009266:	f240 2171 	movw	r1, #625	; 0x271
 800926a:	4630      	mov	r0, r6
 800926c:	f7ff ff12 	bl	8009094 <__i2b>
 8009270:	2300      	movs	r3, #0
 8009272:	f8c8 0008 	str.w	r0, [r8, #8]
 8009276:	4604      	mov	r4, r0
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	f04f 0900 	mov.w	r9, #0
 800927e:	07eb      	lsls	r3, r5, #31
 8009280:	d50a      	bpl.n	8009298 <__pow5mult+0x84>
 8009282:	4639      	mov	r1, r7
 8009284:	4622      	mov	r2, r4
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ff1a 	bl	80090c0 <__multiply>
 800928c:	4639      	mov	r1, r7
 800928e:	4680      	mov	r8, r0
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff fdfd 	bl	8008e90 <_Bfree>
 8009296:	4647      	mov	r7, r8
 8009298:	106d      	asrs	r5, r5, #1
 800929a:	d00b      	beq.n	80092b4 <__pow5mult+0xa0>
 800929c:	6820      	ldr	r0, [r4, #0]
 800929e:	b938      	cbnz	r0, 80092b0 <__pow5mult+0x9c>
 80092a0:	4622      	mov	r2, r4
 80092a2:	4621      	mov	r1, r4
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ff0b 	bl	80090c0 <__multiply>
 80092aa:	6020      	str	r0, [r4, #0]
 80092ac:	f8c0 9000 	str.w	r9, [r0]
 80092b0:	4604      	mov	r4, r0
 80092b2:	e7e4      	b.n	800927e <__pow5mult+0x6a>
 80092b4:	4638      	mov	r0, r7
 80092b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ba:	bf00      	nop
 80092bc:	0800bfb0 	.word	0x0800bfb0
 80092c0:	0800bd66 	.word	0x0800bd66
 80092c4:	0800be64 	.word	0x0800be64

080092c8 <__lshift>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	6849      	ldr	r1, [r1, #4]
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	4607      	mov	r7, r0
 80092da:	4691      	mov	r9, r2
 80092dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092e0:	f108 0601 	add.w	r6, r8, #1
 80092e4:	42b3      	cmp	r3, r6
 80092e6:	db0b      	blt.n	8009300 <__lshift+0x38>
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff fd91 	bl	8008e10 <_Balloc>
 80092ee:	4605      	mov	r5, r0
 80092f0:	b948      	cbnz	r0, 8009306 <__lshift+0x3e>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b2a      	ldr	r3, [pc, #168]	; (80093a0 <__lshift+0xd8>)
 80092f6:	482b      	ldr	r0, [pc, #172]	; (80093a4 <__lshift+0xdc>)
 80092f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092fc:	f000 fcd6 	bl	8009cac <__assert_func>
 8009300:	3101      	adds	r1, #1
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	e7ee      	b.n	80092e4 <__lshift+0x1c>
 8009306:	2300      	movs	r3, #0
 8009308:	f100 0114 	add.w	r1, r0, #20
 800930c:	f100 0210 	add.w	r2, r0, #16
 8009310:	4618      	mov	r0, r3
 8009312:	4553      	cmp	r3, sl
 8009314:	db37      	blt.n	8009386 <__lshift+0xbe>
 8009316:	6920      	ldr	r0, [r4, #16]
 8009318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800931c:	f104 0314 	add.w	r3, r4, #20
 8009320:	f019 091f 	ands.w	r9, r9, #31
 8009324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009328:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800932c:	d02f      	beq.n	800938e <__lshift+0xc6>
 800932e:	f1c9 0e20 	rsb	lr, r9, #32
 8009332:	468a      	mov	sl, r1
 8009334:	f04f 0c00 	mov.w	ip, #0
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	fa02 f209 	lsl.w	r2, r2, r9
 800933e:	ea42 020c 	orr.w	r2, r2, ip
 8009342:	f84a 2b04 	str.w	r2, [sl], #4
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	4298      	cmp	r0, r3
 800934c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009350:	d8f2      	bhi.n	8009338 <__lshift+0x70>
 8009352:	1b03      	subs	r3, r0, r4
 8009354:	3b15      	subs	r3, #21
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	3304      	adds	r3, #4
 800935c:	f104 0215 	add.w	r2, r4, #21
 8009360:	4290      	cmp	r0, r2
 8009362:	bf38      	it	cc
 8009364:	2304      	movcc	r3, #4
 8009366:	f841 c003 	str.w	ip, [r1, r3]
 800936a:	f1bc 0f00 	cmp.w	ip, #0
 800936e:	d001      	beq.n	8009374 <__lshift+0xac>
 8009370:	f108 0602 	add.w	r6, r8, #2
 8009374:	3e01      	subs	r6, #1
 8009376:	4638      	mov	r0, r7
 8009378:	612e      	str	r6, [r5, #16]
 800937a:	4621      	mov	r1, r4
 800937c:	f7ff fd88 	bl	8008e90 <_Bfree>
 8009380:	4628      	mov	r0, r5
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009386:	f842 0f04 	str.w	r0, [r2, #4]!
 800938a:	3301      	adds	r3, #1
 800938c:	e7c1      	b.n	8009312 <__lshift+0x4a>
 800938e:	3904      	subs	r1, #4
 8009390:	f853 2b04 	ldr.w	r2, [r3], #4
 8009394:	f841 2f04 	str.w	r2, [r1, #4]!
 8009398:	4298      	cmp	r0, r3
 800939a:	d8f9      	bhi.n	8009390 <__lshift+0xc8>
 800939c:	e7ea      	b.n	8009374 <__lshift+0xac>
 800939e:	bf00      	nop
 80093a0:	0800bdd8 	.word	0x0800bdd8
 80093a4:	0800be64 	.word	0x0800be64

080093a8 <__mcmp>:
 80093a8:	b530      	push	{r4, r5, lr}
 80093aa:	6902      	ldr	r2, [r0, #16]
 80093ac:	690c      	ldr	r4, [r1, #16]
 80093ae:	1b12      	subs	r2, r2, r4
 80093b0:	d10e      	bne.n	80093d0 <__mcmp+0x28>
 80093b2:	f100 0314 	add.w	r3, r0, #20
 80093b6:	3114      	adds	r1, #20
 80093b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	d003      	beq.n	80093d4 <__mcmp+0x2c>
 80093cc:	d305      	bcc.n	80093da <__mcmp+0x32>
 80093ce:	2201      	movs	r2, #1
 80093d0:	4610      	mov	r0, r2
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	4283      	cmp	r3, r0
 80093d6:	d3f3      	bcc.n	80093c0 <__mcmp+0x18>
 80093d8:	e7fa      	b.n	80093d0 <__mcmp+0x28>
 80093da:	f04f 32ff 	mov.w	r2, #4294967295
 80093de:	e7f7      	b.n	80093d0 <__mcmp+0x28>

080093e0 <__mdiff>:
 80093e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	460c      	mov	r4, r1
 80093e6:	4606      	mov	r6, r0
 80093e8:	4611      	mov	r1, r2
 80093ea:	4620      	mov	r0, r4
 80093ec:	4690      	mov	r8, r2
 80093ee:	f7ff ffdb 	bl	80093a8 <__mcmp>
 80093f2:	1e05      	subs	r5, r0, #0
 80093f4:	d110      	bne.n	8009418 <__mdiff+0x38>
 80093f6:	4629      	mov	r1, r5
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff fd09 	bl	8008e10 <_Balloc>
 80093fe:	b930      	cbnz	r0, 800940e <__mdiff+0x2e>
 8009400:	4b3a      	ldr	r3, [pc, #232]	; (80094ec <__mdiff+0x10c>)
 8009402:	4602      	mov	r2, r0
 8009404:	f240 2132 	movw	r1, #562	; 0x232
 8009408:	4839      	ldr	r0, [pc, #228]	; (80094f0 <__mdiff+0x110>)
 800940a:	f000 fc4f 	bl	8009cac <__assert_func>
 800940e:	2301      	movs	r3, #1
 8009410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009418:	bfa4      	itt	ge
 800941a:	4643      	movge	r3, r8
 800941c:	46a0      	movge	r8, r4
 800941e:	4630      	mov	r0, r6
 8009420:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009424:	bfa6      	itte	ge
 8009426:	461c      	movge	r4, r3
 8009428:	2500      	movge	r5, #0
 800942a:	2501      	movlt	r5, #1
 800942c:	f7ff fcf0 	bl	8008e10 <_Balloc>
 8009430:	b920      	cbnz	r0, 800943c <__mdiff+0x5c>
 8009432:	4b2e      	ldr	r3, [pc, #184]	; (80094ec <__mdiff+0x10c>)
 8009434:	4602      	mov	r2, r0
 8009436:	f44f 7110 	mov.w	r1, #576	; 0x240
 800943a:	e7e5      	b.n	8009408 <__mdiff+0x28>
 800943c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009440:	6926      	ldr	r6, [r4, #16]
 8009442:	60c5      	str	r5, [r0, #12]
 8009444:	f104 0914 	add.w	r9, r4, #20
 8009448:	f108 0514 	add.w	r5, r8, #20
 800944c:	f100 0e14 	add.w	lr, r0, #20
 8009450:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009454:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009458:	f108 0210 	add.w	r2, r8, #16
 800945c:	46f2      	mov	sl, lr
 800945e:	2100      	movs	r1, #0
 8009460:	f859 3b04 	ldr.w	r3, [r9], #4
 8009464:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009468:	fa1f f883 	uxth.w	r8, r3
 800946c:	fa11 f18b 	uxtah	r1, r1, fp
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	eba1 0808 	sub.w	r8, r1, r8
 8009476:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800947a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800947e:	fa1f f888 	uxth.w	r8, r8
 8009482:	1419      	asrs	r1, r3, #16
 8009484:	454e      	cmp	r6, r9
 8009486:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800948a:	f84a 3b04 	str.w	r3, [sl], #4
 800948e:	d8e7      	bhi.n	8009460 <__mdiff+0x80>
 8009490:	1b33      	subs	r3, r6, r4
 8009492:	3b15      	subs	r3, #21
 8009494:	f023 0303 	bic.w	r3, r3, #3
 8009498:	3304      	adds	r3, #4
 800949a:	3415      	adds	r4, #21
 800949c:	42a6      	cmp	r6, r4
 800949e:	bf38      	it	cc
 80094a0:	2304      	movcc	r3, #4
 80094a2:	441d      	add	r5, r3
 80094a4:	4473      	add	r3, lr
 80094a6:	469e      	mov	lr, r3
 80094a8:	462e      	mov	r6, r5
 80094aa:	4566      	cmp	r6, ip
 80094ac:	d30e      	bcc.n	80094cc <__mdiff+0xec>
 80094ae:	f10c 0203 	add.w	r2, ip, #3
 80094b2:	1b52      	subs	r2, r2, r5
 80094b4:	f022 0203 	bic.w	r2, r2, #3
 80094b8:	3d03      	subs	r5, #3
 80094ba:	45ac      	cmp	ip, r5
 80094bc:	bf38      	it	cc
 80094be:	2200      	movcc	r2, #0
 80094c0:	441a      	add	r2, r3
 80094c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094c6:	b17b      	cbz	r3, 80094e8 <__mdiff+0x108>
 80094c8:	6107      	str	r7, [r0, #16]
 80094ca:	e7a3      	b.n	8009414 <__mdiff+0x34>
 80094cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80094d0:	fa11 f288 	uxtah	r2, r1, r8
 80094d4:	1414      	asrs	r4, r2, #16
 80094d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094da:	b292      	uxth	r2, r2
 80094dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094e0:	f84e 2b04 	str.w	r2, [lr], #4
 80094e4:	1421      	asrs	r1, r4, #16
 80094e6:	e7e0      	b.n	80094aa <__mdiff+0xca>
 80094e8:	3f01      	subs	r7, #1
 80094ea:	e7ea      	b.n	80094c2 <__mdiff+0xe2>
 80094ec:	0800bdd8 	.word	0x0800bdd8
 80094f0:	0800be64 	.word	0x0800be64

080094f4 <__ulp>:
 80094f4:	b082      	sub	sp, #8
 80094f6:	ed8d 0b00 	vstr	d0, [sp]
 80094fa:	9b01      	ldr	r3, [sp, #4]
 80094fc:	4912      	ldr	r1, [pc, #72]	; (8009548 <__ulp+0x54>)
 80094fe:	4019      	ands	r1, r3
 8009500:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009504:	2900      	cmp	r1, #0
 8009506:	dd05      	ble.n	8009514 <__ulp+0x20>
 8009508:	2200      	movs	r2, #0
 800950a:	460b      	mov	r3, r1
 800950c:	ec43 2b10 	vmov	d0, r2, r3
 8009510:	b002      	add	sp, #8
 8009512:	4770      	bx	lr
 8009514:	4249      	negs	r1, r1
 8009516:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800951a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	f04f 0300 	mov.w	r3, #0
 8009526:	da04      	bge.n	8009532 <__ulp+0x3e>
 8009528:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800952c:	fa41 f300 	asr.w	r3, r1, r0
 8009530:	e7ec      	b.n	800950c <__ulp+0x18>
 8009532:	f1a0 0114 	sub.w	r1, r0, #20
 8009536:	291e      	cmp	r1, #30
 8009538:	bfda      	itte	le
 800953a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800953e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009542:	2101      	movgt	r1, #1
 8009544:	460a      	mov	r2, r1
 8009546:	e7e1      	b.n	800950c <__ulp+0x18>
 8009548:	7ff00000 	.word	0x7ff00000

0800954c <__b2d>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	6905      	ldr	r5, [r0, #16]
 8009550:	f100 0714 	add.w	r7, r0, #20
 8009554:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009558:	1f2e      	subs	r6, r5, #4
 800955a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff fd48 	bl	8008ff4 <__hi0bits>
 8009564:	f1c0 0320 	rsb	r3, r0, #32
 8009568:	280a      	cmp	r0, #10
 800956a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80095e8 <__b2d+0x9c>
 800956e:	600b      	str	r3, [r1, #0]
 8009570:	dc14      	bgt.n	800959c <__b2d+0x50>
 8009572:	f1c0 0e0b 	rsb	lr, r0, #11
 8009576:	fa24 f10e 	lsr.w	r1, r4, lr
 800957a:	42b7      	cmp	r7, r6
 800957c:	ea41 030c 	orr.w	r3, r1, ip
 8009580:	bf34      	ite	cc
 8009582:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009586:	2100      	movcs	r1, #0
 8009588:	3015      	adds	r0, #21
 800958a:	fa04 f000 	lsl.w	r0, r4, r0
 800958e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009592:	ea40 0201 	orr.w	r2, r0, r1
 8009596:	ec43 2b10 	vmov	d0, r2, r3
 800959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959c:	42b7      	cmp	r7, r6
 800959e:	bf3a      	itte	cc
 80095a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80095a8:	2100      	movcs	r1, #0
 80095aa:	380b      	subs	r0, #11
 80095ac:	d017      	beq.n	80095de <__b2d+0x92>
 80095ae:	f1c0 0c20 	rsb	ip, r0, #32
 80095b2:	fa04 f500 	lsl.w	r5, r4, r0
 80095b6:	42be      	cmp	r6, r7
 80095b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80095bc:	ea45 0504 	orr.w	r5, r5, r4
 80095c0:	bf8c      	ite	hi
 80095c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095c6:	2400      	movls	r4, #0
 80095c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80095cc:	fa01 f000 	lsl.w	r0, r1, r0
 80095d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80095d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095d8:	ea40 0204 	orr.w	r2, r0, r4
 80095dc:	e7db      	b.n	8009596 <__b2d+0x4a>
 80095de:	ea44 030c 	orr.w	r3, r4, ip
 80095e2:	460a      	mov	r2, r1
 80095e4:	e7d7      	b.n	8009596 <__b2d+0x4a>
 80095e6:	bf00      	nop
 80095e8:	3ff00000 	.word	0x3ff00000

080095ec <__d2b>:
 80095ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095f0:	4689      	mov	r9, r1
 80095f2:	2101      	movs	r1, #1
 80095f4:	ec57 6b10 	vmov	r6, r7, d0
 80095f8:	4690      	mov	r8, r2
 80095fa:	f7ff fc09 	bl	8008e10 <_Balloc>
 80095fe:	4604      	mov	r4, r0
 8009600:	b930      	cbnz	r0, 8009610 <__d2b+0x24>
 8009602:	4602      	mov	r2, r0
 8009604:	4b25      	ldr	r3, [pc, #148]	; (800969c <__d2b+0xb0>)
 8009606:	4826      	ldr	r0, [pc, #152]	; (80096a0 <__d2b+0xb4>)
 8009608:	f240 310a 	movw	r1, #778	; 0x30a
 800960c:	f000 fb4e 	bl	8009cac <__assert_func>
 8009610:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009614:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009618:	bb35      	cbnz	r5, 8009668 <__d2b+0x7c>
 800961a:	2e00      	cmp	r6, #0
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	d028      	beq.n	8009672 <__d2b+0x86>
 8009620:	4668      	mov	r0, sp
 8009622:	9600      	str	r6, [sp, #0]
 8009624:	f7ff fd06 	bl	8009034 <__lo0bits>
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	b300      	cbz	r0, 800966e <__d2b+0x82>
 800962c:	9a01      	ldr	r2, [sp, #4]
 800962e:	f1c0 0320 	rsb	r3, r0, #32
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	430b      	orrs	r3, r1
 8009638:	40c2      	lsrs	r2, r0
 800963a:	6163      	str	r3, [r4, #20]
 800963c:	9201      	str	r2, [sp, #4]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	61a3      	str	r3, [r4, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	bf14      	ite	ne
 8009646:	2202      	movne	r2, #2
 8009648:	2201      	moveq	r2, #1
 800964a:	6122      	str	r2, [r4, #16]
 800964c:	b1d5      	cbz	r5, 8009684 <__d2b+0x98>
 800964e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009652:	4405      	add	r5, r0
 8009654:	f8c9 5000 	str.w	r5, [r9]
 8009658:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800965c:	f8c8 0000 	str.w	r0, [r8]
 8009660:	4620      	mov	r0, r4
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800966c:	e7d5      	b.n	800961a <__d2b+0x2e>
 800966e:	6161      	str	r1, [r4, #20]
 8009670:	e7e5      	b.n	800963e <__d2b+0x52>
 8009672:	a801      	add	r0, sp, #4
 8009674:	f7ff fcde 	bl	8009034 <__lo0bits>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	2201      	movs	r2, #1
 800967e:	6122      	str	r2, [r4, #16]
 8009680:	3020      	adds	r0, #32
 8009682:	e7e3      	b.n	800964c <__d2b+0x60>
 8009684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800968c:	f8c9 0000 	str.w	r0, [r9]
 8009690:	6918      	ldr	r0, [r3, #16]
 8009692:	f7ff fcaf 	bl	8008ff4 <__hi0bits>
 8009696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800969a:	e7df      	b.n	800965c <__d2b+0x70>
 800969c:	0800bdd8 	.word	0x0800bdd8
 80096a0:	0800be64 	.word	0x0800be64

080096a4 <__ratio>:
 80096a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	4688      	mov	r8, r1
 80096aa:	4669      	mov	r1, sp
 80096ac:	4681      	mov	r9, r0
 80096ae:	f7ff ff4d 	bl	800954c <__b2d>
 80096b2:	a901      	add	r1, sp, #4
 80096b4:	4640      	mov	r0, r8
 80096b6:	ec55 4b10 	vmov	r4, r5, d0
 80096ba:	f7ff ff47 	bl	800954c <__b2d>
 80096be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096c6:	eba3 0c02 	sub.w	ip, r3, r2
 80096ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096d4:	ec51 0b10 	vmov	r0, r1, d0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfd6      	itet	le
 80096dc:	460a      	movle	r2, r1
 80096de:	462a      	movgt	r2, r5
 80096e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096e4:	468b      	mov	fp, r1
 80096e6:	462f      	mov	r7, r5
 80096e8:	bfd4      	ite	le
 80096ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80096ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096f2:	4620      	mov	r0, r4
 80096f4:	ee10 2a10 	vmov	r2, s0
 80096f8:	465b      	mov	r3, fp
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 f8c6 	bl	800088c <__aeabi_ddiv>
 8009700:	ec41 0b10 	vmov	d0, r0, r1
 8009704:	b003      	add	sp, #12
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800970a <__copybits>:
 800970a:	3901      	subs	r1, #1
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	1149      	asrs	r1, r1, #5
 8009710:	6914      	ldr	r4, [r2, #16]
 8009712:	3101      	adds	r1, #1
 8009714:	f102 0314 	add.w	r3, r2, #20
 8009718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800971c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009720:	1f05      	subs	r5, r0, #4
 8009722:	42a3      	cmp	r3, r4
 8009724:	d30c      	bcc.n	8009740 <__copybits+0x36>
 8009726:	1aa3      	subs	r3, r4, r2
 8009728:	3b11      	subs	r3, #17
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	3211      	adds	r2, #17
 8009730:	42a2      	cmp	r2, r4
 8009732:	bf88      	it	hi
 8009734:	2300      	movhi	r3, #0
 8009736:	4418      	add	r0, r3
 8009738:	2300      	movs	r3, #0
 800973a:	4288      	cmp	r0, r1
 800973c:	d305      	bcc.n	800974a <__copybits+0x40>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	f853 6b04 	ldr.w	r6, [r3], #4
 8009744:	f845 6f04 	str.w	r6, [r5, #4]!
 8009748:	e7eb      	b.n	8009722 <__copybits+0x18>
 800974a:	f840 3b04 	str.w	r3, [r0], #4
 800974e:	e7f4      	b.n	800973a <__copybits+0x30>

08009750 <__any_on>:
 8009750:	f100 0214 	add.w	r2, r0, #20
 8009754:	6900      	ldr	r0, [r0, #16]
 8009756:	114b      	asrs	r3, r1, #5
 8009758:	4298      	cmp	r0, r3
 800975a:	b510      	push	{r4, lr}
 800975c:	db11      	blt.n	8009782 <__any_on+0x32>
 800975e:	dd0a      	ble.n	8009776 <__any_on+0x26>
 8009760:	f011 011f 	ands.w	r1, r1, #31
 8009764:	d007      	beq.n	8009776 <__any_on+0x26>
 8009766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800976a:	fa24 f001 	lsr.w	r0, r4, r1
 800976e:	fa00 f101 	lsl.w	r1, r0, r1
 8009772:	428c      	cmp	r4, r1
 8009774:	d10b      	bne.n	800978e <__any_on+0x3e>
 8009776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800977a:	4293      	cmp	r3, r2
 800977c:	d803      	bhi.n	8009786 <__any_on+0x36>
 800977e:	2000      	movs	r0, #0
 8009780:	bd10      	pop	{r4, pc}
 8009782:	4603      	mov	r3, r0
 8009784:	e7f7      	b.n	8009776 <__any_on+0x26>
 8009786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800978a:	2900      	cmp	r1, #0
 800978c:	d0f5      	beq.n	800977a <__any_on+0x2a>
 800978e:	2001      	movs	r0, #1
 8009790:	e7f6      	b.n	8009780 <__any_on+0x30>

08009792 <_calloc_r>:
 8009792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009794:	fba1 2402 	umull	r2, r4, r1, r2
 8009798:	b94c      	cbnz	r4, 80097ae <_calloc_r+0x1c>
 800979a:	4611      	mov	r1, r2
 800979c:	9201      	str	r2, [sp, #4]
 800979e:	f000 f87b 	bl	8009898 <_malloc_r>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	4605      	mov	r5, r0
 80097a6:	b930      	cbnz	r0, 80097b6 <_calloc_r+0x24>
 80097a8:	4628      	mov	r0, r5
 80097aa:	b003      	add	sp, #12
 80097ac:	bd30      	pop	{r4, r5, pc}
 80097ae:	220c      	movs	r2, #12
 80097b0:	6002      	str	r2, [r0, #0]
 80097b2:	2500      	movs	r5, #0
 80097b4:	e7f8      	b.n	80097a8 <_calloc_r+0x16>
 80097b6:	4621      	mov	r1, r4
 80097b8:	f7fc fbce 	bl	8005f58 <memset>
 80097bc:	e7f4      	b.n	80097a8 <_calloc_r+0x16>
	...

080097c0 <_free_r>:
 80097c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c2:	2900      	cmp	r1, #0
 80097c4:	d044      	beq.n	8009850 <_free_r+0x90>
 80097c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ca:	9001      	str	r0, [sp, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f1a1 0404 	sub.w	r4, r1, #4
 80097d2:	bfb8      	it	lt
 80097d4:	18e4      	addlt	r4, r4, r3
 80097d6:	f000 fab3 	bl	8009d40 <__malloc_lock>
 80097da:	4a1e      	ldr	r2, [pc, #120]	; (8009854 <_free_r+0x94>)
 80097dc:	9801      	ldr	r0, [sp, #4]
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	b933      	cbnz	r3, 80097f0 <_free_r+0x30>
 80097e2:	6063      	str	r3, [r4, #4]
 80097e4:	6014      	str	r4, [r2, #0]
 80097e6:	b003      	add	sp, #12
 80097e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097ec:	f000 baae 	b.w	8009d4c <__malloc_unlock>
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	d908      	bls.n	8009806 <_free_r+0x46>
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf01      	itttt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	1949      	addeq	r1, r1, r5
 8009802:	6021      	streq	r1, [r4, #0]
 8009804:	e7ed      	b.n	80097e2 <_free_r+0x22>
 8009806:	461a      	mov	r2, r3
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	b10b      	cbz	r3, 8009810 <_free_r+0x50>
 800980c:	42a3      	cmp	r3, r4
 800980e:	d9fa      	bls.n	8009806 <_free_r+0x46>
 8009810:	6811      	ldr	r1, [r2, #0]
 8009812:	1855      	adds	r5, r2, r1
 8009814:	42a5      	cmp	r5, r4
 8009816:	d10b      	bne.n	8009830 <_free_r+0x70>
 8009818:	6824      	ldr	r4, [r4, #0]
 800981a:	4421      	add	r1, r4
 800981c:	1854      	adds	r4, r2, r1
 800981e:	42a3      	cmp	r3, r4
 8009820:	6011      	str	r1, [r2, #0]
 8009822:	d1e0      	bne.n	80097e6 <_free_r+0x26>
 8009824:	681c      	ldr	r4, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	6053      	str	r3, [r2, #4]
 800982a:	4421      	add	r1, r4
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	e7da      	b.n	80097e6 <_free_r+0x26>
 8009830:	d902      	bls.n	8009838 <_free_r+0x78>
 8009832:	230c      	movs	r3, #12
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	e7d6      	b.n	80097e6 <_free_r+0x26>
 8009838:	6825      	ldr	r5, [r4, #0]
 800983a:	1961      	adds	r1, r4, r5
 800983c:	428b      	cmp	r3, r1
 800983e:	bf04      	itt	eq
 8009840:	6819      	ldreq	r1, [r3, #0]
 8009842:	685b      	ldreq	r3, [r3, #4]
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	bf04      	itt	eq
 8009848:	1949      	addeq	r1, r1, r5
 800984a:	6021      	streq	r1, [r4, #0]
 800984c:	6054      	str	r4, [r2, #4]
 800984e:	e7ca      	b.n	80097e6 <_free_r+0x26>
 8009850:	b003      	add	sp, #12
 8009852:	bd30      	pop	{r4, r5, pc}
 8009854:	20000438 	.word	0x20000438

08009858 <sbrk_aligned>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4e0e      	ldr	r6, [pc, #56]	; (8009894 <sbrk_aligned+0x3c>)
 800985c:	460c      	mov	r4, r1
 800985e:	6831      	ldr	r1, [r6, #0]
 8009860:	4605      	mov	r5, r0
 8009862:	b911      	cbnz	r1, 800986a <sbrk_aligned+0x12>
 8009864:	f000 f9f0 	bl	8009c48 <_sbrk_r>
 8009868:	6030      	str	r0, [r6, #0]
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f000 f9eb 	bl	8009c48 <_sbrk_r>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d00a      	beq.n	800988c <sbrk_aligned+0x34>
 8009876:	1cc4      	adds	r4, r0, #3
 8009878:	f024 0403 	bic.w	r4, r4, #3
 800987c:	42a0      	cmp	r0, r4
 800987e:	d007      	beq.n	8009890 <sbrk_aligned+0x38>
 8009880:	1a21      	subs	r1, r4, r0
 8009882:	4628      	mov	r0, r5
 8009884:	f000 f9e0 	bl	8009c48 <_sbrk_r>
 8009888:	3001      	adds	r0, #1
 800988a:	d101      	bne.n	8009890 <sbrk_aligned+0x38>
 800988c:	f04f 34ff 	mov.w	r4, #4294967295
 8009890:	4620      	mov	r0, r4
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	2000043c 	.word	0x2000043c

08009898 <_malloc_r>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	1ccd      	adds	r5, r1, #3
 800989e:	f025 0503 	bic.w	r5, r5, #3
 80098a2:	3508      	adds	r5, #8
 80098a4:	2d0c      	cmp	r5, #12
 80098a6:	bf38      	it	cc
 80098a8:	250c      	movcc	r5, #12
 80098aa:	2d00      	cmp	r5, #0
 80098ac:	4607      	mov	r7, r0
 80098ae:	db01      	blt.n	80098b4 <_malloc_r+0x1c>
 80098b0:	42a9      	cmp	r1, r5
 80098b2:	d905      	bls.n	80098c0 <_malloc_r+0x28>
 80098b4:	230c      	movs	r3, #12
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	2600      	movs	r6, #0
 80098ba:	4630      	mov	r0, r6
 80098bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c0:	4e2e      	ldr	r6, [pc, #184]	; (800997c <_malloc_r+0xe4>)
 80098c2:	f000 fa3d 	bl	8009d40 <__malloc_lock>
 80098c6:	6833      	ldr	r3, [r6, #0]
 80098c8:	461c      	mov	r4, r3
 80098ca:	bb34      	cbnz	r4, 800991a <_malloc_r+0x82>
 80098cc:	4629      	mov	r1, r5
 80098ce:	4638      	mov	r0, r7
 80098d0:	f7ff ffc2 	bl	8009858 <sbrk_aligned>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	4604      	mov	r4, r0
 80098d8:	d14d      	bne.n	8009976 <_malloc_r+0xde>
 80098da:	6834      	ldr	r4, [r6, #0]
 80098dc:	4626      	mov	r6, r4
 80098de:	2e00      	cmp	r6, #0
 80098e0:	d140      	bne.n	8009964 <_malloc_r+0xcc>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	4631      	mov	r1, r6
 80098e6:	4638      	mov	r0, r7
 80098e8:	eb04 0803 	add.w	r8, r4, r3
 80098ec:	f000 f9ac 	bl	8009c48 <_sbrk_r>
 80098f0:	4580      	cmp	r8, r0
 80098f2:	d13a      	bne.n	800996a <_malloc_r+0xd2>
 80098f4:	6821      	ldr	r1, [r4, #0]
 80098f6:	3503      	adds	r5, #3
 80098f8:	1a6d      	subs	r5, r5, r1
 80098fa:	f025 0503 	bic.w	r5, r5, #3
 80098fe:	3508      	adds	r5, #8
 8009900:	2d0c      	cmp	r5, #12
 8009902:	bf38      	it	cc
 8009904:	250c      	movcc	r5, #12
 8009906:	4629      	mov	r1, r5
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff ffa5 	bl	8009858 <sbrk_aligned>
 800990e:	3001      	adds	r0, #1
 8009910:	d02b      	beq.n	800996a <_malloc_r+0xd2>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	442b      	add	r3, r5
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	e00e      	b.n	8009938 <_malloc_r+0xa0>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	1b52      	subs	r2, r2, r5
 800991e:	d41e      	bmi.n	800995e <_malloc_r+0xc6>
 8009920:	2a0b      	cmp	r2, #11
 8009922:	d916      	bls.n	8009952 <_malloc_r+0xba>
 8009924:	1961      	adds	r1, r4, r5
 8009926:	42a3      	cmp	r3, r4
 8009928:	6025      	str	r5, [r4, #0]
 800992a:	bf18      	it	ne
 800992c:	6059      	strne	r1, [r3, #4]
 800992e:	6863      	ldr	r3, [r4, #4]
 8009930:	bf08      	it	eq
 8009932:	6031      	streq	r1, [r6, #0]
 8009934:	5162      	str	r2, [r4, r5]
 8009936:	604b      	str	r3, [r1, #4]
 8009938:	4638      	mov	r0, r7
 800993a:	f104 060b 	add.w	r6, r4, #11
 800993e:	f000 fa05 	bl	8009d4c <__malloc_unlock>
 8009942:	f026 0607 	bic.w	r6, r6, #7
 8009946:	1d23      	adds	r3, r4, #4
 8009948:	1af2      	subs	r2, r6, r3
 800994a:	d0b6      	beq.n	80098ba <_malloc_r+0x22>
 800994c:	1b9b      	subs	r3, r3, r6
 800994e:	50a3      	str	r3, [r4, r2]
 8009950:	e7b3      	b.n	80098ba <_malloc_r+0x22>
 8009952:	6862      	ldr	r2, [r4, #4]
 8009954:	42a3      	cmp	r3, r4
 8009956:	bf0c      	ite	eq
 8009958:	6032      	streq	r2, [r6, #0]
 800995a:	605a      	strne	r2, [r3, #4]
 800995c:	e7ec      	b.n	8009938 <_malloc_r+0xa0>
 800995e:	4623      	mov	r3, r4
 8009960:	6864      	ldr	r4, [r4, #4]
 8009962:	e7b2      	b.n	80098ca <_malloc_r+0x32>
 8009964:	4634      	mov	r4, r6
 8009966:	6876      	ldr	r6, [r6, #4]
 8009968:	e7b9      	b.n	80098de <_malloc_r+0x46>
 800996a:	230c      	movs	r3, #12
 800996c:	603b      	str	r3, [r7, #0]
 800996e:	4638      	mov	r0, r7
 8009970:	f000 f9ec 	bl	8009d4c <__malloc_unlock>
 8009974:	e7a1      	b.n	80098ba <_malloc_r+0x22>
 8009976:	6025      	str	r5, [r4, #0]
 8009978:	e7de      	b.n	8009938 <_malloc_r+0xa0>
 800997a:	bf00      	nop
 800997c:	20000438 	.word	0x20000438

08009980 <__ssputs_r>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	688e      	ldr	r6, [r1, #8]
 8009986:	429e      	cmp	r6, r3
 8009988:	4682      	mov	sl, r0
 800998a:	460c      	mov	r4, r1
 800998c:	4690      	mov	r8, r2
 800998e:	461f      	mov	r7, r3
 8009990:	d838      	bhi.n	8009a04 <__ssputs_r+0x84>
 8009992:	898a      	ldrh	r2, [r1, #12]
 8009994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009998:	d032      	beq.n	8009a00 <__ssputs_r+0x80>
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	6909      	ldr	r1, [r1, #16]
 800999e:	eba5 0901 	sub.w	r9, r5, r1
 80099a2:	6965      	ldr	r5, [r4, #20]
 80099a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ac:	3301      	adds	r3, #1
 80099ae:	444b      	add	r3, r9
 80099b0:	106d      	asrs	r5, r5, #1
 80099b2:	429d      	cmp	r5, r3
 80099b4:	bf38      	it	cc
 80099b6:	461d      	movcc	r5, r3
 80099b8:	0553      	lsls	r3, r2, #21
 80099ba:	d531      	bpl.n	8009a20 <__ssputs_r+0xa0>
 80099bc:	4629      	mov	r1, r5
 80099be:	f7ff ff6b 	bl	8009898 <_malloc_r>
 80099c2:	4606      	mov	r6, r0
 80099c4:	b950      	cbnz	r0, 80099dc <__ssputs_r+0x5c>
 80099c6:	230c      	movs	r3, #12
 80099c8:	f8ca 3000 	str.w	r3, [sl]
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	6921      	ldr	r1, [r4, #16]
 80099de:	464a      	mov	r2, r9
 80099e0:	f7fc faac 	bl	8005f3c <memcpy>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	6126      	str	r6, [r4, #16]
 80099f2:	6165      	str	r5, [r4, #20]
 80099f4:	444e      	add	r6, r9
 80099f6:	eba5 0509 	sub.w	r5, r5, r9
 80099fa:	6026      	str	r6, [r4, #0]
 80099fc:	60a5      	str	r5, [r4, #8]
 80099fe:	463e      	mov	r6, r7
 8009a00:	42be      	cmp	r6, r7
 8009a02:	d900      	bls.n	8009a06 <__ssputs_r+0x86>
 8009a04:	463e      	mov	r6, r7
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	4632      	mov	r2, r6
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	f000 f97e 	bl	8009d0c <memmove>
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	1b9b      	subs	r3, r3, r6
 8009a14:	60a3      	str	r3, [r4, #8]
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	4433      	add	r3, r6
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e7db      	b.n	80099d8 <__ssputs_r+0x58>
 8009a20:	462a      	mov	r2, r5
 8009a22:	f000 f999 	bl	8009d58 <_realloc_r>
 8009a26:	4606      	mov	r6, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d1e1      	bne.n	80099f0 <__ssputs_r+0x70>
 8009a2c:	6921      	ldr	r1, [r4, #16]
 8009a2e:	4650      	mov	r0, sl
 8009a30:	f7ff fec6 	bl	80097c0 <_free_r>
 8009a34:	e7c7      	b.n	80099c6 <__ssputs_r+0x46>
	...

08009a38 <_svfiprintf_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	4698      	mov	r8, r3
 8009a3e:	898b      	ldrh	r3, [r1, #12]
 8009a40:	061b      	lsls	r3, r3, #24
 8009a42:	b09d      	sub	sp, #116	; 0x74
 8009a44:	4607      	mov	r7, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	4614      	mov	r4, r2
 8009a4a:	d50e      	bpl.n	8009a6a <_svfiprintf_r+0x32>
 8009a4c:	690b      	ldr	r3, [r1, #16]
 8009a4e:	b963      	cbnz	r3, 8009a6a <_svfiprintf_r+0x32>
 8009a50:	2140      	movs	r1, #64	; 0x40
 8009a52:	f7ff ff21 	bl	8009898 <_malloc_r>
 8009a56:	6028      	str	r0, [r5, #0]
 8009a58:	6128      	str	r0, [r5, #16]
 8009a5a:	b920      	cbnz	r0, 8009a66 <_svfiprintf_r+0x2e>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	e0d1      	b.n	8009c0a <_svfiprintf_r+0x1d2>
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	616b      	str	r3, [r5, #20]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6e:	2320      	movs	r3, #32
 8009a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a78:	2330      	movs	r3, #48	; 0x30
 8009a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c24 <_svfiprintf_r+0x1ec>
 8009a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a82:	f04f 0901 	mov.w	r9, #1
 8009a86:	4623      	mov	r3, r4
 8009a88:	469a      	mov	sl, r3
 8009a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a8e:	b10a      	cbz	r2, 8009a94 <_svfiprintf_r+0x5c>
 8009a90:	2a25      	cmp	r2, #37	; 0x25
 8009a92:	d1f9      	bne.n	8009a88 <_svfiprintf_r+0x50>
 8009a94:	ebba 0b04 	subs.w	fp, sl, r4
 8009a98:	d00b      	beq.n	8009ab2 <_svfiprintf_r+0x7a>
 8009a9a:	465b      	mov	r3, fp
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff ff6d 	bl	8009980 <__ssputs_r>
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	f000 80aa 	beq.w	8009c00 <_svfiprintf_r+0x1c8>
 8009aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aae:	445a      	add	r2, fp
 8009ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80a2 	beq.w	8009c00 <_svfiprintf_r+0x1c8>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ac6:	f10a 0a01 	add.w	sl, sl, #1
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	9307      	str	r3, [sp, #28]
 8009ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ad4:	4654      	mov	r4, sl
 8009ad6:	2205      	movs	r2, #5
 8009ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009adc:	4851      	ldr	r0, [pc, #324]	; (8009c24 <_svfiprintf_r+0x1ec>)
 8009ade:	f7f6 fb9f 	bl	8000220 <memchr>
 8009ae2:	9a04      	ldr	r2, [sp, #16]
 8009ae4:	b9d8      	cbnz	r0, 8009b1e <_svfiprintf_r+0xe6>
 8009ae6:	06d0      	lsls	r0, r2, #27
 8009ae8:	bf44      	itt	mi
 8009aea:	2320      	movmi	r3, #32
 8009aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af0:	0711      	lsls	r1, r2, #28
 8009af2:	bf44      	itt	mi
 8009af4:	232b      	movmi	r3, #43	; 0x2b
 8009af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009afa:	f89a 3000 	ldrb.w	r3, [sl]
 8009afe:	2b2a      	cmp	r3, #42	; 0x2a
 8009b00:	d015      	beq.n	8009b2e <_svfiprintf_r+0xf6>
 8009b02:	9a07      	ldr	r2, [sp, #28]
 8009b04:	4654      	mov	r4, sl
 8009b06:	2000      	movs	r0, #0
 8009b08:	f04f 0c0a 	mov.w	ip, #10
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b12:	3b30      	subs	r3, #48	; 0x30
 8009b14:	2b09      	cmp	r3, #9
 8009b16:	d94e      	bls.n	8009bb6 <_svfiprintf_r+0x17e>
 8009b18:	b1b0      	cbz	r0, 8009b48 <_svfiprintf_r+0x110>
 8009b1a:	9207      	str	r2, [sp, #28]
 8009b1c:	e014      	b.n	8009b48 <_svfiprintf_r+0x110>
 8009b1e:	eba0 0308 	sub.w	r3, r0, r8
 8009b22:	fa09 f303 	lsl.w	r3, r9, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	46a2      	mov	sl, r4
 8009b2c:	e7d2      	b.n	8009ad4 <_svfiprintf_r+0x9c>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	1d19      	adds	r1, r3, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9103      	str	r1, [sp, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbb      	ittet	lt
 8009b3a:	425b      	neglt	r3, r3
 8009b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b40:	9307      	strge	r3, [sp, #28]
 8009b42:	9307      	strlt	r3, [sp, #28]
 8009b44:	bfb8      	it	lt
 8009b46:	9204      	strlt	r2, [sp, #16]
 8009b48:	7823      	ldrb	r3, [r4, #0]
 8009b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b4c:	d10c      	bne.n	8009b68 <_svfiprintf_r+0x130>
 8009b4e:	7863      	ldrb	r3, [r4, #1]
 8009b50:	2b2a      	cmp	r3, #42	; 0x2a
 8009b52:	d135      	bne.n	8009bc0 <_svfiprintf_r+0x188>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	1d1a      	adds	r2, r3, #4
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	9203      	str	r2, [sp, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bfb8      	it	lt
 8009b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b64:	3402      	adds	r4, #2
 8009b66:	9305      	str	r3, [sp, #20]
 8009b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c34 <_svfiprintf_r+0x1fc>
 8009b6c:	7821      	ldrb	r1, [r4, #0]
 8009b6e:	2203      	movs	r2, #3
 8009b70:	4650      	mov	r0, sl
 8009b72:	f7f6 fb55 	bl	8000220 <memchr>
 8009b76:	b140      	cbz	r0, 8009b8a <_svfiprintf_r+0x152>
 8009b78:	2340      	movs	r3, #64	; 0x40
 8009b7a:	eba0 000a 	sub.w	r0, r0, sl
 8009b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b82:	9b04      	ldr	r3, [sp, #16]
 8009b84:	4303      	orrs	r3, r0
 8009b86:	3401      	adds	r4, #1
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8e:	4826      	ldr	r0, [pc, #152]	; (8009c28 <_svfiprintf_r+0x1f0>)
 8009b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b94:	2206      	movs	r2, #6
 8009b96:	f7f6 fb43 	bl	8000220 <memchr>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d038      	beq.n	8009c10 <_svfiprintf_r+0x1d8>
 8009b9e:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <_svfiprintf_r+0x1f4>)
 8009ba0:	bb1b      	cbnz	r3, 8009bea <_svfiprintf_r+0x1b2>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	3307      	adds	r3, #7
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	3308      	adds	r3, #8
 8009bac:	9303      	str	r3, [sp, #12]
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	4433      	add	r3, r6
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	e767      	b.n	8009a86 <_svfiprintf_r+0x4e>
 8009bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bba:	460c      	mov	r4, r1
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	e7a5      	b.n	8009b0c <_svfiprintf_r+0xd4>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9305      	str	r3, [sp, #20]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f04f 0c0a 	mov.w	ip, #10
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd2:	3a30      	subs	r2, #48	; 0x30
 8009bd4:	2a09      	cmp	r2, #9
 8009bd6:	d903      	bls.n	8009be0 <_svfiprintf_r+0x1a8>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0c5      	beq.n	8009b68 <_svfiprintf_r+0x130>
 8009bdc:	9105      	str	r1, [sp, #20]
 8009bde:	e7c3      	b.n	8009b68 <_svfiprintf_r+0x130>
 8009be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009be4:	4604      	mov	r4, r0
 8009be6:	2301      	movs	r3, #1
 8009be8:	e7f0      	b.n	8009bcc <_svfiprintf_r+0x194>
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	462a      	mov	r2, r5
 8009bf0:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <_svfiprintf_r+0x1f8>)
 8009bf2:	a904      	add	r1, sp, #16
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7fc fa57 	bl	80060a8 <_printf_float>
 8009bfa:	1c42      	adds	r2, r0, #1
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	d1d6      	bne.n	8009bae <_svfiprintf_r+0x176>
 8009c00:	89ab      	ldrh	r3, [r5, #12]
 8009c02:	065b      	lsls	r3, r3, #25
 8009c04:	f53f af2c 	bmi.w	8009a60 <_svfiprintf_r+0x28>
 8009c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c0a:	b01d      	add	sp, #116	; 0x74
 8009c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	462a      	mov	r2, r5
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <_svfiprintf_r+0x1f8>)
 8009c18:	a904      	add	r1, sp, #16
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7fc fce8 	bl	80065f0 <_printf_i>
 8009c20:	e7eb      	b.n	8009bfa <_svfiprintf_r+0x1c2>
 8009c22:	bf00      	nop
 8009c24:	0800bfbc 	.word	0x0800bfbc
 8009c28:	0800bfc6 	.word	0x0800bfc6
 8009c2c:	080060a9 	.word	0x080060a9
 8009c30:	08009981 	.word	0x08009981
 8009c34:	0800bfc2 	.word	0x0800bfc2

08009c38 <nan>:
 8009c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c40 <nan+0x8>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00000000 	.word	0x00000000
 8009c44:	7ff80000 	.word	0x7ff80000

08009c48 <_sbrk_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	; (8009c64 <_sbrk_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f8 fc9a 	bl	800258c <_sbrk>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_sbrk_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_sbrk_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000440 	.word	0x20000440

08009c68 <strncmp>:
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	b17a      	cbz	r2, 8009c8c <strncmp+0x24>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	3901      	subs	r1, #1
 8009c70:	1884      	adds	r4, r0, r2
 8009c72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c7a:	4290      	cmp	r0, r2
 8009c7c:	d101      	bne.n	8009c82 <strncmp+0x1a>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	d101      	bne.n	8009c86 <strncmp+0x1e>
 8009c82:	1a80      	subs	r0, r0, r2
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d1f3      	bne.n	8009c72 <strncmp+0xa>
 8009c8a:	e7fa      	b.n	8009c82 <strncmp+0x1a>
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	e7f9      	b.n	8009c84 <strncmp+0x1c>

08009c90 <__ascii_wctomb>:
 8009c90:	b149      	cbz	r1, 8009ca6 <__ascii_wctomb+0x16>
 8009c92:	2aff      	cmp	r2, #255	; 0xff
 8009c94:	bf85      	ittet	hi
 8009c96:	238a      	movhi	r3, #138	; 0x8a
 8009c98:	6003      	strhi	r3, [r0, #0]
 8009c9a:	700a      	strbls	r2, [r1, #0]
 8009c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ca0:	bf98      	it	ls
 8009ca2:	2001      	movls	r0, #1
 8009ca4:	4770      	bx	lr
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4770      	bx	lr
	...

08009cac <__assert_func>:
 8009cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <__assert_func+0x2c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	68d8      	ldr	r0, [r3, #12]
 8009cba:	b14c      	cbz	r4, 8009cd0 <__assert_func+0x24>
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <__assert_func+0x30>)
 8009cbe:	9100      	str	r1, [sp, #0]
 8009cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc4:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <__assert_func+0x34>)
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f000 f80e 	bl	8009ce8 <fiprintf>
 8009ccc:	f000 fa8c 	bl	800a1e8 <abort>
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <__assert_func+0x38>)
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	e7f3      	b.n	8009cbe <__assert_func+0x12>
 8009cd6:	bf00      	nop
 8009cd8:	20000010 	.word	0x20000010
 8009cdc:	0800bfcd 	.word	0x0800bfcd
 8009ce0:	0800bfda 	.word	0x0800bfda
 8009ce4:	0800c008 	.word	0x0800c008

08009ce8 <fiprintf>:
 8009ce8:	b40e      	push	{r1, r2, r3}
 8009cea:	b503      	push	{r0, r1, lr}
 8009cec:	4601      	mov	r1, r0
 8009cee:	ab03      	add	r3, sp, #12
 8009cf0:	4805      	ldr	r0, [pc, #20]	; (8009d08 <fiprintf+0x20>)
 8009cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf6:	6800      	ldr	r0, [r0, #0]
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	f000 f885 	bl	8009e08 <_vfiprintf_r>
 8009cfe:	b002      	add	sp, #8
 8009d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d04:	b003      	add	sp, #12
 8009d06:	4770      	bx	lr
 8009d08:	20000010 	.word	0x20000010

08009d0c <memmove>:
 8009d0c:	4288      	cmp	r0, r1
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	eb01 0402 	add.w	r4, r1, r2
 8009d14:	d902      	bls.n	8009d1c <memmove+0x10>
 8009d16:	4284      	cmp	r4, r0
 8009d18:	4623      	mov	r3, r4
 8009d1a:	d807      	bhi.n	8009d2c <memmove+0x20>
 8009d1c:	1e43      	subs	r3, r0, #1
 8009d1e:	42a1      	cmp	r1, r4
 8009d20:	d008      	beq.n	8009d34 <memmove+0x28>
 8009d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2a:	e7f8      	b.n	8009d1e <memmove+0x12>
 8009d2c:	4402      	add	r2, r0
 8009d2e:	4601      	mov	r1, r0
 8009d30:	428a      	cmp	r2, r1
 8009d32:	d100      	bne.n	8009d36 <memmove+0x2a>
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3e:	e7f7      	b.n	8009d30 <memmove+0x24>

08009d40 <__malloc_lock>:
 8009d40:	4801      	ldr	r0, [pc, #4]	; (8009d48 <__malloc_lock+0x8>)
 8009d42:	f000 bc11 	b.w	800a568 <__retarget_lock_acquire_recursive>
 8009d46:	bf00      	nop
 8009d48:	20000444 	.word	0x20000444

08009d4c <__malloc_unlock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	; (8009d54 <__malloc_unlock+0x8>)
 8009d4e:	f000 bc0c 	b.w	800a56a <__retarget_lock_release_recursive>
 8009d52:	bf00      	nop
 8009d54:	20000444 	.word	0x20000444

08009d58 <_realloc_r>:
 8009d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4614      	mov	r4, r2
 8009d60:	460e      	mov	r6, r1
 8009d62:	b921      	cbnz	r1, 8009d6e <_realloc_r+0x16>
 8009d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4611      	mov	r1, r2
 8009d6a:	f7ff bd95 	b.w	8009898 <_malloc_r>
 8009d6e:	b92a      	cbnz	r2, 8009d7c <_realloc_r+0x24>
 8009d70:	f7ff fd26 	bl	80097c0 <_free_r>
 8009d74:	4625      	mov	r5, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7c:	f000 fc5c 	bl	800a638 <_malloc_usable_size_r>
 8009d80:	4284      	cmp	r4, r0
 8009d82:	4607      	mov	r7, r0
 8009d84:	d802      	bhi.n	8009d8c <_realloc_r+0x34>
 8009d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d8a:	d812      	bhi.n	8009db2 <_realloc_r+0x5a>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7ff fd82 	bl	8009898 <_malloc_r>
 8009d94:	4605      	mov	r5, r0
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d0ed      	beq.n	8009d76 <_realloc_r+0x1e>
 8009d9a:	42bc      	cmp	r4, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4631      	mov	r1, r6
 8009da0:	bf28      	it	cs
 8009da2:	463a      	movcs	r2, r7
 8009da4:	f7fc f8ca 	bl	8005f3c <memcpy>
 8009da8:	4631      	mov	r1, r6
 8009daa:	4640      	mov	r0, r8
 8009dac:	f7ff fd08 	bl	80097c0 <_free_r>
 8009db0:	e7e1      	b.n	8009d76 <_realloc_r+0x1e>
 8009db2:	4635      	mov	r5, r6
 8009db4:	e7df      	b.n	8009d76 <_realloc_r+0x1e>

08009db6 <__sfputc_r>:
 8009db6:	6893      	ldr	r3, [r2, #8]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	b410      	push	{r4}
 8009dbe:	6093      	str	r3, [r2, #8]
 8009dc0:	da08      	bge.n	8009dd4 <__sfputc_r+0x1e>
 8009dc2:	6994      	ldr	r4, [r2, #24]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	db01      	blt.n	8009dcc <__sfputc_r+0x16>
 8009dc8:	290a      	cmp	r1, #10
 8009dca:	d103      	bne.n	8009dd4 <__sfputc_r+0x1e>
 8009dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd0:	f000 b94a 	b.w	800a068 <__swbuf_r>
 8009dd4:	6813      	ldr	r3, [r2, #0]
 8009dd6:	1c58      	adds	r0, r3, #1
 8009dd8:	6010      	str	r0, [r2, #0]
 8009dda:	7019      	strb	r1, [r3, #0]
 8009ddc:	4608      	mov	r0, r1
 8009dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <__sfputs_r>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	4614      	mov	r4, r2
 8009dec:	18d5      	adds	r5, r2, r3
 8009dee:	42ac      	cmp	r4, r5
 8009df0:	d101      	bne.n	8009df6 <__sfputs_r+0x12>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e007      	b.n	8009e06 <__sfputs_r+0x22>
 8009df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff ffda 	bl	8009db6 <__sfputc_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d1f3      	bne.n	8009dee <__sfputs_r+0xa>
 8009e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e08 <_vfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	b09d      	sub	sp, #116	; 0x74
 8009e10:	4614      	mov	r4, r2
 8009e12:	4698      	mov	r8, r3
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_vfiprintf_r+0x18>
 8009e18:	6983      	ldr	r3, [r0, #24]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_vfiprintf_r+0x18>
 8009e1c:	f000 fb06 	bl	800a42c <__sinit>
 8009e20:	4b89      	ldr	r3, [pc, #548]	; (800a048 <_vfiprintf_r+0x240>)
 8009e22:	429d      	cmp	r5, r3
 8009e24:	d11b      	bne.n	8009e5e <_vfiprintf_r+0x56>
 8009e26:	6875      	ldr	r5, [r6, #4]
 8009e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e36:	f000 fb97 	bl	800a568 <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x3c>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b9eb      	cbnz	r3, 8009e80 <_vfiprintf_r+0x78>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f960 	bl	800a10c <__swsetup_r>
 8009e4c:	b1c0      	cbz	r0, 8009e80 <_vfiprintf_r+0x78>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d50e      	bpl.n	8009e72 <_vfiprintf_r+0x6a>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	; 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <_vfiprintf_r+0x244>)
 8009e60:	429d      	cmp	r5, r3
 8009e62:	d101      	bne.n	8009e68 <_vfiprintf_r+0x60>
 8009e64:	68b5      	ldr	r5, [r6, #8]
 8009e66:	e7df      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e68:	4b79      	ldr	r3, [pc, #484]	; (800a050 <_vfiprintf_r+0x248>)
 8009e6a:	429d      	cmp	r5, r3
 8009e6c:	bf08      	it	eq
 8009e6e:	68f5      	ldreq	r5, [r6, #12]
 8009e70:	e7da      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	0598      	lsls	r0, r3, #22
 8009e76:	d4ed      	bmi.n	8009e54 <_vfiprintf_r+0x4c>
 8009e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e7a:	f000 fb76 	bl	800a56a <__retarget_lock_release_recursive>
 8009e7e:	e7e9      	b.n	8009e54 <_vfiprintf_r+0x4c>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9309      	str	r3, [sp, #36]	; 0x24
 8009e84:	2320      	movs	r3, #32
 8009e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e8e:	2330      	movs	r3, #48	; 0x30
 8009e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a054 <_vfiprintf_r+0x24c>
 8009e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e98:	f04f 0901 	mov.w	r9, #1
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	469a      	mov	sl, r3
 8009ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_vfiprintf_r+0xa2>
 8009ea6:	2a25      	cmp	r2, #37	; 0x25
 8009ea8:	d1f9      	bne.n	8009e9e <_vfiprintf_r+0x96>
 8009eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8009eae:	d00b      	beq.n	8009ec8 <_vfiprintf_r+0xc0>
 8009eb0:	465b      	mov	r3, fp
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff94 	bl	8009de4 <__sfputs_r>
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f000 80aa 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec4:	445a      	add	r2, fp
 8009ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80a2 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009edc:	f10a 0a01 	add.w	sl, sl, #1
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eea:	4654      	mov	r4, sl
 8009eec:	2205      	movs	r2, #5
 8009eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef2:	4858      	ldr	r0, [pc, #352]	; (800a054 <_vfiprintf_r+0x24c>)
 8009ef4:	f7f6 f994 	bl	8000220 <memchr>
 8009ef8:	9a04      	ldr	r2, [sp, #16]
 8009efa:	b9d8      	cbnz	r0, 8009f34 <_vfiprintf_r+0x12c>
 8009efc:	06d1      	lsls	r1, r2, #27
 8009efe:	bf44      	itt	mi
 8009f00:	2320      	movmi	r3, #32
 8009f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f06:	0713      	lsls	r3, r2, #28
 8009f08:	bf44      	itt	mi
 8009f0a:	232b      	movmi	r3, #43	; 0x2b
 8009f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f10:	f89a 3000 	ldrb.w	r3, [sl]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d015      	beq.n	8009f44 <_vfiprintf_r+0x13c>
 8009f18:	9a07      	ldr	r2, [sp, #28]
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f04f 0c0a 	mov.w	ip, #10
 8009f22:	4621      	mov	r1, r4
 8009f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f28:	3b30      	subs	r3, #48	; 0x30
 8009f2a:	2b09      	cmp	r3, #9
 8009f2c:	d94e      	bls.n	8009fcc <_vfiprintf_r+0x1c4>
 8009f2e:	b1b0      	cbz	r0, 8009f5e <_vfiprintf_r+0x156>
 8009f30:	9207      	str	r2, [sp, #28]
 8009f32:	e014      	b.n	8009f5e <_vfiprintf_r+0x156>
 8009f34:	eba0 0308 	sub.w	r3, r0, r8
 8009f38:	fa09 f303 	lsl.w	r3, r9, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	46a2      	mov	sl, r4
 8009f42:	e7d2      	b.n	8009eea <_vfiprintf_r+0xe2>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	1d19      	adds	r1, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	9103      	str	r1, [sp, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bfbb      	ittet	lt
 8009f50:	425b      	neglt	r3, r3
 8009f52:	f042 0202 	orrlt.w	r2, r2, #2
 8009f56:	9307      	strge	r3, [sp, #28]
 8009f58:	9307      	strlt	r3, [sp, #28]
 8009f5a:	bfb8      	it	lt
 8009f5c:	9204      	strlt	r2, [sp, #16]
 8009f5e:	7823      	ldrb	r3, [r4, #0]
 8009f60:	2b2e      	cmp	r3, #46	; 0x2e
 8009f62:	d10c      	bne.n	8009f7e <_vfiprintf_r+0x176>
 8009f64:	7863      	ldrb	r3, [r4, #1]
 8009f66:	2b2a      	cmp	r3, #42	; 0x2a
 8009f68:	d135      	bne.n	8009fd6 <_vfiprintf_r+0x1ce>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	1d1a      	adds	r2, r3, #4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	9203      	str	r2, [sp, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f7a:	3402      	adds	r4, #2
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a064 <_vfiprintf_r+0x25c>
 8009f82:	7821      	ldrb	r1, [r4, #0]
 8009f84:	2203      	movs	r2, #3
 8009f86:	4650      	mov	r0, sl
 8009f88:	f7f6 f94a 	bl	8000220 <memchr>
 8009f8c:	b140      	cbz	r0, 8009fa0 <_vfiprintf_r+0x198>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	eba0 000a 	sub.w	r0, r0, sl
 8009f94:	fa03 f000 	lsl.w	r0, r3, r0
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	4303      	orrs	r3, r0
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa4:	482c      	ldr	r0, [pc, #176]	; (800a058 <_vfiprintf_r+0x250>)
 8009fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009faa:	2206      	movs	r2, #6
 8009fac:	f7f6 f938 	bl	8000220 <memchr>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d03f      	beq.n	800a034 <_vfiprintf_r+0x22c>
 8009fb4:	4b29      	ldr	r3, [pc, #164]	; (800a05c <_vfiprintf_r+0x254>)
 8009fb6:	bb1b      	cbnz	r3, 800a000 <_vfiprintf_r+0x1f8>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	3307      	adds	r3, #7
 8009fbc:	f023 0307 	bic.w	r3, r3, #7
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc6:	443b      	add	r3, r7
 8009fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fca:	e767      	b.n	8009e9c <_vfiprintf_r+0x94>
 8009fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e7a5      	b.n	8009f22 <_vfiprintf_r+0x11a>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f04f 0c0a 	mov.w	ip, #10
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fe8:	3a30      	subs	r2, #48	; 0x30
 8009fea:	2a09      	cmp	r2, #9
 8009fec:	d903      	bls.n	8009ff6 <_vfiprintf_r+0x1ee>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0c5      	beq.n	8009f7e <_vfiprintf_r+0x176>
 8009ff2:	9105      	str	r1, [sp, #20]
 8009ff4:	e7c3      	b.n	8009f7e <_vfiprintf_r+0x176>
 8009ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e7f0      	b.n	8009fe2 <_vfiprintf_r+0x1da>
 800a000:	ab03      	add	r3, sp, #12
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	462a      	mov	r2, r5
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <_vfiprintf_r+0x258>)
 800a008:	a904      	add	r1, sp, #16
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7fc f84c 	bl	80060a8 <_printf_float>
 800a010:	4607      	mov	r7, r0
 800a012:	1c78      	adds	r0, r7, #1
 800a014:	d1d6      	bne.n	8009fc4 <_vfiprintf_r+0x1bc>
 800a016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a018:	07d9      	lsls	r1, r3, #31
 800a01a:	d405      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	059a      	lsls	r2, r3, #22
 800a020:	d402      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a024:	f000 faa1 	bl	800a56a <__retarget_lock_release_recursive>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	065b      	lsls	r3, r3, #25
 800a02c:	f53f af12 	bmi.w	8009e54 <_vfiprintf_r+0x4c>
 800a030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a032:	e711      	b.n	8009e58 <_vfiprintf_r+0x50>
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	462a      	mov	r2, r5
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <_vfiprintf_r+0x258>)
 800a03c:	a904      	add	r1, sp, #16
 800a03e:	4630      	mov	r0, r6
 800a040:	f7fc fad6 	bl	80065f0 <_printf_i>
 800a044:	e7e4      	b.n	800a010 <_vfiprintf_r+0x208>
 800a046:	bf00      	nop
 800a048:	0800c02c 	.word	0x0800c02c
 800a04c:	0800c04c 	.word	0x0800c04c
 800a050:	0800c00c 	.word	0x0800c00c
 800a054:	0800bfbc 	.word	0x0800bfbc
 800a058:	0800bfc6 	.word	0x0800bfc6
 800a05c:	080060a9 	.word	0x080060a9
 800a060:	08009de5 	.word	0x08009de5
 800a064:	0800bfc2 	.word	0x0800bfc2

0800a068 <__swbuf_r>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	460e      	mov	r6, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	4605      	mov	r5, r0
 800a070:	b118      	cbz	r0, 800a07a <__swbuf_r+0x12>
 800a072:	6983      	ldr	r3, [r0, #24]
 800a074:	b90b      	cbnz	r3, 800a07a <__swbuf_r+0x12>
 800a076:	f000 f9d9 	bl	800a42c <__sinit>
 800a07a:	4b21      	ldr	r3, [pc, #132]	; (800a100 <__swbuf_r+0x98>)
 800a07c:	429c      	cmp	r4, r3
 800a07e:	d12b      	bne.n	800a0d8 <__swbuf_r+0x70>
 800a080:	686c      	ldr	r4, [r5, #4]
 800a082:	69a3      	ldr	r3, [r4, #24]
 800a084:	60a3      	str	r3, [r4, #8]
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	071a      	lsls	r2, r3, #28
 800a08a:	d52f      	bpl.n	800a0ec <__swbuf_r+0x84>
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	b36b      	cbz	r3, 800a0ec <__swbuf_r+0x84>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	1ac0      	subs	r0, r0, r3
 800a096:	6963      	ldr	r3, [r4, #20]
 800a098:	b2f6      	uxtb	r6, r6
 800a09a:	4283      	cmp	r3, r0
 800a09c:	4637      	mov	r7, r6
 800a09e:	dc04      	bgt.n	800a0aa <__swbuf_r+0x42>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 f92e 	bl	800a304 <_fflush_r>
 800a0a8:	bb30      	cbnz	r0, 800a0f8 <__swbuf_r+0x90>
 800a0aa:	68a3      	ldr	r3, [r4, #8]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	60a3      	str	r3, [r4, #8]
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	6022      	str	r2, [r4, #0]
 800a0b6:	701e      	strb	r6, [r3, #0]
 800a0b8:	6963      	ldr	r3, [r4, #20]
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	4283      	cmp	r3, r0
 800a0be:	d004      	beq.n	800a0ca <__swbuf_r+0x62>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	07db      	lsls	r3, r3, #31
 800a0c4:	d506      	bpl.n	800a0d4 <__swbuf_r+0x6c>
 800a0c6:	2e0a      	cmp	r6, #10
 800a0c8:	d104      	bne.n	800a0d4 <__swbuf_r+0x6c>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 f919 	bl	800a304 <_fflush_r>
 800a0d2:	b988      	cbnz	r0, 800a0f8 <__swbuf_r+0x90>
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <__swbuf_r+0x9c>)
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	d101      	bne.n	800a0e2 <__swbuf_r+0x7a>
 800a0de:	68ac      	ldr	r4, [r5, #8]
 800a0e0:	e7cf      	b.n	800a082 <__swbuf_r+0x1a>
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <__swbuf_r+0xa0>)
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	bf08      	it	eq
 800a0e8:	68ec      	ldreq	r4, [r5, #12]
 800a0ea:	e7ca      	b.n	800a082 <__swbuf_r+0x1a>
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 f80c 	bl	800a10c <__swsetup_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d0cb      	beq.n	800a090 <__swbuf_r+0x28>
 800a0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a0fc:	e7ea      	b.n	800a0d4 <__swbuf_r+0x6c>
 800a0fe:	bf00      	nop
 800a100:	0800c02c 	.word	0x0800c02c
 800a104:	0800c04c 	.word	0x0800c04c
 800a108:	0800c00c 	.word	0x0800c00c

0800a10c <__swsetup_r>:
 800a10c:	4b32      	ldr	r3, [pc, #200]	; (800a1d8 <__swsetup_r+0xcc>)
 800a10e:	b570      	push	{r4, r5, r6, lr}
 800a110:	681d      	ldr	r5, [r3, #0]
 800a112:	4606      	mov	r6, r0
 800a114:	460c      	mov	r4, r1
 800a116:	b125      	cbz	r5, 800a122 <__swsetup_r+0x16>
 800a118:	69ab      	ldr	r3, [r5, #24]
 800a11a:	b913      	cbnz	r3, 800a122 <__swsetup_r+0x16>
 800a11c:	4628      	mov	r0, r5
 800a11e:	f000 f985 	bl	800a42c <__sinit>
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <__swsetup_r+0xd0>)
 800a124:	429c      	cmp	r4, r3
 800a126:	d10f      	bne.n	800a148 <__swsetup_r+0x3c>
 800a128:	686c      	ldr	r4, [r5, #4]
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a130:	0719      	lsls	r1, r3, #28
 800a132:	d42c      	bmi.n	800a18e <__swsetup_r+0x82>
 800a134:	06dd      	lsls	r5, r3, #27
 800a136:	d411      	bmi.n	800a15c <__swsetup_r+0x50>
 800a138:	2309      	movs	r3, #9
 800a13a:	6033      	str	r3, [r6, #0]
 800a13c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	f04f 30ff 	mov.w	r0, #4294967295
 800a146:	e03e      	b.n	800a1c6 <__swsetup_r+0xba>
 800a148:	4b25      	ldr	r3, [pc, #148]	; (800a1e0 <__swsetup_r+0xd4>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	d101      	bne.n	800a152 <__swsetup_r+0x46>
 800a14e:	68ac      	ldr	r4, [r5, #8]
 800a150:	e7eb      	b.n	800a12a <__swsetup_r+0x1e>
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <__swsetup_r+0xd8>)
 800a154:	429c      	cmp	r4, r3
 800a156:	bf08      	it	eq
 800a158:	68ec      	ldreq	r4, [r5, #12]
 800a15a:	e7e6      	b.n	800a12a <__swsetup_r+0x1e>
 800a15c:	0758      	lsls	r0, r3, #29
 800a15e:	d512      	bpl.n	800a186 <__swsetup_r+0x7a>
 800a160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a162:	b141      	cbz	r1, 800a176 <__swsetup_r+0x6a>
 800a164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a168:	4299      	cmp	r1, r3
 800a16a:	d002      	beq.n	800a172 <__swsetup_r+0x66>
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7ff fb27 	bl	80097c0 <_free_r>
 800a172:	2300      	movs	r3, #0
 800a174:	6363      	str	r3, [r4, #52]	; 0x34
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	2300      	movs	r3, #0
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f043 0308 	orr.w	r3, r3, #8
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	b94b      	cbnz	r3, 800a1a6 <__swsetup_r+0x9a>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a19c:	d003      	beq.n	800a1a6 <__swsetup_r+0x9a>
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 fa09 	bl	800a5b8 <__smakebuf_r>
 800a1a6:	89a0      	ldrh	r0, [r4, #12]
 800a1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ac:	f010 0301 	ands.w	r3, r0, #1
 800a1b0:	d00a      	beq.n	800a1c8 <__swsetup_r+0xbc>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	6963      	ldr	r3, [r4, #20]
 800a1b8:	425b      	negs	r3, r3
 800a1ba:	61a3      	str	r3, [r4, #24]
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	b943      	cbnz	r3, 800a1d2 <__swsetup_r+0xc6>
 800a1c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1c4:	d1ba      	bne.n	800a13c <__swsetup_r+0x30>
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	0781      	lsls	r1, r0, #30
 800a1ca:	bf58      	it	pl
 800a1cc:	6963      	ldrpl	r3, [r4, #20]
 800a1ce:	60a3      	str	r3, [r4, #8]
 800a1d0:	e7f4      	b.n	800a1bc <__swsetup_r+0xb0>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e7f7      	b.n	800a1c6 <__swsetup_r+0xba>
 800a1d6:	bf00      	nop
 800a1d8:	20000010 	.word	0x20000010
 800a1dc:	0800c02c 	.word	0x0800c02c
 800a1e0:	0800c04c 	.word	0x0800c04c
 800a1e4:	0800c00c 	.word	0x0800c00c

0800a1e8 <abort>:
 800a1e8:	b508      	push	{r3, lr}
 800a1ea:	2006      	movs	r0, #6
 800a1ec:	f000 fa54 	bl	800a698 <raise>
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f7f8 f953 	bl	800249c <_exit>
	...

0800a1f8 <__sflush_r>:
 800a1f8:	898a      	ldrh	r2, [r1, #12]
 800a1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	4605      	mov	r5, r0
 800a200:	0710      	lsls	r0, r2, #28
 800a202:	460c      	mov	r4, r1
 800a204:	d458      	bmi.n	800a2b8 <__sflush_r+0xc0>
 800a206:	684b      	ldr	r3, [r1, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dc05      	bgt.n	800a218 <__sflush_r+0x20>
 800a20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc02      	bgt.n	800a218 <__sflush_r+0x20>
 800a212:	2000      	movs	r0, #0
 800a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d0f9      	beq.n	800a212 <__sflush_r+0x1a>
 800a21e:	2300      	movs	r3, #0
 800a220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a224:	682f      	ldr	r7, [r5, #0]
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	d032      	beq.n	800a290 <__sflush_r+0x98>
 800a22a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	075a      	lsls	r2, r3, #29
 800a230:	d505      	bpl.n	800a23e <__sflush_r+0x46>
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	1ac0      	subs	r0, r0, r3
 800a236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a238:	b10b      	cbz	r3, 800a23e <__sflush_r+0x46>
 800a23a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a23c:	1ac0      	subs	r0, r0, r3
 800a23e:	2300      	movs	r3, #0
 800a240:	4602      	mov	r2, r0
 800a242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	4628      	mov	r0, r5
 800a248:	47b0      	blx	r6
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	d106      	bne.n	800a25e <__sflush_r+0x66>
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	291d      	cmp	r1, #29
 800a254:	d82c      	bhi.n	800a2b0 <__sflush_r+0xb8>
 800a256:	4a2a      	ldr	r2, [pc, #168]	; (800a300 <__sflush_r+0x108>)
 800a258:	40ca      	lsrs	r2, r1
 800a25a:	07d6      	lsls	r6, r2, #31
 800a25c:	d528      	bpl.n	800a2b0 <__sflush_r+0xb8>
 800a25e:	2200      	movs	r2, #0
 800a260:	6062      	str	r2, [r4, #4]
 800a262:	04d9      	lsls	r1, r3, #19
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	d504      	bpl.n	800a274 <__sflush_r+0x7c>
 800a26a:	1c42      	adds	r2, r0, #1
 800a26c:	d101      	bne.n	800a272 <__sflush_r+0x7a>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b903      	cbnz	r3, 800a274 <__sflush_r+0x7c>
 800a272:	6560      	str	r0, [r4, #84]	; 0x54
 800a274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	2900      	cmp	r1, #0
 800a27a:	d0ca      	beq.n	800a212 <__sflush_r+0x1a>
 800a27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a280:	4299      	cmp	r1, r3
 800a282:	d002      	beq.n	800a28a <__sflush_r+0x92>
 800a284:	4628      	mov	r0, r5
 800a286:	f7ff fa9b 	bl	80097c0 <_free_r>
 800a28a:	2000      	movs	r0, #0
 800a28c:	6360      	str	r0, [r4, #52]	; 0x34
 800a28e:	e7c1      	b.n	800a214 <__sflush_r+0x1c>
 800a290:	6a21      	ldr	r1, [r4, #32]
 800a292:	2301      	movs	r3, #1
 800a294:	4628      	mov	r0, r5
 800a296:	47b0      	blx	r6
 800a298:	1c41      	adds	r1, r0, #1
 800a29a:	d1c7      	bne.n	800a22c <__sflush_r+0x34>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0c4      	beq.n	800a22c <__sflush_r+0x34>
 800a2a2:	2b1d      	cmp	r3, #29
 800a2a4:	d001      	beq.n	800a2aa <__sflush_r+0xb2>
 800a2a6:	2b16      	cmp	r3, #22
 800a2a8:	d101      	bne.n	800a2ae <__sflush_r+0xb6>
 800a2aa:	602f      	str	r7, [r5, #0]
 800a2ac:	e7b1      	b.n	800a212 <__sflush_r+0x1a>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b4:	81a3      	strh	r3, [r4, #12]
 800a2b6:	e7ad      	b.n	800a214 <__sflush_r+0x1c>
 800a2b8:	690f      	ldr	r7, [r1, #16]
 800a2ba:	2f00      	cmp	r7, #0
 800a2bc:	d0a9      	beq.n	800a212 <__sflush_r+0x1a>
 800a2be:	0793      	lsls	r3, r2, #30
 800a2c0:	680e      	ldr	r6, [r1, #0]
 800a2c2:	bf08      	it	eq
 800a2c4:	694b      	ldreq	r3, [r1, #20]
 800a2c6:	600f      	str	r7, [r1, #0]
 800a2c8:	bf18      	it	ne
 800a2ca:	2300      	movne	r3, #0
 800a2cc:	eba6 0807 	sub.w	r8, r6, r7
 800a2d0:	608b      	str	r3, [r1, #8]
 800a2d2:	f1b8 0f00 	cmp.w	r8, #0
 800a2d6:	dd9c      	ble.n	800a212 <__sflush_r+0x1a>
 800a2d8:	6a21      	ldr	r1, [r4, #32]
 800a2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2dc:	4643      	mov	r3, r8
 800a2de:	463a      	mov	r2, r7
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b0      	blx	r6
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	dc06      	bgt.n	800a2f6 <__sflush_r+0xfe>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e78e      	b.n	800a214 <__sflush_r+0x1c>
 800a2f6:	4407      	add	r7, r0
 800a2f8:	eba8 0800 	sub.w	r8, r8, r0
 800a2fc:	e7e9      	b.n	800a2d2 <__sflush_r+0xda>
 800a2fe:	bf00      	nop
 800a300:	20400001 	.word	0x20400001

0800a304 <_fflush_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	4605      	mov	r5, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b913      	cbnz	r3, 800a314 <_fflush_r+0x10>
 800a30e:	2500      	movs	r5, #0
 800a310:	4628      	mov	r0, r5
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	b118      	cbz	r0, 800a31e <_fflush_r+0x1a>
 800a316:	6983      	ldr	r3, [r0, #24]
 800a318:	b90b      	cbnz	r3, 800a31e <_fflush_r+0x1a>
 800a31a:	f000 f887 	bl	800a42c <__sinit>
 800a31e:	4b14      	ldr	r3, [pc, #80]	; (800a370 <_fflush_r+0x6c>)
 800a320:	429c      	cmp	r4, r3
 800a322:	d11b      	bne.n	800a35c <_fflush_r+0x58>
 800a324:	686c      	ldr	r4, [r5, #4]
 800a326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0ef      	beq.n	800a30e <_fflush_r+0xa>
 800a32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a330:	07d0      	lsls	r0, r2, #31
 800a332:	d404      	bmi.n	800a33e <_fflush_r+0x3a>
 800a334:	0599      	lsls	r1, r3, #22
 800a336:	d402      	bmi.n	800a33e <_fflush_r+0x3a>
 800a338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a33a:	f000 f915 	bl	800a568 <__retarget_lock_acquire_recursive>
 800a33e:	4628      	mov	r0, r5
 800a340:	4621      	mov	r1, r4
 800a342:	f7ff ff59 	bl	800a1f8 <__sflush_r>
 800a346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a348:	07da      	lsls	r2, r3, #31
 800a34a:	4605      	mov	r5, r0
 800a34c:	d4e0      	bmi.n	800a310 <_fflush_r+0xc>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	059b      	lsls	r3, r3, #22
 800a352:	d4dd      	bmi.n	800a310 <_fflush_r+0xc>
 800a354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a356:	f000 f908 	bl	800a56a <__retarget_lock_release_recursive>
 800a35a:	e7d9      	b.n	800a310 <_fflush_r+0xc>
 800a35c:	4b05      	ldr	r3, [pc, #20]	; (800a374 <_fflush_r+0x70>)
 800a35e:	429c      	cmp	r4, r3
 800a360:	d101      	bne.n	800a366 <_fflush_r+0x62>
 800a362:	68ac      	ldr	r4, [r5, #8]
 800a364:	e7df      	b.n	800a326 <_fflush_r+0x22>
 800a366:	4b04      	ldr	r3, [pc, #16]	; (800a378 <_fflush_r+0x74>)
 800a368:	429c      	cmp	r4, r3
 800a36a:	bf08      	it	eq
 800a36c:	68ec      	ldreq	r4, [r5, #12]
 800a36e:	e7da      	b.n	800a326 <_fflush_r+0x22>
 800a370:	0800c02c 	.word	0x0800c02c
 800a374:	0800c04c 	.word	0x0800c04c
 800a378:	0800c00c 	.word	0x0800c00c

0800a37c <std>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	e9c0 3300 	strd	r3, r3, [r0]
 800a386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a38a:	6083      	str	r3, [r0, #8]
 800a38c:	8181      	strh	r1, [r0, #12]
 800a38e:	6643      	str	r3, [r0, #100]	; 0x64
 800a390:	81c2      	strh	r2, [r0, #14]
 800a392:	6183      	str	r3, [r0, #24]
 800a394:	4619      	mov	r1, r3
 800a396:	2208      	movs	r2, #8
 800a398:	305c      	adds	r0, #92	; 0x5c
 800a39a:	f7fb fddd 	bl	8005f58 <memset>
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <std+0x38>)
 800a3a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3a2:	4b05      	ldr	r3, [pc, #20]	; (800a3b8 <std+0x3c>)
 800a3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3a6:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <std+0x40>)
 800a3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <std+0x44>)
 800a3ac:	6224      	str	r4, [r4, #32]
 800a3ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800a6d1 	.word	0x0800a6d1
 800a3b8:	0800a6f3 	.word	0x0800a6f3
 800a3bc:	0800a72b 	.word	0x0800a72b
 800a3c0:	0800a74f 	.word	0x0800a74f

0800a3c4 <_cleanup_r>:
 800a3c4:	4901      	ldr	r1, [pc, #4]	; (800a3cc <_cleanup_r+0x8>)
 800a3c6:	f000 b8af 	b.w	800a528 <_fwalk_reent>
 800a3ca:	bf00      	nop
 800a3cc:	0800a305 	.word	0x0800a305

0800a3d0 <__sfmoreglue>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	2268      	movs	r2, #104	; 0x68
 800a3d4:	1e4d      	subs	r5, r1, #1
 800a3d6:	4355      	muls	r5, r2
 800a3d8:	460e      	mov	r6, r1
 800a3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3de:	f7ff fa5b 	bl	8009898 <_malloc_r>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	b140      	cbz	r0, 800a3f8 <__sfmoreglue+0x28>
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a3ec:	300c      	adds	r0, #12
 800a3ee:	60a0      	str	r0, [r4, #8]
 800a3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3f4:	f7fb fdb0 	bl	8005f58 <memset>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}

0800a3fc <__sfp_lock_acquire>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__sfp_lock_acquire+0x8>)
 800a3fe:	f000 b8b3 	b.w	800a568 <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	20000445 	.word	0x20000445

0800a408 <__sfp_lock_release>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__sfp_lock_release+0x8>)
 800a40a:	f000 b8ae 	b.w	800a56a <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	20000445 	.word	0x20000445

0800a414 <__sinit_lock_acquire>:
 800a414:	4801      	ldr	r0, [pc, #4]	; (800a41c <__sinit_lock_acquire+0x8>)
 800a416:	f000 b8a7 	b.w	800a568 <__retarget_lock_acquire_recursive>
 800a41a:	bf00      	nop
 800a41c:	20000446 	.word	0x20000446

0800a420 <__sinit_lock_release>:
 800a420:	4801      	ldr	r0, [pc, #4]	; (800a428 <__sinit_lock_release+0x8>)
 800a422:	f000 b8a2 	b.w	800a56a <__retarget_lock_release_recursive>
 800a426:	bf00      	nop
 800a428:	20000446 	.word	0x20000446

0800a42c <__sinit>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	4604      	mov	r4, r0
 800a430:	f7ff fff0 	bl	800a414 <__sinit_lock_acquire>
 800a434:	69a3      	ldr	r3, [r4, #24]
 800a436:	b11b      	cbz	r3, 800a440 <__sinit+0x14>
 800a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43c:	f7ff bff0 	b.w	800a420 <__sinit_lock_release>
 800a440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a444:	6523      	str	r3, [r4, #80]	; 0x50
 800a446:	4b13      	ldr	r3, [pc, #76]	; (800a494 <__sinit+0x68>)
 800a448:	4a13      	ldr	r2, [pc, #76]	; (800a498 <__sinit+0x6c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a44e:	42a3      	cmp	r3, r4
 800a450:	bf04      	itt	eq
 800a452:	2301      	moveq	r3, #1
 800a454:	61a3      	streq	r3, [r4, #24]
 800a456:	4620      	mov	r0, r4
 800a458:	f000 f820 	bl	800a49c <__sfp>
 800a45c:	6060      	str	r0, [r4, #4]
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 f81c 	bl	800a49c <__sfp>
 800a464:	60a0      	str	r0, [r4, #8]
 800a466:	4620      	mov	r0, r4
 800a468:	f000 f818 	bl	800a49c <__sfp>
 800a46c:	2200      	movs	r2, #0
 800a46e:	60e0      	str	r0, [r4, #12]
 800a470:	2104      	movs	r1, #4
 800a472:	6860      	ldr	r0, [r4, #4]
 800a474:	f7ff ff82 	bl	800a37c <std>
 800a478:	68a0      	ldr	r0, [r4, #8]
 800a47a:	2201      	movs	r2, #1
 800a47c:	2109      	movs	r1, #9
 800a47e:	f7ff ff7d 	bl	800a37c <std>
 800a482:	68e0      	ldr	r0, [r4, #12]
 800a484:	2202      	movs	r2, #2
 800a486:	2112      	movs	r1, #18
 800a488:	f7ff ff78 	bl	800a37c <std>
 800a48c:	2301      	movs	r3, #1
 800a48e:	61a3      	str	r3, [r4, #24]
 800a490:	e7d2      	b.n	800a438 <__sinit+0xc>
 800a492:	bf00      	nop
 800a494:	0800bbc8 	.word	0x0800bbc8
 800a498:	0800a3c5 	.word	0x0800a3c5

0800a49c <__sfp>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	4607      	mov	r7, r0
 800a4a0:	f7ff ffac 	bl	800a3fc <__sfp_lock_acquire>
 800a4a4:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <__sfp+0x84>)
 800a4a6:	681e      	ldr	r6, [r3, #0]
 800a4a8:	69b3      	ldr	r3, [r6, #24]
 800a4aa:	b913      	cbnz	r3, 800a4b2 <__sfp+0x16>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff ffbd 	bl	800a42c <__sinit>
 800a4b2:	3648      	adds	r6, #72	; 0x48
 800a4b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	d503      	bpl.n	800a4c4 <__sfp+0x28>
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	b30b      	cbz	r3, 800a504 <__sfp+0x68>
 800a4c0:	6836      	ldr	r6, [r6, #0]
 800a4c2:	e7f7      	b.n	800a4b4 <__sfp+0x18>
 800a4c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4c8:	b9d5      	cbnz	r5, 800a500 <__sfp+0x64>
 800a4ca:	4b16      	ldr	r3, [pc, #88]	; (800a524 <__sfp+0x88>)
 800a4cc:	60e3      	str	r3, [r4, #12]
 800a4ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a4d4:	f000 f847 	bl	800a566 <__retarget_lock_init_recursive>
 800a4d8:	f7ff ff96 	bl	800a408 <__sfp_lock_release>
 800a4dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4e4:	6025      	str	r5, [r4, #0]
 800a4e6:	61a5      	str	r5, [r4, #24]
 800a4e8:	2208      	movs	r2, #8
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4f0:	f7fb fd32 	bl	8005f58 <memset>
 800a4f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a500:	3468      	adds	r4, #104	; 0x68
 800a502:	e7d9      	b.n	800a4b8 <__sfp+0x1c>
 800a504:	2104      	movs	r1, #4
 800a506:	4638      	mov	r0, r7
 800a508:	f7ff ff62 	bl	800a3d0 <__sfmoreglue>
 800a50c:	4604      	mov	r4, r0
 800a50e:	6030      	str	r0, [r6, #0]
 800a510:	2800      	cmp	r0, #0
 800a512:	d1d5      	bne.n	800a4c0 <__sfp+0x24>
 800a514:	f7ff ff78 	bl	800a408 <__sfp_lock_release>
 800a518:	230c      	movs	r3, #12
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	e7ee      	b.n	800a4fc <__sfp+0x60>
 800a51e:	bf00      	nop
 800a520:	0800bbc8 	.word	0x0800bbc8
 800a524:	ffff0001 	.word	0xffff0001

0800a528 <_fwalk_reent>:
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	4606      	mov	r6, r0
 800a52e:	4688      	mov	r8, r1
 800a530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a534:	2700      	movs	r7, #0
 800a536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a53a:	f1b9 0901 	subs.w	r9, r9, #1
 800a53e:	d505      	bpl.n	800a54c <_fwalk_reent+0x24>
 800a540:	6824      	ldr	r4, [r4, #0]
 800a542:	2c00      	cmp	r4, #0
 800a544:	d1f7      	bne.n	800a536 <_fwalk_reent+0xe>
 800a546:	4638      	mov	r0, r7
 800a548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a54c:	89ab      	ldrh	r3, [r5, #12]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d907      	bls.n	800a562 <_fwalk_reent+0x3a>
 800a552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a556:	3301      	adds	r3, #1
 800a558:	d003      	beq.n	800a562 <_fwalk_reent+0x3a>
 800a55a:	4629      	mov	r1, r5
 800a55c:	4630      	mov	r0, r6
 800a55e:	47c0      	blx	r8
 800a560:	4307      	orrs	r7, r0
 800a562:	3568      	adds	r5, #104	; 0x68
 800a564:	e7e9      	b.n	800a53a <_fwalk_reent+0x12>

0800a566 <__retarget_lock_init_recursive>:
 800a566:	4770      	bx	lr

0800a568 <__retarget_lock_acquire_recursive>:
 800a568:	4770      	bx	lr

0800a56a <__retarget_lock_release_recursive>:
 800a56a:	4770      	bx	lr

0800a56c <__swhatbuf_r>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	460e      	mov	r6, r1
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	2900      	cmp	r1, #0
 800a576:	b096      	sub	sp, #88	; 0x58
 800a578:	4614      	mov	r4, r2
 800a57a:	461d      	mov	r5, r3
 800a57c:	da08      	bge.n	800a590 <__swhatbuf_r+0x24>
 800a57e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	602a      	str	r2, [r5, #0]
 800a586:	061a      	lsls	r2, r3, #24
 800a588:	d410      	bmi.n	800a5ac <__swhatbuf_r+0x40>
 800a58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a58e:	e00e      	b.n	800a5ae <__swhatbuf_r+0x42>
 800a590:	466a      	mov	r2, sp
 800a592:	f000 f903 	bl	800a79c <_fstat_r>
 800a596:	2800      	cmp	r0, #0
 800a598:	dbf1      	blt.n	800a57e <__swhatbuf_r+0x12>
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5a4:	425a      	negs	r2, r3
 800a5a6:	415a      	adcs	r2, r3
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	e7ee      	b.n	800a58a <__swhatbuf_r+0x1e>
 800a5ac:	2340      	movs	r3, #64	; 0x40
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	b016      	add	sp, #88	; 0x58
 800a5b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5b8 <__smakebuf_r>:
 800a5b8:	898b      	ldrh	r3, [r1, #12]
 800a5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5bc:	079d      	lsls	r5, r3, #30
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	d507      	bpl.n	800a5d4 <__smakebuf_r+0x1c>
 800a5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	6163      	str	r3, [r4, #20]
 800a5d0:	b002      	add	sp, #8
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	ab01      	add	r3, sp, #4
 800a5d6:	466a      	mov	r2, sp
 800a5d8:	f7ff ffc8 	bl	800a56c <__swhatbuf_r>
 800a5dc:	9900      	ldr	r1, [sp, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff f959 	bl	8009898 <_malloc_r>
 800a5e6:	b948      	cbnz	r0, 800a5fc <__smakebuf_r+0x44>
 800a5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ec:	059a      	lsls	r2, r3, #22
 800a5ee:	d4ef      	bmi.n	800a5d0 <__smakebuf_r+0x18>
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	f043 0302 	orr.w	r3, r3, #2
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	e7e3      	b.n	800a5c4 <__smakebuf_r+0xc>
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <__smakebuf_r+0x7c>)
 800a5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	6020      	str	r0, [r4, #0]
 800a604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	9b00      	ldr	r3, [sp, #0]
 800a60c:	6163      	str	r3, [r4, #20]
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	6120      	str	r0, [r4, #16]
 800a612:	b15b      	cbz	r3, 800a62c <__smakebuf_r+0x74>
 800a614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a618:	4630      	mov	r0, r6
 800a61a:	f000 f8d1 	bl	800a7c0 <_isatty_r>
 800a61e:	b128      	cbz	r0, 800a62c <__smakebuf_r+0x74>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	f043 0301 	orr.w	r3, r3, #1
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	89a0      	ldrh	r0, [r4, #12]
 800a62e:	4305      	orrs	r5, r0
 800a630:	81a5      	strh	r5, [r4, #12]
 800a632:	e7cd      	b.n	800a5d0 <__smakebuf_r+0x18>
 800a634:	0800a3c5 	.word	0x0800a3c5

0800a638 <_malloc_usable_size_r>:
 800a638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63c:	1f18      	subs	r0, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfbc      	itt	lt
 800a642:	580b      	ldrlt	r3, [r1, r0]
 800a644:	18c0      	addlt	r0, r0, r3
 800a646:	4770      	bx	lr

0800a648 <_raise_r>:
 800a648:	291f      	cmp	r1, #31
 800a64a:	b538      	push	{r3, r4, r5, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	d904      	bls.n	800a65c <_raise_r+0x14>
 800a652:	2316      	movs	r3, #22
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a65e:	b112      	cbz	r2, 800a666 <_raise_r+0x1e>
 800a660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a664:	b94b      	cbnz	r3, 800a67a <_raise_r+0x32>
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f830 	bl	800a6cc <_getpid_r>
 800a66c:	462a      	mov	r2, r5
 800a66e:	4601      	mov	r1, r0
 800a670:	4620      	mov	r0, r4
 800a672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a676:	f000 b817 	b.w	800a6a8 <_kill_r>
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d00a      	beq.n	800a694 <_raise_r+0x4c>
 800a67e:	1c59      	adds	r1, r3, #1
 800a680:	d103      	bne.n	800a68a <_raise_r+0x42>
 800a682:	2316      	movs	r3, #22
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	2001      	movs	r0, #1
 800a688:	e7e7      	b.n	800a65a <_raise_r+0x12>
 800a68a:	2400      	movs	r4, #0
 800a68c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a690:	4628      	mov	r0, r5
 800a692:	4798      	blx	r3
 800a694:	2000      	movs	r0, #0
 800a696:	e7e0      	b.n	800a65a <_raise_r+0x12>

0800a698 <raise>:
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <raise+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f7ff bfd3 	b.w	800a648 <_raise_r>
 800a6a2:	bf00      	nop
 800a6a4:	20000010 	.word	0x20000010

0800a6a8 <_kill_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_kill_r+0x20>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7f7 fee1 	bl	800247c <_kill>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d102      	bne.n	800a6c4 <_kill_r+0x1c>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b103      	cbz	r3, 800a6c4 <_kill_r+0x1c>
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000440 	.word	0x20000440

0800a6cc <_getpid_r>:
 800a6cc:	f7f7 bece 	b.w	800246c <_getpid>

0800a6d0 <__sread>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	f000 f894 	bl	800a804 <_read_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	bfab      	itete	ge
 800a6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a6e4:	181b      	addge	r3, r3, r0
 800a6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6ea:	bfac      	ite	ge
 800a6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6ee:	81a3      	strhlt	r3, [r4, #12]
 800a6f0:	bd10      	pop	{r4, pc}

0800a6f2 <__swrite>:
 800a6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f6:	461f      	mov	r7, r3
 800a6f8:	898b      	ldrh	r3, [r1, #12]
 800a6fa:	05db      	lsls	r3, r3, #23
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	460c      	mov	r4, r1
 800a700:	4616      	mov	r6, r2
 800a702:	d505      	bpl.n	800a710 <__swrite+0x1e>
 800a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a708:	2302      	movs	r3, #2
 800a70a:	2200      	movs	r2, #0
 800a70c:	f000 f868 	bl	800a7e0 <_lseek_r>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	4628      	mov	r0, r5
 800a722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	f000 b817 	b.w	800a758 <_write_r>

0800a72a <__sseek>:
 800a72a:	b510      	push	{r4, lr}
 800a72c:	460c      	mov	r4, r1
 800a72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a732:	f000 f855 	bl	800a7e0 <_lseek_r>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	bf15      	itete	ne
 800a73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a746:	81a3      	strheq	r3, [r4, #12]
 800a748:	bf18      	it	ne
 800a74a:	81a3      	strhne	r3, [r4, #12]
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <__sclose>:
 800a74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a752:	f000 b813 	b.w	800a77c <_close_r>
	...

0800a758 <_write_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	; (800a778 <_write_r+0x20>)
 800a75c:	4604      	mov	r4, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	2200      	movs	r2, #0
 800a764:	602a      	str	r2, [r5, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7f7 febf 	bl	80024ea <_write>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_write_r+0x1e>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_write_r+0x1e>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	20000440 	.word	0x20000440

0800a77c <_close_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d06      	ldr	r5, [pc, #24]	; (800a798 <_close_r+0x1c>)
 800a780:	2300      	movs	r3, #0
 800a782:	4604      	mov	r4, r0
 800a784:	4608      	mov	r0, r1
 800a786:	602b      	str	r3, [r5, #0]
 800a788:	f7f7 fecb 	bl	8002522 <_close>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_close_r+0x1a>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_close_r+0x1a>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20000440 	.word	0x20000440

0800a79c <_fstat_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	; (800a7bc <_fstat_r+0x20>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7f7 fec6 	bl	800253a <_fstat>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_fstat_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_fstat_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000440 	.word	0x20000440

0800a7c0 <_isatty_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_isatty_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f7 fec5 	bl	800255a <_isatty>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_isatty_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_isatty_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20000440 	.word	0x20000440

0800a7e0 <_lseek_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d07      	ldr	r5, [pc, #28]	; (800a800 <_lseek_r+0x20>)
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f7f7 febe 	bl	8002570 <_lseek>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_lseek_r+0x1e>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_lseek_r+0x1e>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20000440 	.word	0x20000440

0800a804 <_read_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	; (800a824 <_read_r+0x20>)
 800a808:	4604      	mov	r4, r0
 800a80a:	4608      	mov	r0, r1
 800a80c:	4611      	mov	r1, r2
 800a80e:	2200      	movs	r2, #0
 800a810:	602a      	str	r2, [r5, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	f7f7 fe4c 	bl	80024b0 <_read>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_read_r+0x1e>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_read_r+0x1e>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20000440 	.word	0x20000440

0800a828 <atan>:
 800a828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	ec55 4b10 	vmov	r4, r5, d0
 800a830:	4bc3      	ldr	r3, [pc, #780]	; (800ab40 <atan+0x318>)
 800a832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a836:	429e      	cmp	r6, r3
 800a838:	46ab      	mov	fp, r5
 800a83a:	dd18      	ble.n	800a86e <atan+0x46>
 800a83c:	4bc1      	ldr	r3, [pc, #772]	; (800ab44 <atan+0x31c>)
 800a83e:	429e      	cmp	r6, r3
 800a840:	dc01      	bgt.n	800a846 <atan+0x1e>
 800a842:	d109      	bne.n	800a858 <atan+0x30>
 800a844:	b144      	cbz	r4, 800a858 <atan+0x30>
 800a846:	4622      	mov	r2, r4
 800a848:	462b      	mov	r3, r5
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f5 fd3d 	bl	80002cc <__adddf3>
 800a852:	4604      	mov	r4, r0
 800a854:	460d      	mov	r5, r1
 800a856:	e006      	b.n	800a866 <atan+0x3e>
 800a858:	f1bb 0f00 	cmp.w	fp, #0
 800a85c:	f300 8131 	bgt.w	800aac2 <atan+0x29a>
 800a860:	a59b      	add	r5, pc, #620	; (adr r5, 800aad0 <atan+0x2a8>)
 800a862:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a866:	ec45 4b10 	vmov	d0, r4, r5
 800a86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	4bb6      	ldr	r3, [pc, #728]	; (800ab48 <atan+0x320>)
 800a870:	429e      	cmp	r6, r3
 800a872:	dc14      	bgt.n	800a89e <atan+0x76>
 800a874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a878:	429e      	cmp	r6, r3
 800a87a:	dc0d      	bgt.n	800a898 <atan+0x70>
 800a87c:	a396      	add	r3, pc, #600	; (adr r3, 800aad8 <atan+0x2b0>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	ee10 0a10 	vmov	r0, s0
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fd20 	bl	80002cc <__adddf3>
 800a88c:	4baf      	ldr	r3, [pc, #700]	; (800ab4c <atan+0x324>)
 800a88e:	2200      	movs	r2, #0
 800a890:	f7f6 f962 	bl	8000b58 <__aeabi_dcmpgt>
 800a894:	2800      	cmp	r0, #0
 800a896:	d1e6      	bne.n	800a866 <atan+0x3e>
 800a898:	f04f 3aff 	mov.w	sl, #4294967295
 800a89c:	e02b      	b.n	800a8f6 <atan+0xce>
 800a89e:	f000 f963 	bl	800ab68 <fabs>
 800a8a2:	4bab      	ldr	r3, [pc, #684]	; (800ab50 <atan+0x328>)
 800a8a4:	429e      	cmp	r6, r3
 800a8a6:	ec55 4b10 	vmov	r4, r5, d0
 800a8aa:	f300 80bf 	bgt.w	800aa2c <atan+0x204>
 800a8ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a8b2:	429e      	cmp	r6, r3
 800a8b4:	f300 80a0 	bgt.w	800a9f8 <atan+0x1d0>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	ee10 0a10 	vmov	r0, s0
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f5 fd02 	bl	80002cc <__adddf3>
 800a8c8:	4ba0      	ldr	r3, [pc, #640]	; (800ab4c <atan+0x324>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f7f5 fcfc 	bl	80002c8 <__aeabi_dsub>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f5 fcf5 	bl	80002cc <__adddf3>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f5 ffcf 	bl	800088c <__aeabi_ddiv>
 800a8ee:	f04f 0a00 	mov.w	sl, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f5 fe9b 	bl	8000638 <__aeabi_dmul>
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	4680      	mov	r8, r0
 800a908:	4689      	mov	r9, r1
 800a90a:	f7f5 fe95 	bl	8000638 <__aeabi_dmul>
 800a90e:	a374      	add	r3, pc, #464	; (adr r3, 800aae0 <atan+0x2b8>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	4606      	mov	r6, r0
 800a916:	460f      	mov	r7, r1
 800a918:	f7f5 fe8e 	bl	8000638 <__aeabi_dmul>
 800a91c:	a372      	add	r3, pc, #456	; (adr r3, 800aae8 <atan+0x2c0>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 fcd3 	bl	80002cc <__adddf3>
 800a926:	4632      	mov	r2, r6
 800a928:	463b      	mov	r3, r7
 800a92a:	f7f5 fe85 	bl	8000638 <__aeabi_dmul>
 800a92e:	a370      	add	r3, pc, #448	; (adr r3, 800aaf0 <atan+0x2c8>)
 800a930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a934:	f7f5 fcca 	bl	80002cc <__adddf3>
 800a938:	4632      	mov	r2, r6
 800a93a:	463b      	mov	r3, r7
 800a93c:	f7f5 fe7c 	bl	8000638 <__aeabi_dmul>
 800a940:	a36d      	add	r3, pc, #436	; (adr r3, 800aaf8 <atan+0x2d0>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	f7f5 fcc1 	bl	80002cc <__adddf3>
 800a94a:	4632      	mov	r2, r6
 800a94c:	463b      	mov	r3, r7
 800a94e:	f7f5 fe73 	bl	8000638 <__aeabi_dmul>
 800a952:	a36b      	add	r3, pc, #428	; (adr r3, 800ab00 <atan+0x2d8>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f7f5 fcb8 	bl	80002cc <__adddf3>
 800a95c:	4632      	mov	r2, r6
 800a95e:	463b      	mov	r3, r7
 800a960:	f7f5 fe6a 	bl	8000638 <__aeabi_dmul>
 800a964:	a368      	add	r3, pc, #416	; (adr r3, 800ab08 <atan+0x2e0>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fcaf 	bl	80002cc <__adddf3>
 800a96e:	4642      	mov	r2, r8
 800a970:	464b      	mov	r3, r9
 800a972:	f7f5 fe61 	bl	8000638 <__aeabi_dmul>
 800a976:	a366      	add	r3, pc, #408	; (adr r3, 800ab10 <atan+0x2e8>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	4680      	mov	r8, r0
 800a97e:	4689      	mov	r9, r1
 800a980:	4630      	mov	r0, r6
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fe58 	bl	8000638 <__aeabi_dmul>
 800a988:	a363      	add	r3, pc, #396	; (adr r3, 800ab18 <atan+0x2f0>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fc9b 	bl	80002c8 <__aeabi_dsub>
 800a992:	4632      	mov	r2, r6
 800a994:	463b      	mov	r3, r7
 800a996:	f7f5 fe4f 	bl	8000638 <__aeabi_dmul>
 800a99a:	a361      	add	r3, pc, #388	; (adr r3, 800ab20 <atan+0x2f8>)
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f7f5 fc92 	bl	80002c8 <__aeabi_dsub>
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	f7f5 fe46 	bl	8000638 <__aeabi_dmul>
 800a9ac:	a35e      	add	r3, pc, #376	; (adr r3, 800ab28 <atan+0x300>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 fc89 	bl	80002c8 <__aeabi_dsub>
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f5 fe3d 	bl	8000638 <__aeabi_dmul>
 800a9be:	a35c      	add	r3, pc, #368	; (adr r3, 800ab30 <atan+0x308>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fc80 	bl	80002c8 <__aeabi_dsub>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f7f5 fe34 	bl	8000638 <__aeabi_dmul>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	f7f5 fc78 	bl	80002cc <__adddf3>
 800a9dc:	4622      	mov	r2, r4
 800a9de:	462b      	mov	r3, r5
 800a9e0:	f7f5 fe2a 	bl	8000638 <__aeabi_dmul>
 800a9e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	d14b      	bne.n	800aa86 <atan+0x25e>
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f7f5 fc69 	bl	80002c8 <__aeabi_dsub>
 800a9f6:	e72c      	b.n	800a852 <atan+0x2a>
 800a9f8:	ee10 0a10 	vmov	r0, s0
 800a9fc:	4b53      	ldr	r3, [pc, #332]	; (800ab4c <atan+0x324>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fc61 	bl	80002c8 <__aeabi_dsub>
 800aa06:	4b51      	ldr	r3, [pc, #324]	; (800ab4c <atan+0x324>)
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7f5 fc5b 	bl	80002cc <__adddf3>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f5 ff35 	bl	800088c <__aeabi_ddiv>
 800aa22:	f04f 0a01 	mov.w	sl, #1
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	e764      	b.n	800a8f6 <atan+0xce>
 800aa2c:	4b49      	ldr	r3, [pc, #292]	; (800ab54 <atan+0x32c>)
 800aa2e:	429e      	cmp	r6, r3
 800aa30:	da1d      	bge.n	800aa6e <atan+0x246>
 800aa32:	ee10 0a10 	vmov	r0, s0
 800aa36:	4b48      	ldr	r3, [pc, #288]	; (800ab58 <atan+0x330>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f7f5 fc44 	bl	80002c8 <__aeabi_dsub>
 800aa40:	4b45      	ldr	r3, [pc, #276]	; (800ab58 <atan+0x330>)
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	2200      	movs	r2, #0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f5 fdf4 	bl	8000638 <__aeabi_dmul>
 800aa50:	4b3e      	ldr	r3, [pc, #248]	; (800ab4c <atan+0x324>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	f7f5 fc3a 	bl	80002cc <__adddf3>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f5 ff14 	bl	800088c <__aeabi_ddiv>
 800aa64:	f04f 0a02 	mov.w	sl, #2
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	e743      	b.n	800a8f6 <atan+0xce>
 800aa6e:	462b      	mov	r3, r5
 800aa70:	ee10 2a10 	vmov	r2, s0
 800aa74:	4939      	ldr	r1, [pc, #228]	; (800ab5c <atan+0x334>)
 800aa76:	2000      	movs	r0, #0
 800aa78:	f7f5 ff08 	bl	800088c <__aeabi_ddiv>
 800aa7c:	f04f 0a03 	mov.w	sl, #3
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	e737      	b.n	800a8f6 <atan+0xce>
 800aa86:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <atan+0x338>)
 800aa88:	4e36      	ldr	r6, [pc, #216]	; (800ab64 <atan+0x33c>)
 800aa8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aa8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800aa92:	e9da 2300 	ldrd	r2, r3, [sl]
 800aa96:	f7f5 fc17 	bl	80002c8 <__aeabi_dsub>
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	f7f5 fc13 	bl	80002c8 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aaaa:	f7f5 fc0d 	bl	80002c8 <__aeabi_dsub>
 800aaae:	f1bb 0f00 	cmp.w	fp, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	460d      	mov	r5, r1
 800aab6:	f6bf aed6 	bge.w	800a866 <atan+0x3e>
 800aaba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aabe:	461d      	mov	r5, r3
 800aac0:	e6d1      	b.n	800a866 <atan+0x3e>
 800aac2:	a51d      	add	r5, pc, #116	; (adr r5, 800ab38 <atan+0x310>)
 800aac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aac8:	e6cd      	b.n	800a866 <atan+0x3e>
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w
 800aad0:	54442d18 	.word	0x54442d18
 800aad4:	bff921fb 	.word	0xbff921fb
 800aad8:	8800759c 	.word	0x8800759c
 800aadc:	7e37e43c 	.word	0x7e37e43c
 800aae0:	e322da11 	.word	0xe322da11
 800aae4:	3f90ad3a 	.word	0x3f90ad3a
 800aae8:	24760deb 	.word	0x24760deb
 800aaec:	3fa97b4b 	.word	0x3fa97b4b
 800aaf0:	a0d03d51 	.word	0xa0d03d51
 800aaf4:	3fb10d66 	.word	0x3fb10d66
 800aaf8:	c54c206e 	.word	0xc54c206e
 800aafc:	3fb745cd 	.word	0x3fb745cd
 800ab00:	920083ff 	.word	0x920083ff
 800ab04:	3fc24924 	.word	0x3fc24924
 800ab08:	5555550d 	.word	0x5555550d
 800ab0c:	3fd55555 	.word	0x3fd55555
 800ab10:	2c6a6c2f 	.word	0x2c6a6c2f
 800ab14:	bfa2b444 	.word	0xbfa2b444
 800ab18:	52defd9a 	.word	0x52defd9a
 800ab1c:	3fadde2d 	.word	0x3fadde2d
 800ab20:	af749a6d 	.word	0xaf749a6d
 800ab24:	3fb3b0f2 	.word	0x3fb3b0f2
 800ab28:	fe231671 	.word	0xfe231671
 800ab2c:	3fbc71c6 	.word	0x3fbc71c6
 800ab30:	9998ebc4 	.word	0x9998ebc4
 800ab34:	3fc99999 	.word	0x3fc99999
 800ab38:	54442d18 	.word	0x54442d18
 800ab3c:	3ff921fb 	.word	0x3ff921fb
 800ab40:	440fffff 	.word	0x440fffff
 800ab44:	7ff00000 	.word	0x7ff00000
 800ab48:	3fdbffff 	.word	0x3fdbffff
 800ab4c:	3ff00000 	.word	0x3ff00000
 800ab50:	3ff2ffff 	.word	0x3ff2ffff
 800ab54:	40038000 	.word	0x40038000
 800ab58:	3ff80000 	.word	0x3ff80000
 800ab5c:	bff00000 	.word	0xbff00000
 800ab60:	0800c090 	.word	0x0800c090
 800ab64:	0800c070 	.word	0x0800c070

0800ab68 <fabs>:
 800ab68:	ec51 0b10 	vmov	r0, r1, d0
 800ab6c:	ee10 2a10 	vmov	r2, s0
 800ab70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab74:	ec43 2b10 	vmov	d0, r2, r3
 800ab78:	4770      	bx	lr

0800ab7a <atan2>:
 800ab7a:	f000 b89d 	b.w	800acb8 <__ieee754_atan2>
	...

0800ab80 <pow>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	ed2d 8b02 	vpush	{d8}
 800ab86:	eeb0 8a40 	vmov.f32	s16, s0
 800ab8a:	eef0 8a60 	vmov.f32	s17, s1
 800ab8e:	ec55 4b11 	vmov	r4, r5, d1
 800ab92:	f000 f95d 	bl	800ae50 <__ieee754_pow>
 800ab96:	4622      	mov	r2, r4
 800ab98:	462b      	mov	r3, r5
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	ec57 6b10 	vmov	r6, r7, d0
 800aba2:	f7f5 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d13b      	bne.n	800ac22 <pow+0xa2>
 800abaa:	ec51 0b18 	vmov	r0, r1, d8
 800abae:	2200      	movs	r2, #0
 800abb0:	2300      	movs	r3, #0
 800abb2:	f7f5 ffa9 	bl	8000b08 <__aeabi_dcmpeq>
 800abb6:	b1b8      	cbz	r0, 800abe8 <pow+0x68>
 800abb8:	2200      	movs	r2, #0
 800abba:	2300      	movs	r3, #0
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	f7f5 ffa2 	bl	8000b08 <__aeabi_dcmpeq>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d146      	bne.n	800ac56 <pow+0xd6>
 800abc8:	ec45 4b10 	vmov	d0, r4, r5
 800abcc:	f000 ff50 	bl	800ba70 <finite>
 800abd0:	b338      	cbz	r0, 800ac22 <pow+0xa2>
 800abd2:	2200      	movs	r2, #0
 800abd4:	2300      	movs	r3, #0
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 800abde:	b300      	cbz	r0, 800ac22 <pow+0xa2>
 800abe0:	f7fb f982 	bl	8005ee8 <__errno>
 800abe4:	2322      	movs	r3, #34	; 0x22
 800abe6:	e01b      	b.n	800ac20 <pow+0xa0>
 800abe8:	ec47 6b10 	vmov	d0, r6, r7
 800abec:	f000 ff40 	bl	800ba70 <finite>
 800abf0:	b9e0      	cbnz	r0, 800ac2c <pow+0xac>
 800abf2:	eeb0 0a48 	vmov.f32	s0, s16
 800abf6:	eef0 0a68 	vmov.f32	s1, s17
 800abfa:	f000 ff39 	bl	800ba70 <finite>
 800abfe:	b1a8      	cbz	r0, 800ac2c <pow+0xac>
 800ac00:	ec45 4b10 	vmov	d0, r4, r5
 800ac04:	f000 ff34 	bl	800ba70 <finite>
 800ac08:	b180      	cbz	r0, 800ac2c <pow+0xac>
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 ffab 	bl	8000b6c <__aeabi_dcmpun>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0e2      	beq.n	800abe0 <pow+0x60>
 800ac1a:	f7fb f965 	bl	8005ee8 <__errno>
 800ac1e:	2321      	movs	r3, #33	; 0x21
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	ecbd 8b02 	vpop	{d8}
 800ac26:	ec47 6b10 	vmov	d0, r6, r7
 800ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0f2      	beq.n	800ac22 <pow+0xa2>
 800ac3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac40:	eef0 0a68 	vmov.f32	s1, s17
 800ac44:	f000 ff14 	bl	800ba70 <finite>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d0ea      	beq.n	800ac22 <pow+0xa2>
 800ac4c:	ec45 4b10 	vmov	d0, r4, r5
 800ac50:	f000 ff0e 	bl	800ba70 <finite>
 800ac54:	e7c3      	b.n	800abde <pow+0x5e>
 800ac56:	4f01      	ldr	r7, [pc, #4]	; (800ac5c <pow+0xdc>)
 800ac58:	2600      	movs	r6, #0
 800ac5a:	e7e2      	b.n	800ac22 <pow+0xa2>
 800ac5c:	3ff00000 	.word	0x3ff00000

0800ac60 <sqrt>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	ed2d 8b02 	vpush	{d8}
 800ac66:	ec55 4b10 	vmov	r4, r5, d0
 800ac6a:	f000 fe1f 	bl	800b8ac <__ieee754_sqrt>
 800ac6e:	4622      	mov	r2, r4
 800ac70:	462b      	mov	r3, r5
 800ac72:	4620      	mov	r0, r4
 800ac74:	4629      	mov	r1, r5
 800ac76:	eeb0 8a40 	vmov.f32	s16, s0
 800ac7a:	eef0 8a60 	vmov.f32	s17, s1
 800ac7e:	f7f5 ff75 	bl	8000b6c <__aeabi_dcmpun>
 800ac82:	b990      	cbnz	r0, 800acaa <sqrt+0x4a>
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 ff46 	bl	8000b1c <__aeabi_dcmplt>
 800ac90:	b158      	cbz	r0, 800acaa <sqrt+0x4a>
 800ac92:	f7fb f929 	bl	8005ee8 <__errno>
 800ac96:	2321      	movs	r3, #33	; 0x21
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7f5 fdf3 	bl	800088c <__aeabi_ddiv>
 800aca6:	ec41 0b18 	vmov	d8, r0, r1
 800acaa:	eeb0 0a48 	vmov.f32	s0, s16
 800acae:	eef0 0a68 	vmov.f32	s1, s17
 800acb2:	ecbd 8b02 	vpop	{d8}
 800acb6:	bd38      	pop	{r3, r4, r5, pc}

0800acb8 <__ieee754_atan2>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	ec57 6b11 	vmov	r6, r7, d1
 800acc0:	4273      	negs	r3, r6
 800acc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ae48 <__ieee754_atan2+0x190>
 800acc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800acca:	4333      	orrs	r3, r6
 800accc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800acd0:	4573      	cmp	r3, lr
 800acd2:	ec51 0b10 	vmov	r0, r1, d0
 800acd6:	ee11 8a10 	vmov	r8, s2
 800acda:	d80a      	bhi.n	800acf2 <__ieee754_atan2+0x3a>
 800acdc:	4244      	negs	r4, r0
 800acde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ace2:	4304      	orrs	r4, r0
 800ace4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ace8:	4574      	cmp	r4, lr
 800acea:	ee10 9a10 	vmov	r9, s0
 800acee:	468c      	mov	ip, r1
 800acf0:	d907      	bls.n	800ad02 <__ieee754_atan2+0x4a>
 800acf2:	4632      	mov	r2, r6
 800acf4:	463b      	mov	r3, r7
 800acf6:	f7f5 fae9 	bl	80002cc <__adddf3>
 800acfa:	ec41 0b10 	vmov	d0, r0, r1
 800acfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ad06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad0a:	4334      	orrs	r4, r6
 800ad0c:	d103      	bne.n	800ad16 <__ieee754_atan2+0x5e>
 800ad0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad12:	f7ff bd89 	b.w	800a828 <atan>
 800ad16:	17bc      	asrs	r4, r7, #30
 800ad18:	f004 0402 	and.w	r4, r4, #2
 800ad1c:	ea53 0909 	orrs.w	r9, r3, r9
 800ad20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ad24:	d107      	bne.n	800ad36 <__ieee754_atan2+0x7e>
 800ad26:	2c02      	cmp	r4, #2
 800ad28:	d060      	beq.n	800adec <__ieee754_atan2+0x134>
 800ad2a:	2c03      	cmp	r4, #3
 800ad2c:	d1e5      	bne.n	800acfa <__ieee754_atan2+0x42>
 800ad2e:	a142      	add	r1, pc, #264	; (adr r1, 800ae38 <__ieee754_atan2+0x180>)
 800ad30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad34:	e7e1      	b.n	800acfa <__ieee754_atan2+0x42>
 800ad36:	ea52 0808 	orrs.w	r8, r2, r8
 800ad3a:	d106      	bne.n	800ad4a <__ieee754_atan2+0x92>
 800ad3c:	f1bc 0f00 	cmp.w	ip, #0
 800ad40:	da5f      	bge.n	800ae02 <__ieee754_atan2+0x14a>
 800ad42:	a13f      	add	r1, pc, #252	; (adr r1, 800ae40 <__ieee754_atan2+0x188>)
 800ad44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad48:	e7d7      	b.n	800acfa <__ieee754_atan2+0x42>
 800ad4a:	4572      	cmp	r2, lr
 800ad4c:	d10f      	bne.n	800ad6e <__ieee754_atan2+0xb6>
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad54:	d107      	bne.n	800ad66 <__ieee754_atan2+0xae>
 800ad56:	2c02      	cmp	r4, #2
 800ad58:	d84c      	bhi.n	800adf4 <__ieee754_atan2+0x13c>
 800ad5a:	4b35      	ldr	r3, [pc, #212]	; (800ae30 <__ieee754_atan2+0x178>)
 800ad5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ad60:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ad64:	e7c9      	b.n	800acfa <__ieee754_atan2+0x42>
 800ad66:	2c02      	cmp	r4, #2
 800ad68:	d848      	bhi.n	800adfc <__ieee754_atan2+0x144>
 800ad6a:	4b32      	ldr	r3, [pc, #200]	; (800ae34 <__ieee754_atan2+0x17c>)
 800ad6c:	e7f6      	b.n	800ad5c <__ieee754_atan2+0xa4>
 800ad6e:	4573      	cmp	r3, lr
 800ad70:	d0e4      	beq.n	800ad3c <__ieee754_atan2+0x84>
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad78:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad7c:	da1e      	bge.n	800adbc <__ieee754_atan2+0x104>
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	da01      	bge.n	800ad86 <__ieee754_atan2+0xce>
 800ad82:	323c      	adds	r2, #60	; 0x3c
 800ad84:	db1e      	blt.n	800adc4 <__ieee754_atan2+0x10c>
 800ad86:	4632      	mov	r2, r6
 800ad88:	463b      	mov	r3, r7
 800ad8a:	f7f5 fd7f 	bl	800088c <__aeabi_ddiv>
 800ad8e:	ec41 0b10 	vmov	d0, r0, r1
 800ad92:	f7ff fee9 	bl	800ab68 <fabs>
 800ad96:	f7ff fd47 	bl	800a828 <atan>
 800ad9a:	ec51 0b10 	vmov	r0, r1, d0
 800ad9e:	2c01      	cmp	r4, #1
 800ada0:	d013      	beq.n	800adca <__ieee754_atan2+0x112>
 800ada2:	2c02      	cmp	r4, #2
 800ada4:	d015      	beq.n	800add2 <__ieee754_atan2+0x11a>
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d0a7      	beq.n	800acfa <__ieee754_atan2+0x42>
 800adaa:	a319      	add	r3, pc, #100	; (adr r3, 800ae10 <__ieee754_atan2+0x158>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fa8a 	bl	80002c8 <__aeabi_dsub>
 800adb4:	a318      	add	r3, pc, #96	; (adr r3, 800ae18 <__ieee754_atan2+0x160>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	e014      	b.n	800ade6 <__ieee754_atan2+0x12e>
 800adbc:	a118      	add	r1, pc, #96	; (adr r1, 800ae20 <__ieee754_atan2+0x168>)
 800adbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc2:	e7ec      	b.n	800ad9e <__ieee754_atan2+0xe6>
 800adc4:	2000      	movs	r0, #0
 800adc6:	2100      	movs	r1, #0
 800adc8:	e7e9      	b.n	800ad9e <__ieee754_atan2+0xe6>
 800adca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adce:	4619      	mov	r1, r3
 800add0:	e793      	b.n	800acfa <__ieee754_atan2+0x42>
 800add2:	a30f      	add	r3, pc, #60	; (adr r3, 800ae10 <__ieee754_atan2+0x158>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fa76 	bl	80002c8 <__aeabi_dsub>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	a10d      	add	r1, pc, #52	; (adr r1, 800ae18 <__ieee754_atan2+0x160>)
 800ade2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade6:	f7f5 fa6f 	bl	80002c8 <__aeabi_dsub>
 800adea:	e786      	b.n	800acfa <__ieee754_atan2+0x42>
 800adec:	a10a      	add	r1, pc, #40	; (adr r1, 800ae18 <__ieee754_atan2+0x160>)
 800adee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf2:	e782      	b.n	800acfa <__ieee754_atan2+0x42>
 800adf4:	a10c      	add	r1, pc, #48	; (adr r1, 800ae28 <__ieee754_atan2+0x170>)
 800adf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfa:	e77e      	b.n	800acfa <__ieee754_atan2+0x42>
 800adfc:	2000      	movs	r0, #0
 800adfe:	2100      	movs	r1, #0
 800ae00:	e77b      	b.n	800acfa <__ieee754_atan2+0x42>
 800ae02:	a107      	add	r1, pc, #28	; (adr r1, 800ae20 <__ieee754_atan2+0x168>)
 800ae04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae08:	e777      	b.n	800acfa <__ieee754_atan2+0x42>
 800ae0a:	bf00      	nop
 800ae0c:	f3af 8000 	nop.w
 800ae10:	33145c07 	.word	0x33145c07
 800ae14:	3ca1a626 	.word	0x3ca1a626
 800ae18:	54442d18 	.word	0x54442d18
 800ae1c:	400921fb 	.word	0x400921fb
 800ae20:	54442d18 	.word	0x54442d18
 800ae24:	3ff921fb 	.word	0x3ff921fb
 800ae28:	54442d18 	.word	0x54442d18
 800ae2c:	3fe921fb 	.word	0x3fe921fb
 800ae30:	0800c0b0 	.word	0x0800c0b0
 800ae34:	0800c0c8 	.word	0x0800c0c8
 800ae38:	54442d18 	.word	0x54442d18
 800ae3c:	c00921fb 	.word	0xc00921fb
 800ae40:	54442d18 	.word	0x54442d18
 800ae44:	bff921fb 	.word	0xbff921fb
 800ae48:	7ff00000 	.word	0x7ff00000
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <__ieee754_pow>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ed2d 8b06 	vpush	{d8-d10}
 800ae58:	b089      	sub	sp, #36	; 0x24
 800ae5a:	ed8d 1b00 	vstr	d1, [sp]
 800ae5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae66:	ea58 0102 	orrs.w	r1, r8, r2
 800ae6a:	ec57 6b10 	vmov	r6, r7, d0
 800ae6e:	d115      	bne.n	800ae9c <__ieee754_pow+0x4c>
 800ae70:	19b3      	adds	r3, r6, r6
 800ae72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ae76:	4152      	adcs	r2, r2
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	4b89      	ldr	r3, [pc, #548]	; (800b0a0 <__ieee754_pow+0x250>)
 800ae7c:	4193      	sbcs	r3, r2
 800ae7e:	f080 84d2 	bcs.w	800b826 <__ieee754_pow+0x9d6>
 800ae82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fa1f 	bl	80002cc <__adddf3>
 800ae8e:	ec41 0b10 	vmov	d0, r0, r1
 800ae92:	b009      	add	sp, #36	; 0x24
 800ae94:	ecbd 8b06 	vpop	{d8-d10}
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	4b81      	ldr	r3, [pc, #516]	; (800b0a4 <__ieee754_pow+0x254>)
 800ae9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aea2:	429c      	cmp	r4, r3
 800aea4:	ee10 aa10 	vmov	sl, s0
 800aea8:	463d      	mov	r5, r7
 800aeaa:	dc06      	bgt.n	800aeba <__ieee754_pow+0x6a>
 800aeac:	d101      	bne.n	800aeb2 <__ieee754_pow+0x62>
 800aeae:	2e00      	cmp	r6, #0
 800aeb0:	d1e7      	bne.n	800ae82 <__ieee754_pow+0x32>
 800aeb2:	4598      	cmp	r8, r3
 800aeb4:	dc01      	bgt.n	800aeba <__ieee754_pow+0x6a>
 800aeb6:	d10f      	bne.n	800aed8 <__ieee754_pow+0x88>
 800aeb8:	b172      	cbz	r2, 800aed8 <__ieee754_pow+0x88>
 800aeba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aebe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aec2:	ea55 050a 	orrs.w	r5, r5, sl
 800aec6:	d1dc      	bne.n	800ae82 <__ieee754_pow+0x32>
 800aec8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aecc:	18db      	adds	r3, r3, r3
 800aece:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aed2:	4152      	adcs	r2, r2
 800aed4:	429d      	cmp	r5, r3
 800aed6:	e7d0      	b.n	800ae7a <__ieee754_pow+0x2a>
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	da3b      	bge.n	800af54 <__ieee754_pow+0x104>
 800aedc:	4b72      	ldr	r3, [pc, #456]	; (800b0a8 <__ieee754_pow+0x258>)
 800aede:	4598      	cmp	r8, r3
 800aee0:	dc51      	bgt.n	800af86 <__ieee754_pow+0x136>
 800aee2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aee6:	4598      	cmp	r8, r3
 800aee8:	f340 84ac 	ble.w	800b844 <__ieee754_pow+0x9f4>
 800aeec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aef4:	2b14      	cmp	r3, #20
 800aef6:	dd0f      	ble.n	800af18 <__ieee754_pow+0xc8>
 800aef8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aefc:	fa22 f103 	lsr.w	r1, r2, r3
 800af00:	fa01 f303 	lsl.w	r3, r1, r3
 800af04:	4293      	cmp	r3, r2
 800af06:	f040 849d 	bne.w	800b844 <__ieee754_pow+0x9f4>
 800af0a:	f001 0101 	and.w	r1, r1, #1
 800af0e:	f1c1 0302 	rsb	r3, r1, #2
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	b182      	cbz	r2, 800af38 <__ieee754_pow+0xe8>
 800af16:	e05f      	b.n	800afd8 <__ieee754_pow+0x188>
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d15b      	bne.n	800afd4 <__ieee754_pow+0x184>
 800af1c:	f1c3 0314 	rsb	r3, r3, #20
 800af20:	fa48 f103 	asr.w	r1, r8, r3
 800af24:	fa01 f303 	lsl.w	r3, r1, r3
 800af28:	4543      	cmp	r3, r8
 800af2a:	f040 8488 	bne.w	800b83e <__ieee754_pow+0x9ee>
 800af2e:	f001 0101 	and.w	r1, r1, #1
 800af32:	f1c1 0302 	rsb	r3, r1, #2
 800af36:	9304      	str	r3, [sp, #16]
 800af38:	4b5c      	ldr	r3, [pc, #368]	; (800b0ac <__ieee754_pow+0x25c>)
 800af3a:	4598      	cmp	r8, r3
 800af3c:	d132      	bne.n	800afa4 <__ieee754_pow+0x154>
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	f280 8478 	bge.w	800b836 <__ieee754_pow+0x9e6>
 800af46:	4959      	ldr	r1, [pc, #356]	; (800b0ac <__ieee754_pow+0x25c>)
 800af48:	4632      	mov	r2, r6
 800af4a:	463b      	mov	r3, r7
 800af4c:	2000      	movs	r0, #0
 800af4e:	f7f5 fc9d 	bl	800088c <__aeabi_ddiv>
 800af52:	e79c      	b.n	800ae8e <__ieee754_pow+0x3e>
 800af54:	2300      	movs	r3, #0
 800af56:	9304      	str	r3, [sp, #16]
 800af58:	2a00      	cmp	r2, #0
 800af5a:	d13d      	bne.n	800afd8 <__ieee754_pow+0x188>
 800af5c:	4b51      	ldr	r3, [pc, #324]	; (800b0a4 <__ieee754_pow+0x254>)
 800af5e:	4598      	cmp	r8, r3
 800af60:	d1ea      	bne.n	800af38 <__ieee754_pow+0xe8>
 800af62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af6a:	ea53 030a 	orrs.w	r3, r3, sl
 800af6e:	f000 845a 	beq.w	800b826 <__ieee754_pow+0x9d6>
 800af72:	4b4f      	ldr	r3, [pc, #316]	; (800b0b0 <__ieee754_pow+0x260>)
 800af74:	429c      	cmp	r4, r3
 800af76:	dd08      	ble.n	800af8a <__ieee754_pow+0x13a>
 800af78:	f1b9 0f00 	cmp.w	r9, #0
 800af7c:	f2c0 8457 	blt.w	800b82e <__ieee754_pow+0x9de>
 800af80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af84:	e783      	b.n	800ae8e <__ieee754_pow+0x3e>
 800af86:	2302      	movs	r3, #2
 800af88:	e7e5      	b.n	800af56 <__ieee754_pow+0x106>
 800af8a:	f1b9 0f00 	cmp.w	r9, #0
 800af8e:	f04f 0000 	mov.w	r0, #0
 800af92:	f04f 0100 	mov.w	r1, #0
 800af96:	f6bf af7a 	bge.w	800ae8e <__ieee754_pow+0x3e>
 800af9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800af9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afa2:	e774      	b.n	800ae8e <__ieee754_pow+0x3e>
 800afa4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afa8:	d106      	bne.n	800afb8 <__ieee754_pow+0x168>
 800afaa:	4632      	mov	r2, r6
 800afac:	463b      	mov	r3, r7
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 fb41 	bl	8000638 <__aeabi_dmul>
 800afb6:	e76a      	b.n	800ae8e <__ieee754_pow+0x3e>
 800afb8:	4b3e      	ldr	r3, [pc, #248]	; (800b0b4 <__ieee754_pow+0x264>)
 800afba:	4599      	cmp	r9, r3
 800afbc:	d10c      	bne.n	800afd8 <__ieee754_pow+0x188>
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	db0a      	blt.n	800afd8 <__ieee754_pow+0x188>
 800afc2:	ec47 6b10 	vmov	d0, r6, r7
 800afc6:	b009      	add	sp, #36	; 0x24
 800afc8:	ecbd 8b06 	vpop	{d8-d10}
 800afcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	f000 bc6c 	b.w	800b8ac <__ieee754_sqrt>
 800afd4:	2300      	movs	r3, #0
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	ec47 6b10 	vmov	d0, r6, r7
 800afdc:	f7ff fdc4 	bl	800ab68 <fabs>
 800afe0:	ec51 0b10 	vmov	r0, r1, d0
 800afe4:	f1ba 0f00 	cmp.w	sl, #0
 800afe8:	d129      	bne.n	800b03e <__ieee754_pow+0x1ee>
 800afea:	b124      	cbz	r4, 800aff6 <__ieee754_pow+0x1a6>
 800afec:	4b2f      	ldr	r3, [pc, #188]	; (800b0ac <__ieee754_pow+0x25c>)
 800afee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d123      	bne.n	800b03e <__ieee754_pow+0x1ee>
 800aff6:	f1b9 0f00 	cmp.w	r9, #0
 800affa:	da05      	bge.n	800b008 <__ieee754_pow+0x1b8>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	2000      	movs	r0, #0
 800b002:	492a      	ldr	r1, [pc, #168]	; (800b0ac <__ieee754_pow+0x25c>)
 800b004:	f7f5 fc42 	bl	800088c <__aeabi_ddiv>
 800b008:	2d00      	cmp	r5, #0
 800b00a:	f6bf af40 	bge.w	800ae8e <__ieee754_pow+0x3e>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b014:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b018:	4323      	orrs	r3, r4
 800b01a:	d108      	bne.n	800b02e <__ieee754_pow+0x1de>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4610      	mov	r0, r2
 800b022:	4619      	mov	r1, r3
 800b024:	f7f5 f950 	bl	80002c8 <__aeabi_dsub>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	e78f      	b.n	800af4e <__ieee754_pow+0xfe>
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	2b01      	cmp	r3, #1
 800b032:	f47f af2c 	bne.w	800ae8e <__ieee754_pow+0x3e>
 800b036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b03a:	4619      	mov	r1, r3
 800b03c:	e727      	b.n	800ae8e <__ieee754_pow+0x3e>
 800b03e:	0feb      	lsrs	r3, r5, #31
 800b040:	3b01      	subs	r3, #1
 800b042:	9306      	str	r3, [sp, #24]
 800b044:	9a06      	ldr	r2, [sp, #24]
 800b046:	9b04      	ldr	r3, [sp, #16]
 800b048:	4313      	orrs	r3, r2
 800b04a:	d102      	bne.n	800b052 <__ieee754_pow+0x202>
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	e7e6      	b.n	800b020 <__ieee754_pow+0x1d0>
 800b052:	4b19      	ldr	r3, [pc, #100]	; (800b0b8 <__ieee754_pow+0x268>)
 800b054:	4598      	cmp	r8, r3
 800b056:	f340 80fb 	ble.w	800b250 <__ieee754_pow+0x400>
 800b05a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b05e:	4598      	cmp	r8, r3
 800b060:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <__ieee754_pow+0x260>)
 800b062:	dd0c      	ble.n	800b07e <__ieee754_pow+0x22e>
 800b064:	429c      	cmp	r4, r3
 800b066:	dc0f      	bgt.n	800b088 <__ieee754_pow+0x238>
 800b068:	f1b9 0f00 	cmp.w	r9, #0
 800b06c:	da0f      	bge.n	800b08e <__ieee754_pow+0x23e>
 800b06e:	2000      	movs	r0, #0
 800b070:	b009      	add	sp, #36	; 0x24
 800b072:	ecbd 8b06 	vpop	{d8-d10}
 800b076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07a:	f000 bcf0 	b.w	800ba5e <__math_oflow>
 800b07e:	429c      	cmp	r4, r3
 800b080:	dbf2      	blt.n	800b068 <__ieee754_pow+0x218>
 800b082:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <__ieee754_pow+0x25c>)
 800b084:	429c      	cmp	r4, r3
 800b086:	dd19      	ble.n	800b0bc <__ieee754_pow+0x26c>
 800b088:	f1b9 0f00 	cmp.w	r9, #0
 800b08c:	dcef      	bgt.n	800b06e <__ieee754_pow+0x21e>
 800b08e:	2000      	movs	r0, #0
 800b090:	b009      	add	sp, #36	; 0x24
 800b092:	ecbd 8b06 	vpop	{d8-d10}
 800b096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f000 bcd7 	b.w	800ba4c <__math_uflow>
 800b09e:	bf00      	nop
 800b0a0:	fff00000 	.word	0xfff00000
 800b0a4:	7ff00000 	.word	0x7ff00000
 800b0a8:	433fffff 	.word	0x433fffff
 800b0ac:	3ff00000 	.word	0x3ff00000
 800b0b0:	3fefffff 	.word	0x3fefffff
 800b0b4:	3fe00000 	.word	0x3fe00000
 800b0b8:	41e00000 	.word	0x41e00000
 800b0bc:	4b60      	ldr	r3, [pc, #384]	; (800b240 <__ieee754_pow+0x3f0>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f7f5 f902 	bl	80002c8 <__aeabi_dsub>
 800b0c4:	a354      	add	r3, pc, #336	; (adr r3, 800b218 <__ieee754_pow+0x3c8>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	f7f5 fab3 	bl	8000638 <__aeabi_dmul>
 800b0d2:	a353      	add	r3, pc, #332	; (adr r3, 800b220 <__ieee754_pow+0x3d0>)
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	4606      	mov	r6, r0
 800b0da:	460f      	mov	r7, r1
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 faaa 	bl	8000638 <__aeabi_dmul>
 800b0e4:	4b57      	ldr	r3, [pc, #348]	; (800b244 <__ieee754_pow+0x3f4>)
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 faa2 	bl	8000638 <__aeabi_dmul>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	a14b      	add	r1, pc, #300	; (adr r1, 800b228 <__ieee754_pow+0x3d8>)
 800b0fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	4622      	mov	r2, r4
 800b104:	462b      	mov	r3, r5
 800b106:	f7f5 fa97 	bl	8000638 <__aeabi_dmul>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	2000      	movs	r0, #0
 800b110:	494d      	ldr	r1, [pc, #308]	; (800b248 <__ieee754_pow+0x3f8>)
 800b112:	f7f5 f8d9 	bl	80002c8 <__aeabi_dsub>
 800b116:	4622      	mov	r2, r4
 800b118:	4680      	mov	r8, r0
 800b11a:	4689      	mov	r9, r1
 800b11c:	462b      	mov	r3, r5
 800b11e:	4620      	mov	r0, r4
 800b120:	4629      	mov	r1, r5
 800b122:	f7f5 fa89 	bl	8000638 <__aeabi_dmul>
 800b126:	4602      	mov	r2, r0
 800b128:	460b      	mov	r3, r1
 800b12a:	4640      	mov	r0, r8
 800b12c:	4649      	mov	r1, r9
 800b12e:	f7f5 fa83 	bl	8000638 <__aeabi_dmul>
 800b132:	a33f      	add	r3, pc, #252	; (adr r3, 800b230 <__ieee754_pow+0x3e0>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 fa7e 	bl	8000638 <__aeabi_dmul>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4650      	mov	r0, sl
 800b142:	4659      	mov	r1, fp
 800b144:	f7f5 f8c0 	bl	80002c8 <__aeabi_dsub>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 f8ba 	bl	80002cc <__adddf3>
 800b158:	2000      	movs	r0, #0
 800b15a:	4632      	mov	r2, r6
 800b15c:	463b      	mov	r3, r7
 800b15e:	4604      	mov	r4, r0
 800b160:	460d      	mov	r5, r1
 800b162:	f7f5 f8b1 	bl	80002c8 <__aeabi_dsub>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f5 f8ab 	bl	80002c8 <__aeabi_dsub>
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	9a06      	ldr	r2, [sp, #24]
 800b176:	3b01      	subs	r3, #1
 800b178:	4313      	orrs	r3, r2
 800b17a:	4682      	mov	sl, r0
 800b17c:	468b      	mov	fp, r1
 800b17e:	f040 81e7 	bne.w	800b550 <__ieee754_pow+0x700>
 800b182:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b238 <__ieee754_pow+0x3e8>
 800b186:	eeb0 8a47 	vmov.f32	s16, s14
 800b18a:	eef0 8a67 	vmov.f32	s17, s15
 800b18e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b192:	2600      	movs	r6, #0
 800b194:	4632      	mov	r2, r6
 800b196:	463b      	mov	r3, r7
 800b198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b19c:	f7f5 f894 	bl	80002c8 <__aeabi_dsub>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f7f5 fa48 	bl	8000638 <__aeabi_dmul>
 800b1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	4659      	mov	r1, fp
 800b1b4:	f7f5 fa40 	bl	8000638 <__aeabi_dmul>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 f884 	bl	80002cc <__adddf3>
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4689      	mov	r9, r1
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 fa32 	bl	8000638 <__aeabi_dmul>
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	460d      	mov	r5, r1
 800b1da:	4602      	mov	r2, r0
 800b1dc:	4649      	mov	r1, r9
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7f5 f874 	bl	80002cc <__adddf3>
 800b1e4:	4b19      	ldr	r3, [pc, #100]	; (800b24c <__ieee754_pow+0x3fc>)
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	ec45 4b19 	vmov	d9, r4, r5
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	460f      	mov	r7, r1
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	f340 82f1 	ble.w	800b7d8 <__ieee754_pow+0x988>
 800b1f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b1fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b1fe:	4303      	orrs	r3, r0
 800b200:	f000 81e4 	beq.w	800b5cc <__ieee754_pow+0x77c>
 800b204:	ec51 0b18 	vmov	r0, r1, d8
 800b208:	2200      	movs	r2, #0
 800b20a:	2300      	movs	r3, #0
 800b20c:	f7f5 fc86 	bl	8000b1c <__aeabi_dcmplt>
 800b210:	3800      	subs	r0, #0
 800b212:	bf18      	it	ne
 800b214:	2001      	movne	r0, #1
 800b216:	e72b      	b.n	800b070 <__ieee754_pow+0x220>
 800b218:	60000000 	.word	0x60000000
 800b21c:	3ff71547 	.word	0x3ff71547
 800b220:	f85ddf44 	.word	0xf85ddf44
 800b224:	3e54ae0b 	.word	0x3e54ae0b
 800b228:	55555555 	.word	0x55555555
 800b22c:	3fd55555 	.word	0x3fd55555
 800b230:	652b82fe 	.word	0x652b82fe
 800b234:	3ff71547 	.word	0x3ff71547
 800b238:	00000000 	.word	0x00000000
 800b23c:	bff00000 	.word	0xbff00000
 800b240:	3ff00000 	.word	0x3ff00000
 800b244:	3fd00000 	.word	0x3fd00000
 800b248:	3fe00000 	.word	0x3fe00000
 800b24c:	408fffff 	.word	0x408fffff
 800b250:	4bd5      	ldr	r3, [pc, #852]	; (800b5a8 <__ieee754_pow+0x758>)
 800b252:	402b      	ands	r3, r5
 800b254:	2200      	movs	r2, #0
 800b256:	b92b      	cbnz	r3, 800b264 <__ieee754_pow+0x414>
 800b258:	4bd4      	ldr	r3, [pc, #848]	; (800b5ac <__ieee754_pow+0x75c>)
 800b25a:	f7f5 f9ed 	bl	8000638 <__aeabi_dmul>
 800b25e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b262:	460c      	mov	r4, r1
 800b264:	1523      	asrs	r3, r4, #20
 800b266:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b26a:	4413      	add	r3, r2
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	4bd0      	ldr	r3, [pc, #832]	; (800b5b0 <__ieee754_pow+0x760>)
 800b270:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b274:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b278:	429c      	cmp	r4, r3
 800b27a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b27e:	dd08      	ble.n	800b292 <__ieee754_pow+0x442>
 800b280:	4bcc      	ldr	r3, [pc, #816]	; (800b5b4 <__ieee754_pow+0x764>)
 800b282:	429c      	cmp	r4, r3
 800b284:	f340 8162 	ble.w	800b54c <__ieee754_pow+0x6fc>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	3301      	adds	r3, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b292:	2400      	movs	r4, #0
 800b294:	00e3      	lsls	r3, r4, #3
 800b296:	9307      	str	r3, [sp, #28]
 800b298:	4bc7      	ldr	r3, [pc, #796]	; (800b5b8 <__ieee754_pow+0x768>)
 800b29a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b29e:	ed93 7b00 	vldr	d7, [r3]
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	ec53 2b17 	vmov	r2, r3, d7
 800b2a8:	eeb0 9a47 	vmov.f32	s18, s14
 800b2ac:	eef0 9a67 	vmov.f32	s19, s15
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	f7f5 f809 	bl	80002c8 <__aeabi_dsub>
 800b2b6:	4652      	mov	r2, sl
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	462b      	mov	r3, r5
 800b2be:	ec51 0b19 	vmov	r0, r1, d9
 800b2c2:	f7f5 f803 	bl	80002cc <__adddf3>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	49bb      	ldr	r1, [pc, #748]	; (800b5bc <__ieee754_pow+0x76c>)
 800b2ce:	f7f5 fadd 	bl	800088c <__aeabi_ddiv>
 800b2d2:	ec41 0b1a 	vmov	d10, r0, r1
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4630      	mov	r0, r6
 800b2dc:	4639      	mov	r1, r7
 800b2de:	f7f5 f9ab 	bl	8000638 <__aeabi_dmul>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2ee:	46ab      	mov	fp, r5
 800b2f0:	106d      	asrs	r5, r5, #1
 800b2f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b2f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b2fa:	ec41 0b18 	vmov	d8, r0, r1
 800b2fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b302:	2200      	movs	r2, #0
 800b304:	4640      	mov	r0, r8
 800b306:	4649      	mov	r1, r9
 800b308:	4614      	mov	r4, r2
 800b30a:	461d      	mov	r5, r3
 800b30c:	f7f5 f994 	bl	8000638 <__aeabi_dmul>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f4 ffd6 	bl	80002c8 <__aeabi_dsub>
 800b31c:	ec53 2b19 	vmov	r2, r3, d9
 800b320:	4606      	mov	r6, r0
 800b322:	460f      	mov	r7, r1
 800b324:	4620      	mov	r0, r4
 800b326:	4629      	mov	r1, r5
 800b328:	f7f4 ffce 	bl	80002c8 <__aeabi_dsub>
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	4650      	mov	r0, sl
 800b332:	4659      	mov	r1, fp
 800b334:	f7f4 ffc8 	bl	80002c8 <__aeabi_dsub>
 800b338:	4642      	mov	r2, r8
 800b33a:	464b      	mov	r3, r9
 800b33c:	f7f5 f97c 	bl	8000638 <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f4 ffbe 	bl	80002c8 <__aeabi_dsub>
 800b34c:	ec53 2b1a 	vmov	r2, r3, d10
 800b350:	f7f5 f972 	bl	8000638 <__aeabi_dmul>
 800b354:	ec53 2b18 	vmov	r2, r3, d8
 800b358:	ec41 0b19 	vmov	d9, r0, r1
 800b35c:	ec51 0b18 	vmov	r0, r1, d8
 800b360:	f7f5 f96a 	bl	8000638 <__aeabi_dmul>
 800b364:	a37c      	add	r3, pc, #496	; (adr r3, 800b558 <__ieee754_pow+0x708>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	f7f5 f963 	bl	8000638 <__aeabi_dmul>
 800b372:	a37b      	add	r3, pc, #492	; (adr r3, 800b560 <__ieee754_pow+0x710>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ffa8 	bl	80002cc <__adddf3>
 800b37c:	4622      	mov	r2, r4
 800b37e:	462b      	mov	r3, r5
 800b380:	f7f5 f95a 	bl	8000638 <__aeabi_dmul>
 800b384:	a378      	add	r3, pc, #480	; (adr r3, 800b568 <__ieee754_pow+0x718>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff9f 	bl	80002cc <__adddf3>
 800b38e:	4622      	mov	r2, r4
 800b390:	462b      	mov	r3, r5
 800b392:	f7f5 f951 	bl	8000638 <__aeabi_dmul>
 800b396:	a376      	add	r3, pc, #472	; (adr r3, 800b570 <__ieee754_pow+0x720>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f4 ff96 	bl	80002cc <__adddf3>
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f7f5 f948 	bl	8000638 <__aeabi_dmul>
 800b3a8:	a373      	add	r3, pc, #460	; (adr r3, 800b578 <__ieee754_pow+0x728>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f7f4 ff8d 	bl	80002cc <__adddf3>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f5 f93f 	bl	8000638 <__aeabi_dmul>
 800b3ba:	a371      	add	r3, pc, #452	; (adr r3, 800b580 <__ieee754_pow+0x730>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 ff84 	bl	80002cc <__adddf3>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f5 f932 	bl	8000638 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4630      	mov	r0, r6
 800b3da:	4639      	mov	r1, r7
 800b3dc:	f7f5 f92c 	bl	8000638 <__aeabi_dmul>
 800b3e0:	4642      	mov	r2, r8
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	ec51 0b18 	vmov	r0, r1, d8
 800b3ec:	f7f4 ff6e 	bl	80002cc <__adddf3>
 800b3f0:	ec53 2b19 	vmov	r2, r3, d9
 800b3f4:	f7f5 f920 	bl	8000638 <__aeabi_dmul>
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	f7f4 ff66 	bl	80002cc <__adddf3>
 800b400:	4642      	mov	r2, r8
 800b402:	4682      	mov	sl, r0
 800b404:	468b      	mov	fp, r1
 800b406:	464b      	mov	r3, r9
 800b408:	4640      	mov	r0, r8
 800b40a:	4649      	mov	r1, r9
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	4b6b      	ldr	r3, [pc, #428]	; (800b5c0 <__ieee754_pow+0x770>)
 800b412:	2200      	movs	r2, #0
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	f7f4 ff58 	bl	80002cc <__adddf3>
 800b41c:	4652      	mov	r2, sl
 800b41e:	465b      	mov	r3, fp
 800b420:	f7f4 ff54 	bl	80002cc <__adddf3>
 800b424:	2000      	movs	r0, #0
 800b426:	4604      	mov	r4, r0
 800b428:	460d      	mov	r5, r1
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4640      	mov	r0, r8
 800b430:	4649      	mov	r1, r9
 800b432:	f7f5 f901 	bl	8000638 <__aeabi_dmul>
 800b436:	4b62      	ldr	r3, [pc, #392]	; (800b5c0 <__ieee754_pow+0x770>)
 800b438:	4680      	mov	r8, r0
 800b43a:	4689      	mov	r9, r1
 800b43c:	2200      	movs	r2, #0
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ff41 	bl	80002c8 <__aeabi_dsub>
 800b446:	4632      	mov	r2, r6
 800b448:	463b      	mov	r3, r7
 800b44a:	f7f4 ff3d 	bl	80002c8 <__aeabi_dsub>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	4650      	mov	r0, sl
 800b454:	4659      	mov	r1, fp
 800b456:	f7f4 ff37 	bl	80002c8 <__aeabi_dsub>
 800b45a:	ec53 2b18 	vmov	r2, r3, d8
 800b45e:	f7f5 f8eb 	bl	8000638 <__aeabi_dmul>
 800b462:	4622      	mov	r2, r4
 800b464:	4606      	mov	r6, r0
 800b466:	460f      	mov	r7, r1
 800b468:	462b      	mov	r3, r5
 800b46a:	ec51 0b19 	vmov	r0, r1, d9
 800b46e:	f7f5 f8e3 	bl	8000638 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f4 ff27 	bl	80002cc <__adddf3>
 800b47e:	4606      	mov	r6, r0
 800b480:	460f      	mov	r7, r1
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f4 ff1f 	bl	80002cc <__adddf3>
 800b48e:	a33e      	add	r3, pc, #248	; (adr r3, 800b588 <__ieee754_pow+0x738>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	2000      	movs	r0, #0
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	f7f5 f8cd 	bl	8000638 <__aeabi_dmul>
 800b49e:	4642      	mov	r2, r8
 800b4a0:	ec41 0b18 	vmov	d8, r0, r1
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f4 ff0d 	bl	80002c8 <__aeabi_dsub>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f4 ff07 	bl	80002c8 <__aeabi_dsub>
 800b4ba:	a335      	add	r3, pc, #212	; (adr r3, 800b590 <__ieee754_pow+0x740>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f5 f8ba 	bl	8000638 <__aeabi_dmul>
 800b4c4:	a334      	add	r3, pc, #208	; (adr r3, 800b598 <__ieee754_pow+0x748>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7f5 f8b1 	bl	8000638 <__aeabi_dmul>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 fef5 	bl	80002cc <__adddf3>
 800b4e2:	9a07      	ldr	r2, [sp, #28]
 800b4e4:	4b37      	ldr	r3, [pc, #220]	; (800b5c4 <__ieee754_pow+0x774>)
 800b4e6:	4413      	add	r3, r2
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f4 feee 	bl	80002cc <__adddf3>
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	9805      	ldr	r0, [sp, #20]
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	f7f5 f835 	bl	8000564 <__aeabi_i2d>
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	4b32      	ldr	r3, [pc, #200]	; (800b5c8 <__ieee754_pow+0x778>)
 800b4fe:	4413      	add	r3, r2
 800b500:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b504:	4606      	mov	r6, r0
 800b506:	460f      	mov	r7, r1
 800b508:	4652      	mov	r2, sl
 800b50a:	465b      	mov	r3, fp
 800b50c:	ec51 0b18 	vmov	r0, r1, d8
 800b510:	f7f4 fedc 	bl	80002cc <__adddf3>
 800b514:	4642      	mov	r2, r8
 800b516:	464b      	mov	r3, r9
 800b518:	f7f4 fed8 	bl	80002cc <__adddf3>
 800b51c:	4632      	mov	r2, r6
 800b51e:	463b      	mov	r3, r7
 800b520:	f7f4 fed4 	bl	80002cc <__adddf3>
 800b524:	2000      	movs	r0, #0
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	f7f4 fecb 	bl	80002c8 <__aeabi_dsub>
 800b532:	4642      	mov	r2, r8
 800b534:	464b      	mov	r3, r9
 800b536:	f7f4 fec7 	bl	80002c8 <__aeabi_dsub>
 800b53a:	ec53 2b18 	vmov	r2, r3, d8
 800b53e:	f7f4 fec3 	bl	80002c8 <__aeabi_dsub>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4650      	mov	r0, sl
 800b548:	4659      	mov	r1, fp
 800b54a:	e610      	b.n	800b16e <__ieee754_pow+0x31e>
 800b54c:	2401      	movs	r4, #1
 800b54e:	e6a1      	b.n	800b294 <__ieee754_pow+0x444>
 800b550:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b5a0 <__ieee754_pow+0x750>
 800b554:	e617      	b.n	800b186 <__ieee754_pow+0x336>
 800b556:	bf00      	nop
 800b558:	4a454eef 	.word	0x4a454eef
 800b55c:	3fca7e28 	.word	0x3fca7e28
 800b560:	93c9db65 	.word	0x93c9db65
 800b564:	3fcd864a 	.word	0x3fcd864a
 800b568:	a91d4101 	.word	0xa91d4101
 800b56c:	3fd17460 	.word	0x3fd17460
 800b570:	518f264d 	.word	0x518f264d
 800b574:	3fd55555 	.word	0x3fd55555
 800b578:	db6fabff 	.word	0xdb6fabff
 800b57c:	3fdb6db6 	.word	0x3fdb6db6
 800b580:	33333303 	.word	0x33333303
 800b584:	3fe33333 	.word	0x3fe33333
 800b588:	e0000000 	.word	0xe0000000
 800b58c:	3feec709 	.word	0x3feec709
 800b590:	dc3a03fd 	.word	0xdc3a03fd
 800b594:	3feec709 	.word	0x3feec709
 800b598:	145b01f5 	.word	0x145b01f5
 800b59c:	be3e2fe0 	.word	0xbe3e2fe0
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	3ff00000 	.word	0x3ff00000
 800b5a8:	7ff00000 	.word	0x7ff00000
 800b5ac:	43400000 	.word	0x43400000
 800b5b0:	0003988e 	.word	0x0003988e
 800b5b4:	000bb679 	.word	0x000bb679
 800b5b8:	0800c0e0 	.word	0x0800c0e0
 800b5bc:	3ff00000 	.word	0x3ff00000
 800b5c0:	40080000 	.word	0x40080000
 800b5c4:	0800c100 	.word	0x0800c100
 800b5c8:	0800c0f0 	.word	0x0800c0f0
 800b5cc:	a3b5      	add	r3, pc, #724	; (adr r3, 800b8a4 <__ieee754_pow+0xa54>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f4 fe79 	bl	80002cc <__adddf3>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	ec41 0b1a 	vmov	d10, r0, r1
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	f7f4 fe6f 	bl	80002c8 <__aeabi_dsub>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	ec51 0b1a 	vmov	r0, r1, d10
 800b5f2:	f7f5 fab1 	bl	8000b58 <__aeabi_dcmpgt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f47f ae04 	bne.w	800b204 <__ieee754_pow+0x3b4>
 800b5fc:	4aa4      	ldr	r2, [pc, #656]	; (800b890 <__ieee754_pow+0xa40>)
 800b5fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b602:	4293      	cmp	r3, r2
 800b604:	f340 8108 	ble.w	800b818 <__ieee754_pow+0x9c8>
 800b608:	151b      	asrs	r3, r3, #20
 800b60a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b60e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b612:	fa4a f303 	asr.w	r3, sl, r3
 800b616:	445b      	add	r3, fp
 800b618:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b61c:	4e9d      	ldr	r6, [pc, #628]	; (800b894 <__ieee754_pow+0xa44>)
 800b61e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b622:	4116      	asrs	r6, r2
 800b624:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b628:	2000      	movs	r0, #0
 800b62a:	ea23 0106 	bic.w	r1, r3, r6
 800b62e:	f1c2 0214 	rsb	r2, r2, #20
 800b632:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b636:	fa4a fa02 	asr.w	sl, sl, r2
 800b63a:	f1bb 0f00 	cmp.w	fp, #0
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	bfb8      	it	lt
 800b648:	f1ca 0a00 	rsblt	sl, sl, #0
 800b64c:	f7f4 fe3c 	bl	80002c8 <__aeabi_dsub>
 800b650:	ec41 0b19 	vmov	d9, r0, r1
 800b654:	4642      	mov	r2, r8
 800b656:	464b      	mov	r3, r9
 800b658:	ec51 0b19 	vmov	r0, r1, d9
 800b65c:	f7f4 fe36 	bl	80002cc <__adddf3>
 800b660:	a37b      	add	r3, pc, #492	; (adr r3, 800b850 <__ieee754_pow+0xa00>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	2000      	movs	r0, #0
 800b668:	4604      	mov	r4, r0
 800b66a:	460d      	mov	r5, r1
 800b66c:	f7f4 ffe4 	bl	8000638 <__aeabi_dmul>
 800b670:	ec53 2b19 	vmov	r2, r3, d9
 800b674:	4606      	mov	r6, r0
 800b676:	460f      	mov	r7, r1
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 fe24 	bl	80002c8 <__aeabi_dsub>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f7f4 fe1e 	bl	80002c8 <__aeabi_dsub>
 800b68c:	a372      	add	r3, pc, #456	; (adr r3, 800b858 <__ieee754_pow+0xa08>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 ffd1 	bl	8000638 <__aeabi_dmul>
 800b696:	a372      	add	r3, pc, #456	; (adr r3, 800b860 <__ieee754_pow+0xa10>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	4680      	mov	r8, r0
 800b69e:	4689      	mov	r9, r1
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f4 ffc8 	bl	8000638 <__aeabi_dmul>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f4 fe0c 	bl	80002cc <__adddf3>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f7f4 fe04 	bl	80002cc <__adddf3>
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	463b      	mov	r3, r7
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	4689      	mov	r9, r1
 800b6cc:	f7f4 fdfc 	bl	80002c8 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f4 fdf6 	bl	80002c8 <__aeabi_dsub>
 800b6dc:	4642      	mov	r2, r8
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	f7f4 ffa6 	bl	8000638 <__aeabi_dmul>
 800b6ec:	a35e      	add	r3, pc, #376	; (adr r3, 800b868 <__ieee754_pow+0xa18>)
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	f7f4 ff9f 	bl	8000638 <__aeabi_dmul>
 800b6fa:	a35d      	add	r3, pc, #372	; (adr r3, 800b870 <__ieee754_pow+0xa20>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 fde2 	bl	80002c8 <__aeabi_dsub>
 800b704:	4622      	mov	r2, r4
 800b706:	462b      	mov	r3, r5
 800b708:	f7f4 ff96 	bl	8000638 <__aeabi_dmul>
 800b70c:	a35a      	add	r3, pc, #360	; (adr r3, 800b878 <__ieee754_pow+0xa28>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	f7f4 fddb 	bl	80002cc <__adddf3>
 800b716:	4622      	mov	r2, r4
 800b718:	462b      	mov	r3, r5
 800b71a:	f7f4 ff8d 	bl	8000638 <__aeabi_dmul>
 800b71e:	a358      	add	r3, pc, #352	; (adr r3, 800b880 <__ieee754_pow+0xa30>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f4 fdd0 	bl	80002c8 <__aeabi_dsub>
 800b728:	4622      	mov	r2, r4
 800b72a:	462b      	mov	r3, r5
 800b72c:	f7f4 ff84 	bl	8000638 <__aeabi_dmul>
 800b730:	a355      	add	r3, pc, #340	; (adr r3, 800b888 <__ieee754_pow+0xa38>)
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	f7f4 fdc9 	bl	80002cc <__adddf3>
 800b73a:	4622      	mov	r2, r4
 800b73c:	462b      	mov	r3, r5
 800b73e:	f7f4 ff7b 	bl	8000638 <__aeabi_dmul>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f4 fdbd 	bl	80002c8 <__aeabi_dsub>
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4640      	mov	r0, r8
 800b758:	4649      	mov	r1, r9
 800b75a:	f7f4 ff6d 	bl	8000638 <__aeabi_dmul>
 800b75e:	2200      	movs	r2, #0
 800b760:	ec41 0b19 	vmov	d9, r0, r1
 800b764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b768:	4620      	mov	r0, r4
 800b76a:	4629      	mov	r1, r5
 800b76c:	f7f4 fdac 	bl	80002c8 <__aeabi_dsub>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	ec51 0b19 	vmov	r0, r1, d9
 800b778:	f7f5 f888 	bl	800088c <__aeabi_ddiv>
 800b77c:	4632      	mov	r2, r6
 800b77e:	4604      	mov	r4, r0
 800b780:	460d      	mov	r5, r1
 800b782:	463b      	mov	r3, r7
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f4 ff56 	bl	8000638 <__aeabi_dmul>
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	f7f4 fd9c 	bl	80002cc <__adddf3>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4620      	mov	r0, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7f4 fd94 	bl	80002c8 <__aeabi_dsub>
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	464b      	mov	r3, r9
 800b7a4:	f7f4 fd90 	bl	80002c8 <__aeabi_dsub>
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	493a      	ldr	r1, [pc, #232]	; (800b898 <__ieee754_pow+0xa48>)
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	f7f4 fd8a 	bl	80002c8 <__aeabi_dsub>
 800b7b4:	ec41 0b10 	vmov	d0, r0, r1
 800b7b8:	ee10 3a90 	vmov	r3, s1
 800b7bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7c4:	da2b      	bge.n	800b81e <__ieee754_pow+0x9ce>
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f000 f95e 	bl	800ba88 <scalbn>
 800b7cc:	ec51 0b10 	vmov	r0, r1, d0
 800b7d0:	ec53 2b18 	vmov	r2, r3, d8
 800b7d4:	f7ff bbed 	b.w	800afb2 <__ieee754_pow+0x162>
 800b7d8:	4b30      	ldr	r3, [pc, #192]	; (800b89c <__ieee754_pow+0xa4c>)
 800b7da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7de:	429e      	cmp	r6, r3
 800b7e0:	f77f af0c 	ble.w	800b5fc <__ieee754_pow+0x7ac>
 800b7e4:	4b2e      	ldr	r3, [pc, #184]	; (800b8a0 <__ieee754_pow+0xa50>)
 800b7e6:	440b      	add	r3, r1
 800b7e8:	4303      	orrs	r3, r0
 800b7ea:	d009      	beq.n	800b800 <__ieee754_pow+0x9b0>
 800b7ec:	ec51 0b18 	vmov	r0, r1, d8
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f7f5 f992 	bl	8000b1c <__aeabi_dcmplt>
 800b7f8:	3800      	subs	r0, #0
 800b7fa:	bf18      	it	ne
 800b7fc:	2001      	movne	r0, #1
 800b7fe:	e447      	b.n	800b090 <__ieee754_pow+0x240>
 800b800:	4622      	mov	r2, r4
 800b802:	462b      	mov	r3, r5
 800b804:	f7f4 fd60 	bl	80002c8 <__aeabi_dsub>
 800b808:	4642      	mov	r2, r8
 800b80a:	464b      	mov	r3, r9
 800b80c:	f7f5 f99a 	bl	8000b44 <__aeabi_dcmpge>
 800b810:	2800      	cmp	r0, #0
 800b812:	f43f aef3 	beq.w	800b5fc <__ieee754_pow+0x7ac>
 800b816:	e7e9      	b.n	800b7ec <__ieee754_pow+0x99c>
 800b818:	f04f 0a00 	mov.w	sl, #0
 800b81c:	e71a      	b.n	800b654 <__ieee754_pow+0x804>
 800b81e:	ec51 0b10 	vmov	r0, r1, d0
 800b822:	4619      	mov	r1, r3
 800b824:	e7d4      	b.n	800b7d0 <__ieee754_pow+0x980>
 800b826:	491c      	ldr	r1, [pc, #112]	; (800b898 <__ieee754_pow+0xa48>)
 800b828:	2000      	movs	r0, #0
 800b82a:	f7ff bb30 	b.w	800ae8e <__ieee754_pow+0x3e>
 800b82e:	2000      	movs	r0, #0
 800b830:	2100      	movs	r1, #0
 800b832:	f7ff bb2c 	b.w	800ae8e <__ieee754_pow+0x3e>
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7ff bb28 	b.w	800ae8e <__ieee754_pow+0x3e>
 800b83e:	9204      	str	r2, [sp, #16]
 800b840:	f7ff bb7a 	b.w	800af38 <__ieee754_pow+0xe8>
 800b844:	2300      	movs	r3, #0
 800b846:	f7ff bb64 	b.w	800af12 <__ieee754_pow+0xc2>
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w
 800b850:	00000000 	.word	0x00000000
 800b854:	3fe62e43 	.word	0x3fe62e43
 800b858:	fefa39ef 	.word	0xfefa39ef
 800b85c:	3fe62e42 	.word	0x3fe62e42
 800b860:	0ca86c39 	.word	0x0ca86c39
 800b864:	be205c61 	.word	0xbe205c61
 800b868:	72bea4d0 	.word	0x72bea4d0
 800b86c:	3e663769 	.word	0x3e663769
 800b870:	c5d26bf1 	.word	0xc5d26bf1
 800b874:	3ebbbd41 	.word	0x3ebbbd41
 800b878:	af25de2c 	.word	0xaf25de2c
 800b87c:	3f11566a 	.word	0x3f11566a
 800b880:	16bebd93 	.word	0x16bebd93
 800b884:	3f66c16c 	.word	0x3f66c16c
 800b888:	5555553e 	.word	0x5555553e
 800b88c:	3fc55555 	.word	0x3fc55555
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	000fffff 	.word	0x000fffff
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	4090cbff 	.word	0x4090cbff
 800b8a0:	3f6f3400 	.word	0x3f6f3400
 800b8a4:	652b82fe 	.word	0x652b82fe
 800b8a8:	3c971547 	.word	0x3c971547

0800b8ac <__ieee754_sqrt>:
 800b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b0:	ec55 4b10 	vmov	r4, r5, d0
 800b8b4:	4e55      	ldr	r6, [pc, #340]	; (800ba0c <__ieee754_sqrt+0x160>)
 800b8b6:	43ae      	bics	r6, r5
 800b8b8:	ee10 0a10 	vmov	r0, s0
 800b8bc:	ee10 3a10 	vmov	r3, s0
 800b8c0:	462a      	mov	r2, r5
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	d110      	bne.n	800b8e8 <__ieee754_sqrt+0x3c>
 800b8c6:	ee10 2a10 	vmov	r2, s0
 800b8ca:	462b      	mov	r3, r5
 800b8cc:	f7f4 feb4 	bl	8000638 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f7f4 fcf8 	bl	80002cc <__adddf3>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	ec45 4b10 	vmov	d0, r4, r5
 800b8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e8:	2d00      	cmp	r5, #0
 800b8ea:	dc10      	bgt.n	800b90e <__ieee754_sqrt+0x62>
 800b8ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8f0:	4330      	orrs	r0, r6
 800b8f2:	d0f5      	beq.n	800b8e0 <__ieee754_sqrt+0x34>
 800b8f4:	b15d      	cbz	r5, 800b90e <__ieee754_sqrt+0x62>
 800b8f6:	ee10 2a10 	vmov	r2, s0
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	ee10 0a10 	vmov	r0, s0
 800b900:	f7f4 fce2 	bl	80002c8 <__aeabi_dsub>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	f7f4 ffc0 	bl	800088c <__aeabi_ddiv>
 800b90c:	e7e6      	b.n	800b8dc <__ieee754_sqrt+0x30>
 800b90e:	1512      	asrs	r2, r2, #20
 800b910:	d074      	beq.n	800b9fc <__ieee754_sqrt+0x150>
 800b912:	07d4      	lsls	r4, r2, #31
 800b914:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b918:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b91c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b920:	bf5e      	ittt	pl
 800b922:	0fda      	lsrpl	r2, r3, #31
 800b924:	005b      	lslpl	r3, r3, #1
 800b926:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b92a:	2400      	movs	r4, #0
 800b92c:	0fda      	lsrs	r2, r3, #31
 800b92e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b932:	107f      	asrs	r7, r7, #1
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	2516      	movs	r5, #22
 800b938:	4620      	mov	r0, r4
 800b93a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b93e:	1886      	adds	r6, r0, r2
 800b940:	428e      	cmp	r6, r1
 800b942:	bfde      	ittt	le
 800b944:	1b89      	suble	r1, r1, r6
 800b946:	18b0      	addle	r0, r6, r2
 800b948:	18a4      	addle	r4, r4, r2
 800b94a:	0049      	lsls	r1, r1, #1
 800b94c:	3d01      	subs	r5, #1
 800b94e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b952:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b956:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b95a:	d1f0      	bne.n	800b93e <__ieee754_sqrt+0x92>
 800b95c:	462a      	mov	r2, r5
 800b95e:	f04f 0e20 	mov.w	lr, #32
 800b962:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b966:	4281      	cmp	r1, r0
 800b968:	eb06 0c05 	add.w	ip, r6, r5
 800b96c:	dc02      	bgt.n	800b974 <__ieee754_sqrt+0xc8>
 800b96e:	d113      	bne.n	800b998 <__ieee754_sqrt+0xec>
 800b970:	459c      	cmp	ip, r3
 800b972:	d811      	bhi.n	800b998 <__ieee754_sqrt+0xec>
 800b974:	f1bc 0f00 	cmp.w	ip, #0
 800b978:	eb0c 0506 	add.w	r5, ip, r6
 800b97c:	da43      	bge.n	800ba06 <__ieee754_sqrt+0x15a>
 800b97e:	2d00      	cmp	r5, #0
 800b980:	db41      	blt.n	800ba06 <__ieee754_sqrt+0x15a>
 800b982:	f100 0801 	add.w	r8, r0, #1
 800b986:	1a09      	subs	r1, r1, r0
 800b988:	459c      	cmp	ip, r3
 800b98a:	bf88      	it	hi
 800b98c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b990:	eba3 030c 	sub.w	r3, r3, ip
 800b994:	4432      	add	r2, r6
 800b996:	4640      	mov	r0, r8
 800b998:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b99c:	f1be 0e01 	subs.w	lr, lr, #1
 800b9a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b9a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b9ac:	d1db      	bne.n	800b966 <__ieee754_sqrt+0xba>
 800b9ae:	430b      	orrs	r3, r1
 800b9b0:	d006      	beq.n	800b9c0 <__ieee754_sqrt+0x114>
 800b9b2:	1c50      	adds	r0, r2, #1
 800b9b4:	bf13      	iteet	ne
 800b9b6:	3201      	addne	r2, #1
 800b9b8:	3401      	addeq	r4, #1
 800b9ba:	4672      	moveq	r2, lr
 800b9bc:	f022 0201 	bicne.w	r2, r2, #1
 800b9c0:	1063      	asrs	r3, r4, #1
 800b9c2:	0852      	lsrs	r2, r2, #1
 800b9c4:	07e1      	lsls	r1, r4, #31
 800b9c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9ce:	bf48      	it	mi
 800b9d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b9d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b9d8:	4614      	mov	r4, r2
 800b9da:	e781      	b.n	800b8e0 <__ieee754_sqrt+0x34>
 800b9dc:	0ad9      	lsrs	r1, r3, #11
 800b9de:	3815      	subs	r0, #21
 800b9e0:	055b      	lsls	r3, r3, #21
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	d0fa      	beq.n	800b9dc <__ieee754_sqrt+0x130>
 800b9e6:	02cd      	lsls	r5, r1, #11
 800b9e8:	d50a      	bpl.n	800ba00 <__ieee754_sqrt+0x154>
 800b9ea:	f1c2 0420 	rsb	r4, r2, #32
 800b9ee:	fa23 f404 	lsr.w	r4, r3, r4
 800b9f2:	1e55      	subs	r5, r2, #1
 800b9f4:	4093      	lsls	r3, r2
 800b9f6:	4321      	orrs	r1, r4
 800b9f8:	1b42      	subs	r2, r0, r5
 800b9fa:	e78a      	b.n	800b912 <__ieee754_sqrt+0x66>
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	e7f0      	b.n	800b9e2 <__ieee754_sqrt+0x136>
 800ba00:	0049      	lsls	r1, r1, #1
 800ba02:	3201      	adds	r2, #1
 800ba04:	e7ef      	b.n	800b9e6 <__ieee754_sqrt+0x13a>
 800ba06:	4680      	mov	r8, r0
 800ba08:	e7bd      	b.n	800b986 <__ieee754_sqrt+0xda>
 800ba0a:	bf00      	nop
 800ba0c:	7ff00000 	.word	0x7ff00000

0800ba10 <with_errno>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	4616      	mov	r6, r2
 800ba18:	f7fa fa66 	bl	8005ee8 <__errno>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	6006      	str	r6, [r0, #0]
 800ba20:	4620      	mov	r0, r4
 800ba22:	bd70      	pop	{r4, r5, r6, pc}

0800ba24 <xflow>:
 800ba24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba26:	4614      	mov	r4, r2
 800ba28:	461d      	mov	r5, r3
 800ba2a:	b108      	cbz	r0, 800ba30 <xflow+0xc>
 800ba2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba30:	e9cd 2300 	strd	r2, r3, [sp]
 800ba34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f7f4 fdfc 	bl	8000638 <__aeabi_dmul>
 800ba40:	2222      	movs	r2, #34	; 0x22
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba48:	f7ff bfe2 	b.w	800ba10 <with_errno>

0800ba4c <__math_uflow>:
 800ba4c:	b508      	push	{r3, lr}
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba54:	f7ff ffe6 	bl	800ba24 <xflow>
 800ba58:	ec41 0b10 	vmov	d0, r0, r1
 800ba5c:	bd08      	pop	{r3, pc}

0800ba5e <__math_oflow>:
 800ba5e:	b508      	push	{r3, lr}
 800ba60:	2200      	movs	r2, #0
 800ba62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba66:	f7ff ffdd 	bl	800ba24 <xflow>
 800ba6a:	ec41 0b10 	vmov	d0, r0, r1
 800ba6e:	bd08      	pop	{r3, pc}

0800ba70 <finite>:
 800ba70:	b082      	sub	sp, #8
 800ba72:	ed8d 0b00 	vstr	d0, [sp]
 800ba76:	9801      	ldr	r0, [sp, #4]
 800ba78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba80:	0fc0      	lsrs	r0, r0, #31
 800ba82:	b002      	add	sp, #8
 800ba84:	4770      	bx	lr
	...

0800ba88 <scalbn>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	ec55 4b10 	vmov	r4, r5, d0
 800ba8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba92:	4606      	mov	r6, r0
 800ba94:	462b      	mov	r3, r5
 800ba96:	b99a      	cbnz	r2, 800bac0 <scalbn+0x38>
 800ba98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba9c:	4323      	orrs	r3, r4
 800ba9e:	d036      	beq.n	800bb0e <scalbn+0x86>
 800baa0:	4b39      	ldr	r3, [pc, #228]	; (800bb88 <scalbn+0x100>)
 800baa2:	4629      	mov	r1, r5
 800baa4:	ee10 0a10 	vmov	r0, s0
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fdc5 	bl	8000638 <__aeabi_dmul>
 800baae:	4b37      	ldr	r3, [pc, #220]	; (800bb8c <scalbn+0x104>)
 800bab0:	429e      	cmp	r6, r3
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	da10      	bge.n	800bada <scalbn+0x52>
 800bab8:	a32b      	add	r3, pc, #172	; (adr r3, 800bb68 <scalbn+0xe0>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	e03a      	b.n	800bb36 <scalbn+0xae>
 800bac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d10c      	bne.n	800bae2 <scalbn+0x5a>
 800bac8:	ee10 2a10 	vmov	r2, s0
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fbfc 	bl	80002cc <__adddf3>
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	e019      	b.n	800bb0e <scalbn+0x86>
 800bada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bade:	460b      	mov	r3, r1
 800bae0:	3a36      	subs	r2, #54	; 0x36
 800bae2:	4432      	add	r2, r6
 800bae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bae8:	428a      	cmp	r2, r1
 800baea:	dd08      	ble.n	800bafe <scalbn+0x76>
 800baec:	2d00      	cmp	r5, #0
 800baee:	a120      	add	r1, pc, #128	; (adr r1, 800bb70 <scalbn+0xe8>)
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	da1c      	bge.n	800bb30 <scalbn+0xa8>
 800baf6:	a120      	add	r1, pc, #128	; (adr r1, 800bb78 <scalbn+0xf0>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	e018      	b.n	800bb30 <scalbn+0xa8>
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	dd08      	ble.n	800bb14 <scalbn+0x8c>
 800bb02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb0e:	ec45 4b10 	vmov	d0, r4, r5
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb18:	da19      	bge.n	800bb4e <scalbn+0xc6>
 800bb1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb1e:	429e      	cmp	r6, r3
 800bb20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb24:	dd0a      	ble.n	800bb3c <scalbn+0xb4>
 800bb26:	a112      	add	r1, pc, #72	; (adr r1, 800bb70 <scalbn+0xe8>)
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e2      	bne.n	800baf6 <scalbn+0x6e>
 800bb30:	a30f      	add	r3, pc, #60	; (adr r3, 800bb70 <scalbn+0xe8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fd7f 	bl	8000638 <__aeabi_dmul>
 800bb3a:	e7cb      	b.n	800bad4 <scalbn+0x4c>
 800bb3c:	a10a      	add	r1, pc, #40	; (adr r1, 800bb68 <scalbn+0xe0>)
 800bb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0b8      	beq.n	800bab8 <scalbn+0x30>
 800bb46:	a10e      	add	r1, pc, #56	; (adr r1, 800bb80 <scalbn+0xf8>)
 800bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4c:	e7b4      	b.n	800bab8 <scalbn+0x30>
 800bb4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb52:	3236      	adds	r2, #54	; 0x36
 800bb54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <scalbn+0x108>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	e7e8      	b.n	800bb36 <scalbn+0xae>
 800bb64:	f3af 8000 	nop.w
 800bb68:	c2f8f359 	.word	0xc2f8f359
 800bb6c:	01a56e1f 	.word	0x01a56e1f
 800bb70:	8800759c 	.word	0x8800759c
 800bb74:	7e37e43c 	.word	0x7e37e43c
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	fe37e43c 	.word	0xfe37e43c
 800bb80:	c2f8f359 	.word	0xc2f8f359
 800bb84:	81a56e1f 	.word	0x81a56e1f
 800bb88:	43500000 	.word	0x43500000
 800bb8c:	ffff3cb0 	.word	0xffff3cb0
 800bb90:	3c900000 	.word	0x3c900000

0800bb94 <_init>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_fini>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	bf00      	nop
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr
